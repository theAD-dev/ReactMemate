{"version":3,"file":"static/js/8777.15abbfe0.chunk.js","mappings":"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","sources":["entities/setting/accounting/department-turnover-plan/api/department-turnover-plan.api.jsx","components/layout/settings/accounting/account-code.js","entities/setting/accounting/department-turnover-plan/models/get-accounting-list.query.jsx"],"sourcesContent":["import { fetchInstance } from \"../../../../../shared/lib/fetch-api-instance\";\n\nexport const getAccountingList = async () => {\n    const path = `/settings/accounting/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const updateAccountingTarget = async (id, data) => {\n    const path = `/settings/accounting/${id}/`;\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getIndustryServiceList = async () => {\n    const path = `/suppliers/industries/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const updateIndustryServiceCode = async (id, data) => {\n    const path = `/suppliers/industries/${id}/`;\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getXeroCodesList = async () => {\n    const path = `/references/xero-codes/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getAccountCodeList = async () => {\n    const path = `/account_codes/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport { useTrialHeight } from '../../../../app/providers/trial-height-provider';\nimport { useAccountCodeGetQuery } from '../../../../entities/setting/accounting/department-turnover-plan/models/get-accounting-list.query';\n\nconst AccountCode = () => {\n    const { trialHeight } = useTrialHeight();\n    const [accountCodes, setAccountCodes] = useState([]);\n    const accountCodeQuery = useAccountCodeGetQuery();\n\n    useEffect(() => {\n        if (accountCodeQuery?.data) {\n            const codes = accountCodeQuery?.data.flatMap(code =>\n                code.codes.map(item => ({\n                    ...item,\n                    category: code.category\n                }))\n            );\n            setAccountCodes(codes);\n        }\n    }, [accountCodeQuery?.data]);\n\n    return (\n        <>\n            <Helmet>\n                <title>MeMate - Expenses Account</title>\n            </Helmet>\n            <div className='headSticky'>\n                <h1>Accounting</h1>\n                <div className='contentMenuTab'>\n                    <ul>\n                        <li><Link to=\"/settings/accounting/department-turnover-plan\">Department Turnover Plan</Link></li>\n                        <li><Link to=\"/settings/accounting/industry-service\">Industry Service</Link></li>\n                        <li className='menuActive'><Link to=\"/settings/accounting/account-code\">Account Code</Link></li>\n                    </ul>\n                </div>\n            </div>\n            <div className={`content_wrap_main w-100`} style={{ paddingBottom: `${trialHeight}px` }}>\n                <div className='content_wrapper w-100'>\n                    <div className=\"listwrapper\">\n                        <div className=\"topHeadStyle pb-3\">\n                            <h2>Account Code</h2>\n                        </div>\n\n                        <DataTable className='w-100' showGridlines rowGroupMode=\"rowspan\" groupRowsBy=\"category\" value={accountCodes || []} tableStyle={{ minWidth: '100%', border: '1px solid #f2f2f2' }}>\n                            <Column header=\"#\" body={(data, options) => options.rowIndex + 1}></Column>\n                            <Column field=\"category\" header=\"Category\"></Column>\n                            <Column field=\"code\" header=\"Codes\"></Column>\n                            <Column field=\"name\" header=\"Account Name\"></Column>\n                            <Column field='description' header=\"Description\"></Column>\n                        </DataTable>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default AccountCode;\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getAccountCodeList, getAccountingList, getIndustryServiceList, getXeroCodesList } from \"../api/department-turnover-plan.api\";\n\nexport const useAccountingGetQuery = () => {\n    return useQuery({\n        queryKey: ['accounting-list'],\n        queryFn: getAccountingList\n    });\n};\n\nexport const useIndustryServiceGetQuery = () => {\n    return useQuery({\n        queryKey: ['industry-service-list'],\n        queryFn: getIndustryServiceList\n    });\n};\n\nexport const useXeroCodesGetQuery = () => {\n    return useQuery({\n        queryKey: ['xero-codes-list'],\n        queryFn: getXeroCodesList\n    });\n};\n\nexport const useAccountCodeGetQuery = () => {\n    return useQuery({\n        queryKey: ['account-code-list'],\n        queryFn: getAccountCodeList\n    });\n};\n"],"names":["getAccountingList","async","fetchInstance","method","updateAccountingTarget","id","data","path","options","body","getIndustryServiceList","updateIndustryServiceCode","getXeroCodesList","getAccountCodeList","AccountCode","trialHeight","useTrialHeight","accountCodes","setAccountCodes","useState","accountCodeQuery","useAccountCodeGetQuery","useEffect","codes","flatMap","code","map","item","category","_jsxs","_Fragment","children","_jsx","Helmet","className","Link","to","style","paddingBottom","DataTable","showGridlines","rowGroupMode","groupRowsBy","value","tableStyle","minWidth","border","Column","header","rowIndex","field","useAccountingGetQuery","useQuery","queryKey","queryFn","useIndustryServiceGetQuery","useXeroCodesGetQuery"],"sourceRoot":""}