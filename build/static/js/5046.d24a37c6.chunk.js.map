{"version":3,"file":"static/js/5046.d24a37c6.chunk.js","mappings":"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","sources":["webpack://memateapp/./src/components/layout/settings/setting.profile.module.scss?a353","components/layout/settings/MyProfile.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"activelist\":\"setting_profile_activelist__gv+28\",\"viewBorderWrap\":\"setting_profile_viewBorderWrap__S25UZ\",\"editBorderWrap\":\"setting_profile_editBorderWrap__WzX+8\",\"editinfo\":\"setting_profile_editinfo__th63n\",\"editpara\":\"setting_profile_editpara__vymGe\",\"listwrapp\":\"setting_profile_listwrapp__07-ty\"};","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport exclamationCircle from \"../../../assets/images/icon/exclamation-circle.svg\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { fetchProfile, updateProfile } from \"../../../APIs/ProfileApi\";\nimport { Link } from \"react-router-dom\";\nimport Sidebar from \"./Sidebar\";\nimport styles from \"./setting.profile.module.scss\";\nimport {\n  PencilSquare,\n  Telephone,\n  Link45deg,\n  Upload,\n} from \"react-bootstrap-icons\";\nimport AvatarImg from \"../../../assets/images/img/Avatar.png\";\nimport FileUploader from \"../../../ui/file-uploader/file-uploader\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst schema = yup.object().shape({\n  first_name: yup.string().required(\"First Name is required\"),\n  last_name: yup.string().required(\"Last Name is required\"),\n  email: yup\n    .string()\n    .email(\"Invalid email\")\n    .required(\"Main Company Email is required\"),\n  phone: yup.string(),\n});\n\nfunction MyProfile() {\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [photo, setPhoto] = useState({});\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"profile\"],\n    queryFn: fetchProfile,\n    onSuccess: (data) => {\n      reset(data);\n    },\n    onError: (error) => {\n      console.error(\"Error fetching data:\", error);\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data) => updateProfile(data, photo),\n\n    onSuccess: () => {\n      window.location.reload();\n      setIsEditingGroup(false);\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\"data: \", data);\n    mutation.mutate({ ...data });\n  };\n\n  if (isLoading || error) return <div style={{ position: 'fixed', top: '50%', left: '50%', background: 'white', width: '60px', height: '60px', borderRadius: '4px', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 10 }} className=\"shadow-lg\">\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>;\n\n  const handleEditGroup = () => {\n    setIsEditingGroup(true);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"settings-wrap\">\n        <div className=\"settings-wrapper\">\n          <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />\n          <div className=\"settings-content\">\n            <div className=\"headSticky\">\n              <h1>My Profile </h1>\n            </div>\n            <div\n              className={`content_wrap_main ${isEditingGroup ? \"isEditingwrap\" : \"\"\n                }`}\n            >\n              <div className=\"content_wrapper\">\n                <div className=\"listwrapper\">\n                  <div className=\"topHeadStyle\">\n                    <div className=\"\">\n                      <h2>My Profile</h2>\n                      {!isEditingGroup ? (\n                        <></>\n                      ) : (\n                        <p>\n                          For your user picture, we suggest choosing a simple,\n                          neutral photo of yourself or a corporate headshot to\n                          ensure clear and professional communication.\n                        </p>\n                      )}\n                    </div>\n                    {!isEditingGroup && (\n                      <Link to=\"#\" onClick={handleEditGroup}>\n                        Edit\n                        <PencilSquare color=\"#344054\" size={20} />\n                      </Link>\n                    )}\n                  </div>\n                  <ul>\n                    <li\n                      className={`${isEditingGroup\n                        ? `${styles.editBorderWrap}`\n                        : `${styles.viewBorderWrap}`\n                        }`}\n                    >\n                      <div className={styles.editinfo}>\n                        <span>First Name</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.first_name} </strong>\n                        ) : (\n                          <>\n                            <div\n                              className={`inputInfo ${errors.first_name ? \"error-border\" : \"\"\n                                }`}\n                            >\n                              <input\n                                {...register(\"first_name\")}\n                                placeholder=\"Enter First Name\"\n                                defaultValue={data.first_name}\n                              />\n                              {errors.first_name && (\n                                <img\n                                  className=\"ExclamationCircle\"\n                                  src={exclamationCircle}\n                                  alt=\"Exclamation Circle\"\n                                />\n                              )}\n                            </div>\n                            {errors.first_name && (\n                              <p className=\"error-message\">\n                                {errors.first_name.message}\n                              </p>\n                            )}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? <></> : <></>}\n                    </li>\n                    <li\n                      className={`${isEditingGroup\n                        ? `${styles.editBorderWrap}`\n                        : `${styles.viewBorderWrap}`\n                        }`}\n                    >\n                      <div className={styles.editinfo}>\n                        <span>Last Name</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.last_name} </strong>\n                        ) : (\n                          <>\n                            <div\n                              className={`inputInfo ${errors.last_name ? \"error-border\" : \"\"\n                                }`}\n                            >\n                              <input\n                                {...register(\"last_name\")}\n                                placeholder=\"Enter Last name name\"\n                                defaultValue={data.last_name}\n                              />\n                              {errors.last_name && (\n                                <img\n                                  className=\"ExclamationCircle\"\n                                  src={exclamationCircle}\n                                  alt=\"Exclamation Circle\"\n                                />\n                              )}\n                            </div>\n                            {errors.last_name && (\n                              <p className=\"error-message\">\n                                {errors.last_name.message}\n                              </p>\n                            )}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? <></> : <></>}\n                    </li>\n                    <li\n                      className={`${isEditingGroup\n                        ? `${styles.editBorderWrap}`\n                        : `${styles.viewBorderWrap}`\n                        }`}\n                    >\n                      <div className={styles.editinfo}>\n                        <span>User picture</span>\n                        {!isEditingGroup ? (\n                          <strong>\n                            {data.photo ? (\n                              <div style={{ width: '64px', height: '64px', borderRadius: '50%', overflow: 'hidden', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                <img\n                                  src={data.photo}\n                                  width={76}\n                                  alt=\"Company Logo\"\n                                />\n                              </div>\n                            ) : (\n                              <img src={AvatarImg} alt=\"DummyImg\" />\n                            )}\n                          </strong>\n                        ) : (\n                          <div className=\"upload-btn-wrapper\">\n                            <FileUpload photo={photo} data={data} setPhoto={setPhoto} />\n                          </div>\n                        )}\n                      </div>\n\n                      {!isEditingGroup ? (\n                        <></>\n                      ) : (\n                        ''\n                      )}\n                    </li>\n\n                    <li\n                      className={`${isEditingGroup\n                        ? `${styles.editBorderWrap}`\n                        : `${styles.viewBorderWrap}`\n                        }`}\n                    >\n                      <div className={styles.editinfo}>\n                        <span>Email</span>\n                        {!isEditingGroup ? (\n                          <strong>\n                            {data.email} <Link45deg color=\"#158ECC\" size={20} />\n                          </strong>\n                        ) : (\n                          <>\n                            <div\n                              className={`inputInfo ${errors.email ? \"error-border\" : \"\"\n                                }`}\n                            >\n                              <input\n                                {...register(\"email\")}\n                                placeholder=\"Enter Email\"\n                                defaultValue={data.email}\n                              />\n                              {errors.email && (\n                                <img\n                                  className=\"ExclamationCircle\"\n                                  src={exclamationCircle}\n                                  alt=\"Exclamation Circle\"\n                                />\n                              )}\n                            </div>\n                            {errors.email && (\n                              <p className=\"error-message\">\n                                {errors.email.message}\n                              </p>\n                            )}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <></>\n                      ) : (\n                        ''\n                      )}\n                    </li>\n                    <li\n                      className={`${isEditingGroup\n                        ? `${styles.editBorderWrap}`\n                        : `${styles.viewBorderWrap}`\n                        }`}\n                    >\n                      <div className={styles.editinfo}>\n                        <span>Phone Number</span>\n                        {!isEditingGroup ? (\n                          <strong>\n                            {data.phone} <Telephone color=\"#158ECC\" size={20} />\n                          </strong>\n                        ) : (\n                          <>\n                            <div\n                              className={`inputInfo ${errors.phone ? \"error-border\" : \"\"\n                                }`}\n                            >\n                              <input\n                                {...register(\"phone\")}\n                                placeholder=\"Enter Phone Number\"\n                                defaultValue={data.phone}\n                              />\n                              {errors.phone && (\n                                <img\n                                  className=\"ExclamationCircle\"\n                                  src={exclamationCircle}\n                                  alt=\"Exclamation Circle\"\n                                />\n                              )}\n                            </div>\n                            {errors.phone && (\n                              <p className=\"error-message\">\n                                {errors.phone.message}\n                              </p>\n                            )}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <></>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <></>\n                        </div>\n                      )}\n                    </li>\n                    <li\n                      className={`${isEditingGroup\n                        ? `${styles.editBorderWrap}`\n                        : `${styles.viewBorderWrap}`\n                        }`}\n                    >\n                      <div className={styles.editinfo}>\n                        <span>Position</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.type}</strong>\n                        ) : (\n                          <>\n                            <div\n                              className={`inputInfo ${errors.type ? \"error-border\" : \"\"\n                                }`}\n                            >\n                              <input\n                                {...register(\"type\")}\n                                placeholder=\"Enter Position\"\n                                defaultValue={data.type}\n                              />\n                              {errors.type && (\n                                <img\n                                  className=\"ExclamationCircle\"\n                                  src={exclamationCircle}\n                                  alt=\"Exclamation Circle\"\n                                />\n                              )}\n                            </div>\n                            {errors.type && (\n                              <p className=\"error-message\">\n                                {errors.type.message}\n                              </p>\n                            )}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <></>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p></p>\n                        </div>\n                      )}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {isEditingGroup && (\n              <div className=\"updateButtonGeneral\">\n                <button className=\"cancel\">Cancel</button>\n                <button\n                  type=\"submit\"\n                  className=\"save mr-3\"\n                  disabled={mutation.isLoading}\n                >\n                  {mutation.isLoading ? \"Updating...\" : \"Update\"}\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* {mutation.isError && <div>Error updating data</div>}\n      {mutation.isSuccess && <div>Data updated successfully</div>} */}\n    </form>\n  );\n}\n\nfunction FileUpload({ photo, setPhoto, data }) {\n  const [show, setShow] = useState(false);\n\n  return (\n    <section\n      className=\"container mb-3\"\n      style={{ marginTop: \"24px\", padding: \"0px\" }}\n    >\n      {/* <label className='mb-2' style={{ color: '#475467', fontSize: '14px', fontWeight: '500' }}>App Logo</label> */}\n      <div\n        className=\"d-flex justify-content-center align-items-center flex-column\"\n        style={{\n          width: \"100%\",\n          minHeight: \"126px\",\n          padding: \"16px\",\n          background: \"#fff\",\n          borderRadius: \"4px\",\n          border: \"1px solid #D0D5DD\",\n        }}\n      >\n        {photo?.croppedImageBase64 ? (\n          <div className=\"text-center\">\n            <img\n              alt=\"uploaded-file\"\n              src={photo?.croppedImageBase64}\n              style={{ width: \"64px\", height: \"64px\", marginBottom: \"12px\" }}\n            />\n          </div>\n        ) : (\n          <button\n            type=\"button\"\n            onClick={() => setShow(true)}\n            className=\"d-flex justify-content-center align-items-center\"\n            style={{\n              width: \"40px\",\n              height: \"40px\",\n              border: \"1px solid #EAECF0\",\n              background: \"#fff\",\n              borderRadius: \"4px\",\n              marginBottom: \"16px\",\n            }}\n          >\n            {data.photo ? (\n              <div\n                style={{\n                  width: '64px',\n                  height: '64px',\n                  borderRadius: '50%',\n                  overflow: 'hidden',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                <img\n                  src={data.photo}\n                  className=\"w-100\"\n                  alt=\"Uploaded Photo\"\n                />\n              </div>\n            ) : (\n              <Upload />\n            )}\n\n\n\n          </button>\n        )}\n        <p className=\"mb-0\" style={{ color: \"#475467\", fontSize: \"14px\" }}>\n          <span\n            style={{ color: \"#1AB2FF\", fontWeight: \"600\", cursor: \"pointer\" }}\n            onClick={() => setShow(true)}\n          >\n            Click to upload\n          </span>\n        </p>\n        <span style={{ color: \"#475467\", fontSize: \"12px\" }}>\n          SVG, PNG, JPG or GIF (max. 800x400px)\n        </span>\n      </div>\n      <FileUploader show={show} setShow={setShow} setPhoto={setPhoto} shape=\"round\" />\n    </section>\n  );\n}\nexport default MyProfile;\n"],"names":["schema","yup","shape","first_name","required","last_name","email","phone","FileUpload","_ref","photo","setPhoto","data","show","setShow","useState","_jsxs","className","style","marginTop","padding","children","width","minHeight","background","borderRadius","border","croppedImageBase64","_jsx","alt","src","height","marginBottom","type","onClick","overflow","display","justifyContent","alignItems","Upload","color","fontSize","fontWeight","cursor","FileUploader","useQueryClient","activeTab","setActiveTab","isEditingGroup","setIsEditingGroup","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","isLoading","error","useQuery","queryKey","queryFn","fetchProfile","onSuccess","onError","console","mutation","useMutation","mutationFn","updateProfile","window","location","reload","position","top","left","zIndex","Spinner","animation","role","onSubmit","log","mutate","Sidebar","_Fragment","Link","to","handleEditGroup","PencilSquare","size","styles","placeholder","defaultValue","exclamationCircle","message","AvatarImg","Link45deg","Telephone","disabled"],"sourceRoot":""}