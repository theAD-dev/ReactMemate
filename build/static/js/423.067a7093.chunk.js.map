{"version":3,"file":"static/js/423.067a7093.chunk.js","mappings":"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","sources":["APIs/SettingsGeneral.js","components/layout/settings/generalinformation/GeneralInformation.js","webpack://memateapp/./src/components/layout/settings/generalinformation/general.module.scss?dbc8"],"sourcesContent":["import { nanoid } from \"nanoid\";\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\n/**\n * A generic fetch function to make API calls.\n * @param {string} endpoint - The API endpoint to call.\n * @param {object} options - The fetch options including method, headers, and body.\n * @returns {Promise<any>} - The JSON response from the API.\n */\nconst fetchAPI = async (endpoint, options = {}) => {\n  const { method = 'GET', headers = {}, body } = options;\n  const accessToken = localStorage.getItem(\"access_token\");\n\n  const defaultHeaders = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n    ...headers\n  };\n\n  const requestOptions = {\n    method,\n    headers: defaultHeaders,\n    body: JSON.stringify(body),\n    redirect: 'follow'\n  };\n\n  try {\n    const url = new URL(`${endpoint}`);\n    const response = await fetch(url, requestOptions);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    } \n    \n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    } else {\n      // Handle non-JSON responses\n      const text = await response.text();\n      return { message: 'Non-JSON response', body: text };\n    }\n    \n  } catch (error) {\n    console.error('Fetch API error:', error);\n    throw error;\n  }\n};\n\nexport const createProjectStatus = async (data) => {\n  console.log('data: ', data);\n  if(data.id) delete data.id;\n  if(data.isNew) delete data.isNew;\n  if(data.isChanged) delete data.isChanged;\n  if(data.value) delete data.value;\n  \n  const endpoint = `/settings/project-statuses/new/`;\n  const options = {\n    method: 'POST',\n    body: data\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n}\n\nexport const updateProjectStatusById = async (id, data) => {\n  const endpoint = `/settings/project-statuses/update/${id}/`;\n  const options = {\n    method: 'PUT',\n    body: data\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n}\n\nexport const deleteProjectStatusById = async (id) => {\n  const endpoint = `/settings/project-statuses/delete/${id}/`;\n  const options = {\n    method: 'DELETE',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n}\n\n\n\n\n\n\n\nexport const SettingsGeneralInformation = async () => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n\n  const requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/settings/organization/general/`, requestOptions);\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    throw error;\n  }\n};\n\nexport const updateGeneralInformation = async (data, photo) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n\n  const formData = new FormData();\n  Object.keys(data).forEach((key) => {\n    formData.append(key, data[key]);\n  });\n\n  if (photo?.croppedImageBlob) {\n    const photoHintId = nanoid(6);\n    formData.append('company_logo', photo?.croppedImageBlob, `${photoHintId}.jpg`);\n  }\n\n  const requestOptions = {\n    method: 'PUT',\n    headers: myHeaders,\n    body: formData,\n    redirect: 'follow'\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/settings/organization/general/`, requestOptions);\n    const result = await response.text();\n    console.log('result>>>>>>>>>>: ', result);\n    return result;\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    throw error;\n  }\n};\n\nexport const SettingsBankInformation = async () => {\n\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n\n  const requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/settings/organization/bank/`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    throw error;\n  }\n};\n\nexport const updateBankInformation = async (generalData) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n\n  const formData = new FormData();\n  Object.keys(generalData).forEach((key) => {\n    formData.append(key, generalData[key]);\n  });\n\n  const requestOptions = {\n    method: 'PUT',\n    headers: myHeaders,\n    body: formData,\n    redirect: 'follow'\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/settings/organization/bank/`, requestOptions);\n    const result = await response.text();\n    console.log('result: ', result);\n    return result;\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    throw error;\n  }\n};\n\nexport const ProjectStatusesList = async () => {\n\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n\n  const requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/settings/project-statuses/`, requestOptions);\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('project fetch error:', error);\n    throw error;\n  }\n};\n\n","import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport exclamationCircle from \"../../../../assets/images/icon/exclamation-circle.svg\";\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { SettingsGeneralInformation, updateGeneralInformation } from '../../../../APIs/SettingsGeneral';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Sidebar from '.././Sidebar';\nimport styles from \"./general.module.scss\";\nimport { PencilSquare, Telephone, Building, Link45deg, Upload } from \"react-bootstrap-icons\";\nimport AvatarImg from \"../../../../assets/images/img/Avatar.png\";\nimport FileUploader from '../../../../ui/file-uploader/file-uploader';\nimport { toast } from 'sonner';\nimport { Spinner } from 'react-bootstrap';\n\nconst schema = yup.object().shape({\n  legal_name: yup.string().required('Company Legal Name is required'),\n  trading_name: yup.string(),\n  abn: yup.string(),\n  main_email: yup.string().email('Invalid email').required('Main Company Email is required'),\n  main_phone: yup.string(),\n  address: yup.string(),\n  state: yup.string(),\n  postcode: yup.string(),\n  company_logo: yup.mixed().nullable(),\n\n});\n\nfunction GeneralInformation() {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState('generalinformation');\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [photo, setPhoto] = useState({});\n  const { register, handleSubmit, formState: { errors }, reset } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['generalInfo'],\n    queryFn: SettingsGeneralInformation,\n    onSuccess: (data) => {\n      reset(data);\n    },\n    onError: (error) => {\n      console.error('Error fetching data:', error);\n    },\n  });\n\n\n\n  const mutation = useMutation({\n    mutationFn: (data) => updateGeneralInformation(data, photo),\n    onSuccess: () => {\n      window.location.reload();\n      toast.success(`Company Information updated successfully`);\n    },\n  });\n\n  const onSubmit = (data) => {\n    mutation.mutate({ ...data });\n  };\n\n  if (isLoading || error) return <div style={{ position: 'fixed', top: '50%', left: '50%', background: 'white', width: '60px', height: '60px', borderRadius: '4px', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 10 }} className=\"shadow-lg\">\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>;\n\n\n  const handleEditGroup = () => {\n    setIsEditingGroup(true);\n\n  };\n\n\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n\n      <div className='settings-wrap'>\n        <div className=\"settings-wrapper\">\n          <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />\n          <div className=\"settings-content\">\n            <div className='headSticky'>\n              <h1>Company Information </h1>\n              <div className='contentMenuTab'>\n                <ul>\n                  <li className='menuActive'><Link to=\"/settings/generalinformation\">General Information</Link></li>\n                  <li><Link to=\"/settings/generalinformation/bank-details\">Bank Details </Link></li>\n                  <li><Link to=\"/settings/generalinformation/region-and-language\">Region & Language</Link></li>\n                </ul>\n              </div>\n            </div>\n            <div className={`content_wrap_main ${isEditingGroup ? 'isEditingwrap' : ''}`}>\n              <div className='content_wrapper'>\n                <div className=\"listwrapper\">\n                  <div className=\"topHeadStyle\">\n                    <div className=''>\n                      <h2>General Information</h2>\n                      {!isEditingGroup ? (\n                        <></>\n                      ) : (\n                        <p>Lorem Ipsum dolores</p>\n                      )}\n                    </div>\n\n                    {!isEditingGroup && (\n                      <Link to=\"#\" onClick={handleEditGroup}>Edit<PencilSquare color=\"#344054\" size={20} /></Link>\n                    )}\n                  </div>\n\n                  <ul>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>Company Legal Name</span>\n                        {!isEditingGroup ? (\n                          <strong>{data?.legal_name} </strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors?.legal_name ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"legal_name\")}\n                                placeholder='Enter company legal name'\n                                defaultValue={data?.legal_name}\n                              />\n                              {errors?.legal_name && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors?.legal_name && <p className=\"error-message\">{errors?.legal_name?.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p>Please provide the complete legal name of your company, as it will be displayed on outgoing documentation.</p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>Company Trading name</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.trading_name} </strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors.trading_name ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"trading_name\")}\n                                placeholder='Enter Trading Name'\n                                defaultValue={data.trading_name}\n                              />\n                              {errors.trading_name && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors.trading_name && <p className=\"error-message\">{errors.trading_name.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p>Please enter a trading name. This will be displayed when you communicate with contractors, clients, and suppliers.</p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>ABN</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.abn} </strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors.abn ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"abn\")}\n                                placeholder='Enter ABN'\n                                defaultValue={data.abn}\n                              />\n                              {errors.abn && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors.abn && <p className=\"error-message\">{errors.abn.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p>Please input Active Business Number</p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>Main Company Email</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.main_email} <Link45deg color=\"#158ECC\" size={20} /></strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors.main_email ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"main_email\")}\n                                placeholder='Enter Email'\n                                defaultValue={data.main_email}\n                              />\n                              {errors.main_email && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors.main_email && <p className=\"error-message\">{errors.main_email.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p>Insert emails which will be used to send all your automatic outgoing emails and notifications.</p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>Main Company Phone Number</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.main_phone} <Telephone color=\"#158ECC\" size={20} /></strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors.main_phone ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"main_phone\")}\n                                placeholder='Enter Phone Number'\n                                defaultValue={data.main_phone}\n                              />\n                              {errors.main_phone && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors.main_phone && <p className=\"error-message\">{errors.main_phone.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p>Insert emails which will be used to send all your automatic outgoing emails and notifications.</p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>Street Address</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.address}</strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors.address ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"address\")}\n                                placeholder='Enter Address'\n                                defaultValue={data.address}\n                              />\n                              {errors.address && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors.address && <p className=\"error-message\">{errors.address.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p></p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>State</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.state}</strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors.state ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"state\")}\n                                placeholder='Enter state'\n                                defaultValue={data.state}\n                              />\n                              {errors.state && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors.state && <p className=\"error-message\">{errors.state.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p></p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>Postcode</span>\n                        {!isEditingGroup ? (\n                          <strong>{data.postcode}</strong>\n                        ) : (\n                          <>\n                            <div className={`inputInfo ${errors.postcode ? 'error-border' : ''}`}>\n                              <input\n                                {...register(\"postcode\")}\n                                placeholder='Enter postcode'\n                                defaultValue={data.postcode}\n                              />\n                              {errors.postcode && <img className=\"ExclamationCircle\" src={exclamationCircle} alt=\"Exclamation Circle\" />}\n                            </div>\n                            {errors.postcode && <p className=\"error-message\">{errors.postcode.message}</p>}\n                          </>\n                        )}\n                      </div>\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n                        <div className={styles.editpara}>\n                          <p></p>\n                        </div>\n                      )}\n                    </li>\n                    <li className={`${isEditingGroup ? `${styles.editBorderWrap}` : `${styles.viewBorderWrap}`}`}>\n                      <div className={styles.editinfo}>\n                        <span>Company Logo for Documentation</span>\n                        {!isEditingGroup ? (\n                          <strong>\n                            {data.company_logo ? (\n                              <img src={data.company_logo} width={76} alt=\"Company Logo\" />\n                            ) : (\n                              <img src={AvatarImg} alt=\"DummyImg\" />\n                            )}\n                          </strong>\n                        ) : (\n\n                          <div className=\"upload-btn-wrapper\">\n                            <FileUpload photo={photo} data={data} setPhoto={setPhoto} />\n                          </div>\n                        )}\n                      </div>\n\n                      {!isEditingGroup ? (\n                        <>\n                        </>\n                      ) : (\n\n                        <div className={styles.editpara}>\n                          <div className='logo'>\n                            <h5>Company logo</h5>\n                            <p>Upload the logo for your unique quotes and invoices.</p>\n                          </div>\n\n                        </div>\n\n                      )}\n\n                    </li>\n\n                  </ul>\n                </div>\n\n              </div>\n            </div>\n            {isEditingGroup && (\n              <div className='updateButtonGeneral'>\n                <button className=\"cancel\" >Cancel</button>\n                <button type=\"submit\" className=\"save mr-3\" disabled={mutation.isLoading}>\n                  {mutation.isLoading ? 'Updating...' : 'Update'}\n                </button>\n\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n\n      {/* \n        {mutation.isError && <div>Error updating data</div>}\n        {mutation.isSuccess && <div>Data updated successfully</div>} */}\n\n    </form>\n  );\n}\n\n\n\nfunction FileUpload({ photo, setPhoto, data }) {\n  const [show, setShow] = useState(false);\n\n  return (\n    <section className=\"container mb-3\" style={{ marginTop: '24px', padding: '0px' }}>\n      {/* <label className='mb-2' style={{ color: '#475467', fontSize: '14px', fontWeight: '500' }}>App Logo</label> */}\n      <div className='d-flex justify-content-center align-items-center flex-column' style={{ width: '100%', minHeight: '126px', padding: '16px', background: '#fff', borderRadius: '4px', border: '1px solid #D0D5DD' }}>\n        {\n          photo?.croppedImageBase64 ? (\n            <div className='text-center'>\n              <img\n                alt='uploaded-file'\n                src={photo?.croppedImageBase64}\n                style={{ width: '64px', height: '64px', marginBottom: '12px' }}\n              />\n            </div>\n          ) : (\n            <button type='button' onClick={() => setShow(true)} className='d-flex justify-content-center align-items-center' style={{ width: '40px', height: '40px', padding: '2px', border: '1px solid #EAECF0', background: '#fff', borderRadius: '4px', marginBottom: '16px' }}>\n              {data?.company_logo ? (\n                <div\n                  style={{\n                    width: '64px',\n                    height: '64px',\n                    borderRadius: '50%',\n                    overflow: 'hidden',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <img\n                    src={data?.company_logo}\n                    style={{ width: '100%' }}\n                    alt=\"Uploaded Photo\"\n                  />\n                </div>\n              ) : (\n                <Upload />\n              )}\n            </button>\n          )\n        }\n        <p className='mb-0' style={{ color: '#475467', fontSize: '14px' }}><span style={{ color: '#1AB2FF', fontWeight: '600', cursor: 'pointer' }} onClick={() => setShow(true)}>Click to upload</span></p>\n        <span style={{ color: '#475467', fontSize: '12px' }}>SVG, PNG, JPG or GIF (max. 800x400px)</span>\n      </div>\n      <FileUploader show={show} setShow={setShow} setPhoto={setPhoto} />\n    </section>\n  );\n}\nexport default GeneralInformation;\n","// extracted by mini-css-extract-plugin\nexport default {\"activelist\":\"general_activelist__FWpML\",\"viewBorderWrap\":\"general_viewBorderWrap__h1m3m\",\"editBorderWrap\":\"general_editBorderWrap__p-Bng\",\"editinfo\":\"general_editinfo__FLHp1\",\"editpara\":\"general_editpara__Db271\",\"listwrapp\":\"general_listwrapp__S9ISd\"};"],"names":["API_BASE_URL","process","fetchAPI","async","endpoint","options","arguments","length","undefined","method","headers","body","requestOptions","localStorage","getItem","JSON","stringify","redirect","url","URL","response","fetch","ok","Error","status","contentType","get","includes","json","message","text","error","console","createProjectStatus","log","data","id","isNew","isChanged","value","toString","updateProjectStatusById","deleteProjectStatusById","SettingsGeneralInformation","myHeaders","Headers","accessToken","append","updateGeneralInformation","photo","formData","FormData","Object","keys","forEach","key","croppedImageBlob","photoHintId","nanoid","result","SettingsBankInformation","updateBankInformation","generalData","ProjectStatusesList","schema","yup","shape","legal_name","required","trading_name","abn","main_email","email","main_phone","address","state","postcode","company_logo","nullable","FileUpload","_ref","setPhoto","show","setShow","useState","_jsxs","className","style","marginTop","padding","children","width","minHeight","background","borderRadius","border","croppedImageBase64","_jsx","alt","src","height","marginBottom","type","onClick","overflow","display","justifyContent","alignItems","Upload","color","fontSize","fontWeight","cursor","FileUploader","_errors$legal_name","useNavigate","useQueryClient","activeTab","setActiveTab","isEditingGroup","setIsEditingGroup","register","handleSubmit","formState","errors","reset","useForm","resolver","yupResolver","isLoading","useQuery","queryKey","queryFn","onSuccess","onError","mutation","useMutation","mutationFn","window","location","reload","toast","success","position","top","left","zIndex","Spinner","animation","role","onSubmit","mutate","Sidebar","Link","to","_Fragment","handleEditGroup","PencilSquare","size","styles","editBorderWrap","viewBorderWrap","editinfo","placeholder","defaultValue","exclamationCircle","editpara","Link45deg","Telephone","AvatarImg","disabled"],"sourceRoot":""}