{"version":3,"file":"static/js/2874.d5f40e23.chunk.js","mappings":"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","sources":["APIs/ClientsApi.js","APIs/base-api.js","components/layout/settings/generalinformation/RegionLanguage.js","../node_modules/nanoid/index.browser.js","../node_modules/nanoid/url-alphabet/index.js"],"sourcesContent":["import { fetchAPI } from \"./base-api\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\nexport const createNewIndividualClient = async (data) => {\n  const endpoint = '/clients/individual/new/';\n  const options = {\n    method: 'POST',\n    body: data\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const createNewBusinessClient = async (data) => {\n  const endpoint = '/clients/business/new/';\n  const options = {\n    method: 'POST',\n    body: data\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const restoreClient = async (id) => {\n  const endpoint = `/clients/restore/${id}/`;\n  const options = {\n    method: 'POST'\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const getClientById = async (id) => {\n  const endpoint = `/clients/${id}/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const getClientCategories = async () => {\n  const endpoint = `/references/clients/categories/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const getClientIndustries = async () => {\n  const endpoint = `/references/clients/industries/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const getCountries = async () => {\n  const endpoint = `/references/countries/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options, false);\n};\n\nexport const getStates = async (country) => {\n  const endpoint = `/references/states/${country}/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options, false);\n};\n\nexport const getCities = async (state) => {\n  const endpoint = `/references/cities/${state}/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options, false);\n};\n\nexport const getProjectManager = async () => {\n  const endpoint = `/references/desktop-users/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const clientEditApi = async (id) => {\n  const endpoint = `/clients/${id}/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const getListOfClients = async (page, limit, name = \"\", order = \"\", isShowDeleted) => {\n  const offset = (page - 1) * limit;\n  const endpoint = `/clients/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  url.searchParams.append(\"limit\", limit);\n  url.searchParams.append(\"offset\", offset);\n  if (name) url.searchParams.append(\"name\", name);\n  if (order) url.searchParams.append(\"ordering\", order);\n  if (isShowDeleted) url.searchParams.append('deleted', 1);\n\n  return fetchAPI(url.toString(), options);\n};\n\nexport const clientOrderHistory = async (id, page, limit, search = \"\", order = \"\",) => {\n  const offset = (page - 1) * limit;\n  const endpoint = `/clients/${id}/orders/`;\n  const options = {\n    method: 'GET',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  url.searchParams.append(\"limit\", limit);\n  url.searchParams.append(\"offset\", offset);\n  if (search) url.searchParams.append(\"number\", search);\n  if (order) url.searchParams.append(\"ordering\", order);\n  \n  return fetchAPI(url.toString(), options);\n};\n\nexport const markeMainAddress = async (id) => {\n  const endpoint = `/clients/address/${id}/main`;\n  const options = {\n    method: 'PUT',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const markeMainContact = async (id) => {\n  const endpoint = `/clients/contact-persons/${id}/main`;\n  const options = {\n    method: 'PUT',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const deleteClient = async (id) => {\n  const endpoint = `/clients/delete/${id}/`;\n  const options = {\n    method: 'DELETE',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const deleteContactPerson = async (id) => {\n  const endpoint = `/clients/contact-persons/${id}/delete/`;\n  const options = {\n    method: 'DELETE',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const deleteAddress = async (id) => {\n  const endpoint = `/clients/address/${id}/delete/`;\n  const options = {\n    method: 'DELETE',\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const fetchClients = async (limit, offset) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", `application/json`);\n\n  const requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  try {\n    // Append the limit and offset parameters to the URL query string\n    const url = new URL(`${API_BASE_URL}/clients`);\n    url.searchParams.append(\"limit\", limit);\n    url.searchParams.append(\"offset\", offset);\n\n    const response = await fetch(url, requestOptions);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Clients fetch error:', error);\n    throw error;\n  }\n};\n\nexport const bringBack = async (id) => {\n  const endpoint = `/projects/back/`;\n  const options = {\n    method: 'PUT',\n    body: { unique_id: id }\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n","/**\n * A generic fetch function to make API calls.\n * @param {string} endpoint - The API endpoint to call.\n * @param {object} options - The fetch options including method, headers, and body.\n * @returns {Promise<any>} - The JSON response from the API.\n */\nexport const fetchAPI = async (endpoint, options = {}, isRequiredLoggedin = true) => {\n    const { method = 'GET', headers = {}, body } = options;\n    const accessToken = localStorage.getItem(\"access_token\");\n    const isFormData = body instanceof FormData;\n\n    const defaultHeaders = {\n        'Content-Type': isFormData ? 'multipart/form-data' : 'application/json',\n        ...headers\n    };\n    \n    if (isRequiredLoggedin) {\n        defaultHeaders['Authorization'] = `Bearer ${accessToken}`;\n    }\n\n    const requestOptions = {\n        method,\n        headers: defaultHeaders,\n        body: isFormData ? body : JSON.stringify(body),\n        redirect: 'follow'\n    };\n\n    try {\n        const url = new URL(`${endpoint}`);\n        const response = await fetch(url, requestOptions);\n        if (!response.ok) {\n            if (response.status === 404) throw new Error('Not found');\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const contentType = response.headers.get('Content-Type');\n        if (contentType && contentType.includes('application/json')) {\n            return await response.json();\n        } else {\n            const text = await response.text();\n            return { message: 'Non-JSON response', body: text };\n        }\n    } catch (error) {\n        console.error('Fetch API error:', error);\n        throw error;\n    }\n};\n\n","import React, { useState, useEffect } from \"react\";\nimport { PencilSquare } from \"react-bootstrap-icons\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { ProgressSpinner } from \"primereact/progressspinner\";\nimport { toast } from \"sonner\";\nimport styles from \"./general.module.scss\";\nimport currency from './lib/currency.json';\nimport timezones from './lib/timezones.json';\nimport Sidebar from \".././Sidebar\";\nimport { getCountries } from \"../../../../APIs/ClientsApi\";\nimport { getReginalAndLanguage, updateReginalAndLanguage } from \"../../../../APIs/SettingsGeneral\";\nimport { useTrialHeight } from \"../../../../app/providers/trial-height-provider\";\n\n\n\nconst RegionLanguage = () => {\n  const { trialHeight } = useTrialHeight();\n  const [isEditing, setIsEditing] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"generalinformation\");\n  const [timezonesOptions, setTimezonesOptions] = useState([]);\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n\n  const [country, setCountry] = useState(null);\n  const [timezone, setTimezone] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState(null);\n  const countriesQuery = useQuery({ queryKey: ['countries'], queryFn: getCountries, enabled: true });\n  const reginalAndLanguageQuery = useQuery({ queryKey: ['getReginalAndLanguage'], queryFn: getReginalAndLanguage, enabled: true, staleTime: 1000 });\n\n  const mutation = useMutation({\n    mutationFn: (data) => updateReginalAndLanguage(data),\n    onSuccess: () => {\n      reginalAndLanguageQuery.refetch();\n      toast.success(`Reginal and language updated successfully`);\n    },\n  });\n\n  const handleUpdate = async () => {\n    await mutation.mutateAsync({\n      country: country,\n      timezone,\n      currency: selectedCurrency\n    });\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n  };\n\n  useEffect(() => {\n    if (country) {\n      const findData = timezones.find((timezone) => timezone.name === country);\n      setTimezonesOptions(Object.keys(findData?.timezones || {}));\n\n      const findCurrency = currency.find((data) => data.name === country);\n      setCurrencyOptions([findCurrency]);\n      setSelectedCurrency(`${findCurrency?.currency?.code}`);\n    }\n  }, [country]);\n\n  useEffect(() => {\n    if (reginalAndLanguageQuery?.data) {\n      setCountry(reginalAndLanguageQuery?.data?.country);\n      setTimezone(reginalAndLanguageQuery?.data?.timezone);\n    }\n  }, [reginalAndLanguageQuery?.data]);\n\n\n\n  return (\n    <div className=\"settings-wrap\">\n      <Helmet>\n        <title>MeMate - Region & Language</title>\n      </Helmet>\n      <div className=\"settings-wrapper\">\n        <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />\n        <div className=\"settings-content\">\n          <div className=\"headSticky\">\n            <h1>Company Information</h1>\n            <div className=\"contentMenuTab\">\n              <ul>\n                <li>\n                  <Link to=\"/settings/generalinformation\">\n                    General Information\n                  </Link>\n                </li>\n                <li>\n                  <Link to=\"/settings/generalinformation/bank-details\">\n                    Bank Details\n                  </Link>\n                </li>\n                <li className=\"menuActive\">\n                  <Link to=\"/settings/generalinformation/region-and-language\">\n                    Region & Language\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div\n            className={`content_wrap_main ${isEditing ? \"isEditingwrap\" : \"\"}`} style={{ height: `calc(100vh - 330px - ${trialHeight}px)` }}\n          >\n            <div className=\"content_wrapper\">\n              <div className={`listwrapper ${styles.listwrapp}`}>\n                <div className=\"topHeadStyle\">\n                  <div className=\"\">\n                    <h2>Region & Language</h2>\n                    {isEditing && <p>Select your Country, Timezone, and Currency to ensure accurate localization and a seamless experience.</p>}\n                  </div>\n                  {!isEditing && (\n                    <Link to=\"#\" onClick={() => setIsEditing(true)}>\n                      Edit\n                      <PencilSquare color=\"#667085\" size={20} />\n                    </Link>\n                  )}\n                </div>\n                <ul>\n                  <li>\n                    <span>Country</span>\n                    {!isEditing ? (\n                      <strong>{reginalAndLanguageQuery?.data?.country === 1 && 'Australia'}</strong>\n                    ) : (\n                      <Dropdown\n                        value={country}\n                        options={(countriesQuery && countriesQuery.data?.map((country) => ({\n                          value: country.id,\n                          label: country.name\n                        }))) || []}\n                        placeholder=\"Select country\"\n                        className='w-100 rounded'\n                        onChange={(e) => setCountry(e.value)}\n                        filter\n                      />\n                    )}\n                  </li>\n                  <li>\n                    <span>Timezone</span>\n                    {!isEditing ? (\n                      <strong>{reginalAndLanguageQuery?.data?.timezone}</strong>\n                    ) : (\n                      <Dropdown\n                        value={timezone}\n                        options={timezonesOptions.map((option) => ({ value: option, label: option }))}\n                        placeholder=\"Select timezone\"\n                        className='w-100'\n                        onChange={(e) => setTimezone(e.value)}\n                      />\n                    )}\n                  </li>\n                  <li>\n                    <span>Currency</span>\n                    {!isEditing ? (\n                      <strong>{reginalAndLanguageQuery?.data?.currency}</strong>\n                    ) : (\n                      <span>{currencyOptions[0]?.currency?.code}</span>\n                    )}\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          {isEditing && (\n            <div className=\"updateButtonGeneral\">\n              <button className=\"cancel\" onClick={handleCancel}>\n                Cancel\n              </button>\n              <button className=\"save\" disabled={mutation?.isPending} onClick={handleUpdate}>\n                Save {\" \"}\n                {mutation?.isPending && <ProgressSpinner style={{ width: '20px', height: '20px' }} />}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegionLanguage;\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n"],"names":["API_BASE_URL","process","restoreClient","async","url","URL","id","fetchAPI","toString","method","getClientById","getClientCategories","getClientIndustries","getCountries","getStates","country","getCities","state","getProjectManager","getListOfClients","page","limit","name","arguments","length","undefined","order","isShowDeleted","offset","searchParams","append","clientOrderHistory","search","markeMainAddress","markeMainContact","deleteClient","deleteContactPerson","deleteAddress","bringBack","options","body","unique_id","endpoint","isRequiredLoggedin","headers","accessToken","localStorage","getItem","isFormData","FormData","defaultHeaders","requestOptions","JSON","stringify","redirect","response","fetch","ok","status","Error","contentType","get","includes","json","message","text","error","console","RegionLanguage","_reginalAndLanguageQu3","_countriesQuery$data","_reginalAndLanguageQu4","_reginalAndLanguageQu5","_currencyOptions$","_currencyOptions$$cur","trialHeight","useTrialHeight","isEditing","setIsEditing","useState","activeTab","setActiveTab","timezonesOptions","setTimezonesOptions","currencyOptions","setCurrencyOptions","setCountry","timezone","setTimezone","selectedCurrency","setSelectedCurrency","countriesQuery","useQuery","queryKey","queryFn","enabled","reginalAndLanguageQuery","getReginalAndLanguage","staleTime","mutation","useMutation","mutationFn","data","updateReginalAndLanguage","onSuccess","refetch","toast","success","useEffect","_findCurrency$currenc","findData","timezones","find","Object","keys","findCurrency","currency","code","_reginalAndLanguageQu","_reginalAndLanguageQu2","_jsxs","className","children","_jsx","Helmet","Sidebar","Link","to","style","height","styles","listwrapp","onClick","PencilSquare","color","size","Dropdown","value","map","label","placeholder","onChange","e","filter","option","handleCancel","disabled","isPending","mutateAsync","ProgressSpinner","width","nanoid","bytes","crypto","getRandomValues","Uint8Array"],"sourceRoot":""}