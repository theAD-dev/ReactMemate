{"version":3,"file":"static/js/8777.dd848d46.chunk.js","mappings":"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","sources":["entities/setting/accounting/department-turnover-plan/api/department-turnover-plan.api.jsx","entities/setting/accounting/department-turnover-plan/models/update-accounting-target.mutation.jsx","APIs/base-api.js","components/layout/settings/accounting/account-code.js","entities/setting/accounting/department-turnover-plan/models/get-accounting-list.query.jsx","APIs/integrations-api.js"],"sourcesContent":["import { fetchInstance } from \"../../../../../shared/lib/fetch-api-instance\";\n\nexport const getAccountingList = async () => {\n    const path = `/settings/accounting/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const updateAccountingTarget = async (id, data) => {\n    const path = `/settings/accounting/${id}/`;\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getIndustryServiceList = async () => {\n    const path = `/suppliers/industries/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const updateIndustryServiceCode = async (id, data) => {\n    const path = `/suppliers/industries/${id}/`;\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getXeroCodesList = async () => {\n    const path = `/references/xero-codes/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getAccountCodeList = async () => {\n    const path = `/account_codes/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const syncCode = async () => {\n    const path = `/account_codes/sync/`;\n    const options = {\n        method: 'PUT',\n    };\n    return fetchInstance(path, options);\n};\n","import { useMutation } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport { syncCode, updateAccountingTarget, updateIndustryServiceCode } from \"../api/department-turnover-plan.api\";\n\nexport const useAccountingTargetUpdateMutations = () => {\n    return useMutation({\n        mutationFn: ({ id, data }) => updateAccountingTarget(id, data),\n        onSuccess: () => {\n            toast.success(`Accounting target updated successfully`);\n        },\n        onError: (error) => {\n            console.error('Error updating accounting target:', error);\n            toast.error('Failed to update accounting target. Please try again.');\n        }\n    });\n};\n\nexport const useIndustryServiceUpdateMutations = () => {\n    return useMutation({\n        mutationFn: ({ id, data }) => updateIndustryServiceCode(id, data),\n        onSuccess: () => {\n            toast.success(`The supplier category code have been updated successfully.`);\n        },\n        onError: (error) => {\n            console.error('Error updating supplier category code:', error);\n            toast.error('Failed to update supplier category code. Please try again.');\n        }\n    });\n};\n\nexport const useAccountCodeSyncMutations = () => {\n    return useMutation({\n        mutationFn: () => syncCode(),\n        onSuccess: () => {\n            toast.success(`Account codes synced successfully`);\n        },\n        onError: (error) => {\n            console.error('Error syncing account codes:', error);\n            toast.error('Failed to sync account codes. Please try again.');\n        }\n    });\n};\n","/**\n * A generic fetch function to make API calls.\n * @param {string} endpoint - The API endpoint to call.\n * @param {object} options - The fetch options including method, headers, and body.\n * @returns {Promise<any>} - The JSON response from the API.\n */\nexport const fetchAPI = async (endpoint, options = {}, isRequiredLoggedin = true) => {\n    const { method = 'GET', headers = {}, body } = options;\n    const accessToken = localStorage.getItem(\"access_token\");\n    const isFormData = body instanceof FormData;\n\n    const defaultHeaders = {\n        'Content-Type': isFormData ? 'multipart/form-data' : 'application/json',\n        ...headers\n    };\n\n    if (isRequiredLoggedin) {\n        defaultHeaders['Authorization'] = `Bearer ${accessToken}`;\n    }\n\n    const requestOptions = {\n        method,\n        headers: defaultHeaders,\n        body: isFormData ? body : JSON.stringify(body),\n        redirect: 'follow'\n    };\n\n    try {\n        const url = new URL(endpoint);\n        const response = await fetch(url, requestOptions);\n        const contentType = response.headers.get('Content-Type');\n\n        if (!response.ok) {\n            let errorData = null;\n\n            if (contentType && contentType.includes('application/json')) {\n                errorData = await response.json();\n            } else {\n                errorData = await response.text();\n            }\n\n            if (response.status === 401) {\n                localStorage.clear();\n                sessionStorage.clear();\n                window.location.replace(\"/login\");\n            }\n\n            const error = new Error(errorData?.message || `HTTP error! Status: ${response.status}`);\n            error.status = response.status;\n            error.data = errorData;\n            throw error;\n        }\n\n        if (contentType && contentType.includes('application/json')) {\n            return await response.json();\n        } else {\n            const text = await response.text();\n            return { message: 'Non-JSON response', body: text };\n        }\n    } catch (error) {\n        console.error('Fetch API error:', error);\n        // Rethrow to propagate to useMutation\n        throw error;\n    }\n};\n","import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from 'primereact/button';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport { getXeroIntegrations } from '../../../../APIs/integrations-api';\nimport { useTrialHeight } from '../../../../app/providers/trial-height-provider';\nimport { useAccountCodeGetQuery } from '../../../../entities/setting/accounting/department-turnover-plan/models/get-accounting-list.query';\nimport { useAccountCodeSyncMutations } from '../../../../entities/setting/accounting/department-turnover-plan/models/update-accounting-target.mutation';\n\nconst AccountCode = () => {\n    const { trialHeight } = useTrialHeight();\n    const [accountCodes, setAccountCodes] = useState([]);\n    const accountCodeQuery = useAccountCodeGetQuery();\n    const { mutate: syncCode, isPending } = useAccountCodeSyncMutations();\n    const xeroIntegrationsQuery = useQuery({ queryKey: ['getXeroIntegrations'], queryFn: getXeroIntegrations, retry: 1 });\n\n    useEffect(() => {\n        if (accountCodeQuery?.data) {\n            const codes = accountCodeQuery?.data.flatMap(code =>\n                code.codes.map(item => ({\n                    ...item,\n                    category: code.category\n                }))\n            );\n            setAccountCodes(codes);\n        }\n    }, [accountCodeQuery?.data]);\n\n    const codeSync = () => {\n        syncCode();\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>MeMate - Expenses Account</title>\n            </Helmet>\n            <div className='headSticky'>\n                <h1>Accounting</h1>\n                <div className='contentMenuTab'>\n                    <ul>\n                        <li><Link to=\"/settings/accounting/department-turnover-plan\">Department Turnover Plan</Link></li>\n                        <li><Link to=\"/settings/accounting/industry-service\">Supplier Categories</Link></li>\n                        <li className='menuActive'><Link to=\"/settings/accounting/account-code\">Account Codes</Link></li>\n                    </ul>\n                </div>\n            </div>\n            <div className={`content_wrap_main w-100`} style={{ paddingBottom: `${trialHeight}px` }}>\n                <div className='content_wrapper w-100'>\n                    <div className=\"listwrapper\">\n                        <div className=\"topHeadStyle pb-3\">\n                            <h2>Account Codes</h2>\n                            {xeroIntegrationsQuery?.data?.connected && <Button className='outline-button' onClick={codeSync} style={{ fontSize: '14px' }} disabled={isPending} loading={isPending}>Code Sync</Button>}\n                        </div>\n\n                        <DataTable className='w-100' showGridlines rowGroupMode=\"rowspan\" groupRowsBy=\"category\" value={accountCodes || []} tableStyle={{ minWidth: '100%', border: '1px solid #f2f2f2' }}>\n                            <Column header=\"#\" body={(data, options) => options.rowIndex + 1}></Column>\n                            <Column field=\"category\" header=\"Category\"></Column>\n                            <Column field=\"code\" header=\"Codes\"></Column>\n                            <Column field=\"name\" header=\"Account Name\"></Column>\n                            <Column field='description' header=\"Description\"></Column>\n                        </DataTable>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default AccountCode;\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getAccountCodeList, getAccountingList, getIndustryServiceList, getXeroCodesList } from \"../api/department-turnover-plan.api\";\n\nexport const useAccountingGetQuery = () => {\n    return useQuery({\n        queryKey: ['accounting-list'],\n        queryFn: getAccountingList\n    });\n};\n\nexport const useIndustryServiceGetQuery = () => {\n    return useQuery({\n        queryKey: ['industry-service-list'],\n        queryFn: getIndustryServiceList\n    });\n};\n\nexport const useXeroCodesGetQuery = () => {\n    return useQuery({\n        queryKey: ['xero-codes-list'],\n        queryFn: getXeroCodesList\n    });\n};\n\nexport const useAccountCodeGetQuery = () => {\n    return useQuery({\n        queryKey: ['account-code-list'],\n        queryFn: getAccountCodeList\n    });\n};\n","import { fetchAPI } from \"./base-api\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\nexport const getStripeIntegrations = async () => {\n    const endpoint = `/settings/integrations/stripe/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const stripeIntegrationsSet = async (data) => {\n    const endpoint = '/settings/integrations/stripe/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const stripeIntegrationsDelete = async (data) => {\n    const endpoint = '/settings/integrations/stripe/disconnect/';\n    const options = {\n        method: 'DELETE',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getGoogleReviewIntegrations = async () => {\n    const endpoint = `/settings/integrations/google/review/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const googleReviewIntegrationsSet = async (data) => {\n    const endpoint = '/settings/integrations/google/review/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getTwilioIntegrations = async () => {\n    const endpoint = `/settings/integrations/twilio/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const twilioIntegrationsSet = async (data) => {\n    const endpoint = '/settings/integrations/twilio/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getEmailIntegrations = async () => {\n    const endpoint = `/references/outgoing-email/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const emailIntegrationsSet = async (data) => {\n    const endpoint = '/references/outgoing-email/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getXeroIntegrations = async () => {\n    const endpoint = '/xero/status/';\n    const options = {\n        method: 'GET'\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const disconnectXeroIntegrations = async () => {\n    const endpoint = '/xero/disconnect/';\n    const options = {\n        method: 'POST'\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};"],"names":["getAccountingList","async","fetchInstance","method","updateAccountingTarget","id","data","path","options","body","getIndustryServiceList","updateIndustryServiceCode","getXeroCodesList","getAccountCodeList","syncCode","useAccountingTargetUpdateMutations","useMutation","mutationFn","_ref","onSuccess","toast","success","onError","error","console","useIndustryServiceUpdateMutations","_ref2","useAccountCodeSyncMutations","fetchAPI","endpoint","arguments","length","undefined","isRequiredLoggedin","headers","accessToken","localStorage","getItem","isFormData","FormData","defaultHeaders","requestOptions","JSON","stringify","redirect","url","URL","response","fetch","contentType","get","ok","_errorData","errorData","includes","json","text","status","clear","sessionStorage","window","location","replace","Error","message","AccountCode","_xeroIntegrationsQuer","trialHeight","useTrialHeight","accountCodes","setAccountCodes","useState","accountCodeQuery","useAccountCodeGetQuery","mutate","isPending","xeroIntegrationsQuery","useQuery","queryKey","queryFn","getXeroIntegrations","retry","useEffect","codes","flatMap","code","map","item","category","_jsxs","_Fragment","children","_jsx","Helmet","className","Link","to","style","paddingBottom","connected","Button","onClick","codeSync","fontSize","disabled","loading","DataTable","showGridlines","rowGroupMode","groupRowsBy","value","tableStyle","minWidth","border","Column","header","rowIndex","field","useAccountingGetQuery","useIndustryServiceGetQuery","useXeroCodesGetQuery","API_BASE_URL","process","getStripeIntegrations","toString","stripeIntegrationsSet","stripeIntegrationsDelete","getGoogleReviewIntegrations","googleReviewIntegrationsSet","getTwilioIntegrations","twilioIntegrationsSet","getEmailIntegrations","emailIntegrationsSet","disconnectXeroIntegrations"],"sourceRoot":""}