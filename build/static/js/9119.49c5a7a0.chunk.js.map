{"version":3,"file":"static/js/9119.49c5a7a0.chunk.js","mappings":"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","sources":["components/layout/onboarding/Regionalsettings.js","APIs/base-api.js","APIs/OnboardingApi.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { Dropdown } from 'primereact/dropdown';\nimport timezones from './timezones.json';\nimport { OnboardingCreateOrganisation } from \"../../../APIs/OnboardingApi\";\nimport arrowRight from \"../../../assets/images/icon/arrow.svg\";\nimport RegionalSettings from \"../../../assets/images/img/emailSlider03.jpg\";\nimport LoinLogo from \"../../../assets/images/logo.svg\";\n\nconst Regionalsettings = () => {\n  const navigate = useNavigate();\n  const { uuid } = useParams();\n  const email = new URLSearchParams(useLocation().search).get(\"email\");\n  const company_name = new URLSearchParams(useLocation().search).get(\"company_name\");\n  const [timezonesOptions, setTimezonesOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const [country, setCountry] = useState(\"\");\n  const [timezone, setTimezone] = useState(\"\");\n\n\n  useEffect(() => {\n    if (!company_name) {\n      navigate(`/company-name/${uuid}?email=${email}`);\n    }\n  }, [company_name, email, uuid]);\n\n  useEffect(() => {\n    if (country) {\n      const findData = timezones.find((timezone) => timezone.name === country);\n      setTimezonesOptions(Object.keys(findData?.timezones || {}));\n    }\n  }, [country]);\n\n  const handleNext = async () => {\n    setError(\"\");\n    if (!country || !timezone) {\n      setError(\"Please select both country and timezone.\");\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const data = { name: company_name, country, timezone };\n      await OnboardingCreateOrganisation(uuid, data);\n      navigate(`/discover-memate/${uuid}`);\n    } catch (error) {\n      setError(error.message || \"Failed to proceed. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>MeMate - Onboarding - Regional Settings</title>\n      </Helmet>\n      <div className='requestDemoWrap'>\n        <div className=\"logohead\">\n          <img src={LoinLogo} alt=\"Loin Logo\" />\n        </div>\n        <div className=\"copywrite\">Â© Memate {new Date().getFullYear()}</div>\n        <div className='OnboardingStep1'>\n          <form>\n            <div className=\"loginPage\">\n              <div className=\"boxinfo\">\n                <div className=\"boxLogin\">\n                  <h2>\n                    Customize Your<br></br> Regional <span>Settings</span>\n                  </h2>\n                  <div className=\"step-progress\">\n                    <div className=\"step\"></div>\n                    <div className=\"step\"></div>\n                    <div className=\"step\"></div>\n                    <div className=\"step active\"></div>\n                    <div className=\"step\"></div>\n                  </div>\n                  <div className=\"formgroup timezoneWrapGroup\">\n                    <label>Country<span style={{ color: \"#f04438\" }}>*</span></label>\n                    <Dropdown\n                      value={country}\n                      options={timezones.map((timezone) => ({ value: timezone.name, label: timezone.name }))}\n                      placeholder=\"Select country\"\n                      className='w-100 rounded'\n                      onChange={(e) => setCountry(e.value)}\n                      filter\n                    />\n                  </div>\n                  <div className=\"formgroup removeBorder1\">\n                    <label>Timezone<span style={{ color: \"#f04438\" }}>*</span></label>\n                    <Dropdown\n                      value={timezone}\n                      options={timezonesOptions.map((option) => ({ value: option, label: option }))}\n                      placeholder=\"Select timezone\"\n                      className='w-100'\n                      onChange={(e) => setTimezone(e.value)}\n                    />\n                  </div>\n                  {error && <p className=\"error-message\">{error}</p>}\n                  <button\n                    type='button'\n                    className=\"fillbtn flexcenterbox\"\n                    onClick={handleNext}\n                    disabled={loading}\n                  >\n                    {loading ? \"Processing...\" : \"Next Step\"}\n                    {!loading && <img src={arrowRight} alt=\"Arrow Right\" />}\n                  </button>\n                </div>\n              </div>\n              <div className=\"sliderRight SinglBgRight\" style={{\n                backgroundImage: `url(${RegionalSettings})`,\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n              }}>\n                <p>Helping Australian businesses with digital solutions.</p>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Regionalsettings;\n","/**\n * A generic fetch function to make API calls.\n * @param {string} endpoint - The API endpoint to call.\n * @param {object} options - The fetch options including method, headers, and body.\n * @returns {Promise<any>} - The JSON response from the API.\n */\nexport const fetchAPI = async (endpoint, options = {}, isRequiredLoggedin = true) => {\n    const { method = 'GET', headers = {}, body } = options;\n    const accessToken = localStorage.getItem(\"access_token\");\n    const isFormData = body instanceof FormData;\n\n    const defaultHeaders = {\n        'Content-Type': isFormData ? 'multipart/form-data' : 'application/json',\n        ...headers\n    };\n    \n    if (isRequiredLoggedin) {\n        defaultHeaders['Authorization'] = `Bearer ${accessToken}`;\n    }\n\n    const requestOptions = {\n        method,\n        headers: defaultHeaders,\n        body: isFormData ? body : JSON.stringify(body),\n        redirect: 'follow'\n    };\n\n    try {\n        const url = new URL(`${endpoint}`);\n        const response = await fetch(url, requestOptions);\n        if (!response.ok) {\n            if (response.status === 401) {\n                window.localStorage.clear();\n                window.sessionStorage.clear();\n                window.location.replace(\"/login\");\n            }\n            \n            if (response.status === 404) throw new Error('Not found');\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const contentType = response.headers.get('Content-Type');\n        if (contentType && contentType.includes('application/json')) {\n            return await response.json();\n        } else {\n            const text = await response.text();\n            return { message: 'Non-JSON response', body: text };\n        }\n    } catch (error) {\n        console.error('Fetch API error:', error);\n        throw error;\n    }\n};\n\n","import { fetchAPI } from \"./base-api\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\n// Onboarding API endpoints\nexport const OnboardingCreateApi = async (data) => {\n  const endpoint = `/onboarding/create/user/`;\n  const options = {\n    method: \"POST\",\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return fetchAPI(`${API_BASE_URL}${endpoint}`, options, false);\n};\n\nexport const onboardingNextStep = async (uuid) => {\n  const endpoint = `/onboarding/next-step/${uuid}/`;\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return fetchAPI(`${API_BASE_URL}${endpoint}`, options, false);\n};\n\nexport const OnboardingCode = async (otpCode, uuid) => {\n  const endpoint = `/onboarding/verify/user/${uuid}/`;\n  const options = {\n    method: \"PUT\",\n    body: { code: otpCode },\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return fetchAPI(`${API_BASE_URL}${endpoint}`, options, false);\n};\n\nexport const OnboardingCreateOrganisation = async (uuid, data) => {\n  const endpoint = `/onboarding/create/organization/${uuid}/`;\n  const options = {\n    method: \"POST\",\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return fetchAPI(`${API_BASE_URL}${endpoint}`, options, false);\n};\n\nexport const OnboardingCreateSubscription = async (uuid, data) => {\n  const endpoint = `/onboarding/create/subscription/${uuid}/`;\n  const options = {\n    method: \"POST\",\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return fetchAPI(`${API_BASE_URL}${endpoint}`, options, false);\n};\n\nexport const OnboardingCreatePassword = async (uuid, data) => {\n  const endpoint = `/onboarding/create/password/${uuid}/`;\n  const options = {\n    method: \"POST\",\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return fetchAPI(`${API_BASE_URL}${endpoint}`, options, false);\n};\n\n\nexport const requestDemoCreate = async (mainData) => {\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const raw = JSON.stringify(mainData);\n  console.log('raw: ', raw);\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\"\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/onboarding/request_demo/`, requestOptions);\n    const result = await response.text();\n    console.log('result: ', result);\n    return result;\n\n  } catch (error) {\n    console.error('Error:', error);\n    return error.text().then(errorMessage => {\n      console.error('Error Message:', errorMessage);\n      throw new Error(errorMessage);\n    });\n  }\n};\n\n\n\n\n"],"names":["Regionalsettings","navigate","useNavigate","uuid","useParams","email","URLSearchParams","useLocation","search","get","company_name","timezonesOptions","setTimezonesOptions","useState","loading","setLoading","error","setError","country","setCountry","timezone","setTimezone","useEffect","findData","timezones","find","name","Object","keys","_jsxs","_Fragment","children","_jsx","Helmet","className","src","LoinLogo","alt","Date","getFullYear","style","color","Dropdown","value","options","map","label","placeholder","onChange","e","filter","option","type","onClick","async","data","OnboardingCreateOrganisation","message","disabled","arrowRight","backgroundImage","RegionalSettings","backgroundSize","backgroundRepeat","fetchAPI","endpoint","arguments","length","undefined","isRequiredLoggedin","method","headers","body","accessToken","localStorage","getItem","isFormData","FormData","defaultHeaders","requestOptions","JSON","stringify","redirect","url","URL","response","fetch","ok","status","window","clear","sessionStorage","location","replace","Error","contentType","includes","json","text","console","API_BASE_URL","process","onboardingNextStep","OnboardingCode","otpCode","code","OnboardingCreateSubscription","OnboardingCreatePassword","requestDemoCreate","myHeaders","Headers","append","raw","mainData","log","result","then","errorMessage"],"sourceRoot":""}