{"version":3,"file":"static/js/9439.5a9b0774.chunk.js","mappings":"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","sources":["../node_modules/suneditor/src/lang|/Users/souravsantra/Develop/freelance/ReactMemate/node_modules/suneditor/src/lang|sync|/^/.//.*/.js$","shared/ui/editor/sun-editor-component.js","webpack://memateapp/./src/components/Business/features/sales-features/create-proposal/file-uploader/file-uploader.module.scss?611f","components/Business/features/sales-features/create-proposal/file-uploader/file-uploader.js","components/Business/features/sales-features/create-proposal/file-uploader/utils.js","shared/ui/editor/editor-header-template.js"],"sourcesContent":["var map = {\n\t\"./ckb.js\": 23743,\n\t\"./cs.js\": 7333,\n\t\"./da.js\": 11664,\n\t\"./de.js\": 30844,\n\t\"./en.js\": 5460,\n\t\"./es.js\": 6151,\n\t\"./fa.js\": 96062,\n\t\"./fr.js\": 27755,\n\t\"./he.js\": 3296,\n\t\"./hu.js\": 33776,\n\t\"./index.js\": 70559,\n\t\"./it.js\": 54762,\n\t\"./ja.js\": 80074,\n\t\"./km.js\": 27671,\n\t\"./ko.js\": 20665,\n\t\"./lv.js\": 90749,\n\t\"./nl.js\": 66449,\n\t\"./pl.js\": 48599,\n\t\"./pt_br.js\": 48366,\n\t\"./ro.js\": 73100,\n\t\"./ru.js\": 34638,\n\t\"./se.js\": 55111,\n\t\"./tr.js\": 10057,\n\t\"./ua.js\": 79657,\n\t\"./ur.js\": 64640,\n\t\"./zh_cn.js\": 25277\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 32224;","import { useCallback, useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'sonner';\nimport SunEditor from 'suneditor-react';\nimport 'suneditor/dist/css/suneditor.min.css';\n\nconst SunEditorComponent = ({\n    value = '',\n    onChange,\n    placeholder = 'Enter content...',\n    height = 299,\n    showTable = true,\n    showLink = true,\n    disabled = false,\n    className = '',\n    customOptions = {},\n    onLoad,\n    onFocus,\n    onBlur,\n    enableS3Upload = false,\n    s3UploadEndpoint = null,\n    uploadId = null,\n    ...props\n}) => {\n\n    // State for upload progress and drag states\n    const [uploadProgress, setUploadProgress] = useState({});\n    const [dragState, setDragState] = useState(false);\n    const [processingBase64, setProcessingBase64] = useState(false);\n    \n    // Cache to store already uploaded base64 images to prevent duplicate uploads\n    const uploadCacheRef = useRef(new Map());\n\n    // Clean up cache periodically to prevent memory leaks\n    useEffect(() => {\n        const cleanupInterval = setInterval(() => {\n            const cache = uploadCacheRef.current;\n            if (cache.size > 50) { // Limit cache to 50 entries\n                const entries = Array.from(cache.entries());\n                const toKeep = entries.slice(-25); // Keep latest 25 entries\n                uploadCacheRef.current = new Map(toKeep);\n                // console.log('Cleaned up upload cache, kept', toKeep.length, 'entries');\n            }\n        }, 60000); // Check every minute\n\n        return () => clearInterval(cleanupInterval);\n    }, []);\n\n    // Ref for SunEditor instance\n    const editorRef = useRef(null);\n    const editorInstanceRef = useRef(null);\n\n    // Utility function to check if an image is already hosted on S3\n    const isS3Image = useCallback((src) => {\n        if (!src || typeof src !== 'string') return false;\n        \n        // Check for common S3 URL patterns\n        const s3Patterns = [\n            /^https?:\\/\\/.*\\.s3\\..*\\.amazonaws\\.com\\//,\n            /^https?:\\/\\/s3\\..*\\.amazonaws\\.com\\//,\n            /^https?:\\/\\/.*\\.s3\\.amazonaws\\.com\\//,\n            /^https?:\\/\\/.*\\.digitaloceanspaces\\.com\\//,\n            // Add your specific S3 bucket pattern here if needed\n            new RegExp(`^https?://${process.env.REACT_APP_S3_BUCKET || '.*'}\\\\.s3\\\\..*\\\\.amazonaws\\\\.com/`)\n        ];\n        \n        return s3Patterns.some(pattern => pattern.test(src));\n    }, []);\n\n    // Utility function to detect all images in content and categorize them\n    const categorizeImages = useCallback((content) => {\n        const allImageRegex = /<img[^>]+src=\"([^\"]+)\"[^>]*>/gi;\n        const base64Images = [];\n        const s3Images = [];\n        const otherImages = [];\n        let match;\n        \n        while ((match = allImageRegex.exec(content)) !== null) {\n            const fullMatch = match[0];\n            const src = match[1];\n            \n            if (src.startsWith('data:image/')) {\n                // Extract format and base64 data for base64 images\n                const base64Match = src.match(/^data:image\\/([^;]+);base64,(.+)$/);\n                if (base64Match) {\n                    base64Images.push({\n                        fullMatch,\n                        format: base64Match[1],\n                        base64Data: base64Match[2],\n                        src,\n                        index: match.index\n                    });\n                }\n            } else if (isS3Image(src)) {\n                s3Images.push({\n                    fullMatch,\n                    src,\n                    index: match.index\n                });\n            } else {\n                otherImages.push({\n                    fullMatch,\n                    src,\n                    index: match.index\n                });\n            }\n        }\n        \n        return { base64Images, s3Images, otherImages };\n    }, [isS3Image]);\n\n    // Utility function to convert base64 to File object\n    const base64ToFile = useCallback((base64Data, format, filename) => {\n        // Remove data URL prefix if present\n        const base64String = base64Data.replace(/^data:image\\/[a-z]+;base64,/, '');\n        \n        // Convert base64 to binary data\n        const byteCharacters = atob(base64String);\n        const byteNumbers = new Array(byteCharacters.length);\n        \n        for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        \n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], { type: `image/${format}` });\n        \n        return new File([blob], filename, { type: `image/${format}` });\n    }, []);\n\n    // Upload base64 image to S3 and return the S3 URL (with caching)\n    const uploadBase64ImageToS3 = useCallback(async (base64Data, format) => {\n        if (!enableS3Upload) return null;\n\n        // Create a hash of the base64 data for caching\n        const base64Hash = btoa(base64Data.substring(0, 100)); // Use first 100 chars as hash\n        \n        // Check if this image was already uploaded\n        if (uploadCacheRef.current.has(base64Hash)) {\n            const cachedUrl = uploadCacheRef.current.get(base64Hash);\n            // console.log('Using cached S3 URL for image:', cachedUrl);\n            return cachedUrl;\n        }\n\n        try {\n            const timestamp = Date.now();\n            const filename = `image-${timestamp}.${format}`;\n            const file = base64ToFile(base64Data, format, filename);\n\n            // Get signed URL\n            const accessToken = localStorage.getItem('access_token');\n            const endpoint = s3UploadEndpoint || `${process.env.REACT_APP_BACKEND_API_URL}/proposals/file/${uploadId}/`;\n\n            const response = await axios.post(\n                endpoint,\n                { file_name: filename },\n                {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }\n            );\n\n            const { url } = response.data;\n            if (!url) {\n                throw new Error(\"Failed to get upload URL\");\n            }\n\n            // Upload to S3\n            await axios.put(url, file, {\n                headers: {\n                    \"Content-Type\": \"\",\n                },\n            });\n\n            // Get the S3 URL (remove query parameters)\n            const s3Url = url.split(\"?\")[0] || \"\";\n            \n            // Cache the uploaded image\n            uploadCacheRef.current.set(base64Hash, s3Url);\n            // console.log('Cached new upload:', s3Url);\n            \n            return s3Url;\n\n        } catch (error) {\n            console.error(\"Error uploading base64 image to S3:\", error);\n            throw error;\n        }\n    }, [enableS3Upload, s3UploadEndpoint, uploadId, base64ToFile]);\n\n    // S3 upload function\n    const uploadToS3 = useCallback(async (file, url) => {\n        return axios.put(url, file, {\n            headers: {\n                \"Content-Type\": \"\",\n            },\n            onUploadProgress: (progressEvent) => {\n                const progress = Math.round(\n                    (progressEvent.loaded / progressEvent.total) * 100\n                );\n                setUploadProgress({ progress, uploading: true });\n            }\n        }).then((response) => {\n            // S3 returns 200 for successful uploads, check status\n            if (response.status === 200 || response.status === 201) {\n                setUploadProgress({ progress: 100, success: true, uploading: false });\n                const fileURL = url.split(\"?\")[0] || \"\";\n\n                // console.log('S3 upload successful, inserting image:', fileURL);\n                // here we insert the image into the editor\n\n                toast.success('Image uploaded successfully');\n\n                // Clear progress after a delay\n                setTimeout(() => {\n                    setUploadProgress({});\n                }, 2000);\n            } else {\n                throw new Error(`Upload failed with status: ${response.status}`);\n            }\n\n        }).catch((err) => {\n            console.log('Error uploading to S3: ', err);\n            setUploadProgress({ progress: 0, error: true, uploading: false });\n            toast.error('Failed to upload image to S3');\n            throw err; // Re-throw to be caught by fileUploadBySignedURL\n        });\n    }, []);\n\n    // Get signed URL and upload file to S3\n    const fileUploadBySignedURL = useCallback(async (file) => {\n        if (!file || !enableS3Upload) return;\n\n        try {\n            const name = file?.name?.split(\".\")[0];\n            const fileExtension = file?.name?.split(\".\")?.pop();\n            const fileName = `proposal-images/${name}-${Date.now()}.${fileExtension}`;\n\n            setUploadProgress({ progress: 0, uploading: true });\n\n            const accessToken = localStorage.getItem('access_token');\n            const endpoint = s3UploadEndpoint || `${process.env.REACT_APP_BACKEND_API_URL}/proposals/file/${uploadId}/`;\n\n            const response = await axios.post(\n                endpoint,\n                { filename: fileName },\n                {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }\n            );\n\n            const { url } = response.data;\n            if (!url) {\n                setUploadProgress({ progress: 0, error: true, uploading: false });\n                toast.error(\"Failed to get upload URL. Please try again.\");\n                return;\n            }\n\n            // Upload to S3 - this will handle its own success/error states\n            await uploadToS3(file, url);\n\n        } catch (error) {\n            // Only show error if it's not from S3 upload (which handles its own errors)\n            if (!error.message?.includes('Upload failed with status')) {\n                setUploadProgress({ progress: 0, error: true, uploading: false });\n                console.error(\"Error in fileUploadBySignedURL:\", error);\n                toast.error(\"Failed to upload file. Please try again.\");\n            }\n        }\n    }, [uploadToS3, enableS3Upload, s3UploadEndpoint, uploadId]);\n\n    // Drag and drop handlers\n    const handleDragEnter = useCallback((e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (enableS3Upload) {\n            setDragState(true);\n        }\n    }, [enableS3Upload]);\n\n    const handleDragLeave = useCallback((e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        // Only hide drag overlay if we're leaving the editor completely\n        const rect = e.currentTarget.getBoundingClientRect();\n        const x = e.clientX;\n        const y = e.clientY;\n\n        if (x < rect.left || x > rect.right || y < rect.top || y > rect.bottom) {\n            setDragState(false);\n        }\n    }, []);\n\n    const handleDragOver = useCallback((e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    }, []);\n\n    const handleDrop = useCallback(async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setDragState(false);\n\n        if (!enableS3Upload) return;\n\n        const files = e.dataTransfer.files;\n        if (files && files.length > 0) {\n            const file = files[0];\n\n            // Validate file size (max 10MB)\n            if (file.size > 10 * 1024 * 1024) {\n                toast.error('File size must be less than 10MB');\n                return;\n            }\n\n            // Validate file type\n            if (!file.type.startsWith('image/')) {\n                toast.error('Please select a valid image file');\n                return;\n            }\n\n            await fileUploadBySignedURL(file);\n        }\n    }, [fileUploadBySignedURL, enableS3Upload]);\n\n    // Render upload progress overlay\n    const renderUploadProgress = () => {\n        if (!uploadProgress?.uploading && !uploadProgress?.success && !uploadProgress?.error && !processingBase64) return null;\n\n        return (\n            <div style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                zIndex: 1000,\n                borderRadius: '4px'\n            }}>\n                {(uploadProgress.uploading || processingBase64) && (\n                    <>\n                        <div style={{\n                            width: '60px',\n                            height: '60px',\n                            border: '4px solid #f3f3f3',\n                            borderTop: '4px solid #3498db',\n                            borderRadius: '50%',\n                            animation: 'spin 1s linear infinite',\n                            marginBottom: '16px'\n                        }}></div>\n                        <div style={{\n                            fontSize: '14px',\n                            fontWeight: '500',\n                            color: '#333',\n                            marginBottom: '8px'\n                        }}>\n                            {processingBase64 ? 'Processing images...' : 'Uploading image...'}\n                        </div>\n                        {uploadProgress.uploading && (\n                            <>\n                                <div style={{\n                                    width: '200px',\n                                    height: '6px',\n                                    backgroundColor: '#f0f0f0',\n                                    borderRadius: '3px',\n                                    overflow: 'hidden'\n                                }}>\n                                    <div style={{\n                                        width: `${uploadProgress.progress}%`,\n                                        height: '100%',\n                                        backgroundColor: '#3498db',\n                                        transition: 'width 0.3s ease'\n                                    }}></div>\n                                </div>\n                                <div style={{\n                                    fontSize: '12px',\n                                    color: '#666',\n                                    marginTop: '4px'\n                                }}>\n                                    {uploadProgress.progress}%\n                                </div>\n                            </>\n                        )}\n                    </>\n                )}\n                {uploadProgress.success && (\n                    <div style={{ textAlign: 'center' }}>\n                        <div style={{\n                            width: '50px',\n                            height: '50px',\n                            backgroundColor: '#27ae60',\n                            borderRadius: '50%',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            margin: '0 auto 16px'\n                        }}>\n                            <span style={{ color: 'white', fontSize: '24px' }}>✓</span>\n                        </div>\n                        <div style={{ fontSize: '14px', color: '#27ae60' }}>\n                            Upload completed!\n                        </div>\n                    </div>\n                )}\n                {uploadProgress.error && (\n                    <div style={{ textAlign: 'center' }}>\n                        <div style={{\n                            width: '50px',\n                            height: '50px',\n                            backgroundColor: '#e74c3c',\n                            borderRadius: '50%',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            margin: '0 auto 16px'\n                        }}>\n                            <span style={{ color: 'white', fontSize: '24px' }}>✗</span>\n                        </div>\n                        <div style={{ fontSize: '14px', color: '#e74c3c' }}>\n                            Upload failed\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    // Render drag overlay\n    const renderDragOverlay = () => {\n        if (!dragState || !enableS3Upload) return null;\n\n        return (\n            <div style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                backgroundColor: 'rgba(52, 152, 219, 0.1)',\n                border: '2px dashed #3498db',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                zIndex: 999,\n                borderRadius: '4px'\n            }}>\n                <div style={{\n                    textAlign: 'center',\n                    color: '#3498db',\n                    fontSize: '16px',\n                    fontWeight: '500'\n                }}>\n                    <div style={{ fontSize: '48px', marginBottom: '16px' }}>📁</div>\n                    Drop your image here\n                </div>\n            </div>\n        );\n    };\n\n    // Default button configuration\n    const getButtonList = () => {\n        const buttons = [\n            ['undo', 'redo'],\n            ['bold', 'italic', 'underline', 'strike'],\n            ['formatBlock'],\n            ['list'],\n            ['align'],\n            ['image'],\n        ];\n\n        // Conditionally add buttons based on props\n        if (showLink) buttons.push(['link']);\n        if (showTable) buttons.push(['table']);\n\n        return buttons;\n    };\n\n\n    // Default SunEditor configuration\n    const defaultOptions = {\n        buttonList: getButtonList(),\n        height: height,\n        placeholder: placeholder,\n        showPathLabel: false,\n        charCounter: false,\n        resizingBar: false,\n        disable: disabled,\n        // Custom image handler for S3 upload\n        imageUploadUrl: enableS3Upload ? null : undefined,\n        // Table configuration\n        table: {\n            headerStyle: 'background-color: #f8f9fa; font-weight: bold; padding: 8px; min-width: 50px; border: none;',\n            cellStyle: 'padding: 8px; min-width: 50px; border: none;'\n        },\n        // Image configuration\n        imageUploadHeader: enableS3Upload ? undefined : {\n            'Authorization': `Bearer ${localStorage.getItem('access_token') || ''}`\n        },\n        // Format options\n        formats: ['p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n        // Font options\n        font: ['Arial', 'Helvetica', 'Georgia', 'Times New Roman', 'Courier New'],\n        fontSize: [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72],\n        // Color options\n        colorList: [\n            ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F3F7', '#FFFFFF'],\n            ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],\n            ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],\n            ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],\n            ['#E76363', '#FF9C63', '#FFCE63', '#9CDE9C', '#63B5CE', '#639CFF', '#9C63E7', '#CE639C'],\n            ['#E73131', '#FF7031', '#FFB531', '#73DE73', '#319CCE', '#3173FF', '#7331E7', '#CE3173'],\n            ['#9C0000', '#B56308', '#9C9C00', '#089C00', '#008294', '#0031FF', '#4A0A77', '#9C005A'],\n            ['#630000', '#7B3900', '#636300', '#006300', '#005A6B', '#002173', '#290A4A', '#630039']\n        ]\n    };\n\n    // Merge custom options with default options\n    const editorOptions = {\n        ...defaultOptions,\n        ...customOptions,\n        // Ensure buttonList is properly merged\n        buttonList: customOptions.buttonList || defaultOptions.buttonList\n    };\n\n    const handleChange = async (content) => {\n        \n        // Check if S3 upload is enabled and content contains images\n        if (enableS3Upload && content && typeof content === 'string') {\n            const { base64Images, s3Images } = categorizeImages(content);\n            \n            // Log image categorization for debugging\n           // console.log(`Image analysis: ${base64Images.length} base64, ${s3Images.length} S3, total images: ${base64Images.length + s3Images.length}`);\n            \n            // Only process base64 images (skip S3 images to prevent re-upload)\n            if (base64Images.length > 0) {\n                // console.log(`Found ${base64Images.length} new base64 image(s) to upload (skipping ${s3Images.length} existing S3 images)`);\n                \n                setProcessingBase64(true);\n                \n                try {\n                    let updatedContent = content;\n                    \n                    // Process each base64 image\n                    for (const imageMatch of base64Images) {\n                        const { fullMatch, format, base64Data } = imageMatch;\n                        \n                        // Upload to S3\n                        const s3Url = await uploadBase64ImageToS3(base64Data, format);\n                        \n                        if (s3Url) {\n                            // Replace base64 image with S3 URL in content\n                            const newImgTag = fullMatch.replace(\n                                /src=\"data:image\\/[^;]+;base64,[^\"]+\"/,\n                                `src=\"${s3Url}\"`\n                            );\n                            updatedContent = updatedContent.replace(fullMatch, newImgTag);\n                            console.log('Replaced base64 image with S3 URL:', s3Url);\n                        }\n                    }\n                    \n                    setProcessingBase64(false);\n                    \n                    // Call onChange with updated content containing S3 URLs\n                    if (onChange && updatedContent !== content) {\n                        onChange(updatedContent);\n                        return;\n                    }\n                } catch (error) {\n                    console.error('Error processing base64 images:', error);\n                    setProcessingBase64(false);\n                    toast.error('Failed to upload images. Please try again.');\n                }\n            } else if (s3Images.length > 0) {\n                // Content has S3 images but no new base64 images to process\n                console.log('Content contains only S3 images, no upload needed');\n            }\n        }\n        \n        // If no base64 images or S3 upload disabled, proceed normally\n        if (onChange) {\n            onChange(content);\n        }\n    };\n\n    const handleLoad = (sunEditor) => {\n        // Store the editor instance for later use\n        editorInstanceRef.current = sunEditor;\n\n        // Also try to get the editor from the ref if available\n        if (editorRef.current) {\n            const refEditor = editorRef.current.getInstance();\n            if (refEditor && Object.keys(refEditor).length > 0) {\n                editorInstanceRef.current = refEditor;\n            }\n        }\n\n        if (onLoad) {\n            onLoad(sunEditor);\n        }\n    };\n\n    const handleFocus = (event, sunEditor) => {\n        if (onFocus) {\n            onFocus(event, sunEditor);\n        }\n    };\n\n    const handleBlur = (event, sunEditor) => {\n        if (onBlur) {\n            onBlur(event, sunEditor);\n        }\n    };\n\n    return (\n        <>\n            <style>{`\n                @keyframes spin {\n                    0% { transform: rotate(0deg); }\n                    100% { transform: rotate(360deg); }\n                }\n                \n                /* Remove all table borders in SunEditor */\n                .sun-editor-wrapper .se-wrapper-inner table,\n                .sun-editor-wrapper .se-wrapper-inner table td,\n                .sun-editor-wrapper .se-wrapper-inner table th,\n                .sun-editor-wrapper .se-wrapper-inner table tr {\n                    border: none !important;\n                    outline: none !important;\n                    border-collapse: collapse !important;\n                }\n                \n                /* Also remove borders when content is rendered outside editor */\n                .sun-editor-content table,\n                .sun-editor-content table td,\n                .sun-editor-content table th,\n                .sun-editor-content table tr {\n                    border: none !important;\n                    outline: none !important;\n                    border-collapse: collapse !important;\n                }\n            `}</style>\n            <div\n                className={`sun-editor-wrapper ${className}`}\n                style={{ position: 'relative' }}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n            >\n                <SunEditor\n                    ref={editorRef}\n                    setOptions={editorOptions}\n                    setContents={value}\n                    onChange={handleChange}\n                    onLoad={handleLoad}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                    {...props}\n                />\n\n                {/* Drag Overlay */}\n                {renderDragOverlay()}\n\n                {/* Upload Progress Overlay */}\n                {renderUploadProgress()}\n            </div>\n        </>\n    );\n};\n\nexport default SunEditorComponent;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"file-uploader_title__MJFJ7\",\"previewSection\":\"file-uploader_previewSection__ot4jI\",\"previewBox\":\"file-uploader_previewBox__KC4if\",\"previewBoxImg1\":\"file-uploader_previewBoxImg1__rKP04\",\"previewBoxImg2\":\"file-uploader_previewBoxImg2__7XwSP\",\"previewBoxImg3\":\"file-uploader_previewBoxImg3__7luuQ\",\"previewBoxImg4\":\"file-uploader_previewBoxImg4__EcGdL\",\"previewBoxImg5\":\"file-uploader_previewBoxImg5__2ZZPh\",\"previewActions\":\"file-uploader_previewActions__r3LWm\",\"label\":\"file-uploader_label__pWhYK\",\"label2\":\"file-uploader_label2__N-JEM\"};","import React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { ArrowClockwise, CloudUpload } from 'react-bootstrap-icons';\nimport { useDropzone } from 'react-dropzone';\nimport Cropper from 'react-easy-crop';\nimport clsx from 'clsx';\nimport Form from 'react-bootstrap/Form';\nimport { toast } from 'sonner';\nimport styles from './file-uploader.module.scss';\nimport { base64ToBlob } from './utils';\n\nconst FileUploader = ({ show, setShow, setPhoto, additionalDesign, shape=\"rect\" }) => {\n    const [files, setFiles] = useState([]);\n    const [crop, setCrop] = useState({ x: 0, y: 0 });\n    const [zoom, setZoom] = useState(1);\n    const [rotation, setRotation] = useState(0);\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n    const [croppedImages, setCroppedImages] = useState({});\n\n    const handleClose = () => setShow(false);\n\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n        setCroppedAreaPixels(croppedAreaPixels);\n    }, []);\n\n    const getCroppedImg = useCallback(async () => {\n        if (!files.length || !croppedAreaPixels) return;\n\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        const img = new Image();\n        img.src = files[0].preview;\n        await new Promise((resolve) => (img.onload = resolve));\n\n        // Set canvas dimensions to the cropped area's dimensions\n        canvas.width = croppedAreaPixels.width;\n        canvas.height = croppedAreaPixels.height;\n\n        // Translate canvas to center to rotate around the center\n        ctx.translate(canvas.width / 2, canvas.height / 2);\n        ctx.rotate((rotation * Math.PI) / 180);\n        ctx.translate(-canvas.width / 2, -canvas.height / 2);\n\n        ctx.drawImage(\n            img,\n            croppedAreaPixels.x,\n            croppedAreaPixels.y,\n            croppedAreaPixels.width,\n            croppedAreaPixels.height,\n            0,\n            0,\n            croppedAreaPixels.width,\n            croppedAreaPixels.height\n        );\n\n        const base64Image = canvas.toDataURL('image/jpeg');\n        return base64Image;\n    }, [files, croppedAreaPixels, rotation]);\n\n    const generateCroppedImages = async () => {\n        const croppedImage = await getCroppedImg();\n        if (croppedImage) {\n            setCroppedImages({\n                img2: croppedImage,\n                img3: croppedImage,\n                img4: croppedImage,\n                img5: croppedImage,\n            });\n        }\n    };\n\n    useEffect(() => {\n        generateCroppedImages();\n    }, [zoom, crop, rotation, files, croppedAreaPixels]);\n\n    const {\n        getRootProps,\n        getInputProps\n    } = useDropzone({\n        maxFiles: 1,\n        accept: {\n            'image/*': []\n        },\n        onDrop: acceptedFiles => {\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            })));\n        }\n    });\n\n    const remove = (e) => {\n        e.stopPropagation();\n        setFiles([]);\n        setCroppedImages({});\n        setShow(false);\n    };\n\n    const rotateImage = () => {\n        setRotation((prevRotation) => (prevRotation + 90) % 360);\n    };\n\n    const handleImage = async () => {\n        const croppedImageBase64 = await getCroppedImg();\n        if (!croppedImageBase64) return toast.error('Please select a photo');\n        const croppedImageBlob = base64ToBlob(croppedImageBase64, 'image/jpeg');\n        setPhoto({ croppedImageBase64, croppedImageBlob });\n        setShow(false);\n        setFiles([]);\n        setCroppedImages({});\n    };\n\n    return (\n        <Modal style={{ zIndex: 1111 }} show={show} centered onHide={handleClose} onShow={generateCroppedImages}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <span className={`${styles.title}`}>Edit Photo</span>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {additionalDesign}\n                <div className={`${styles.previewSection}`}>\n                    <div className={`${styles.previewBox}`}>\n                        <div className={clsx(styles.previewBoxImg1, shape === 'round' ? 'rounded-circle' : '')}>\n                            <Cropper\n                                image={files.length > 0 ? files[0].preview : null}\n                                crop={crop}\n                                zoom={zoom}\n                                cropShape={shape}\n                                rotation={rotation}\n                                onCropChange={setCrop}\n                                onZoomChange={setZoom}\n                                onCropComplete={onCropComplete}\n                                aspect={3/2} // or remove this if you want a flexible aspect ratio\n                                restrictPosition={false} // Allow full movement within the bounds\n                                style={{\n                                    containerStyle: {\n                                        width: '100%',\n                                        height: '100%',\n                                        position: 'relative',\n                                    },\n                                    cropAreaStyle: {\n                                        width: '100%',\n                                        height: '100%',\n                                    },\n                                    mediaStyle: {\n                                        width: '100%',\n                                        height: '100%',\n                                        objectFit: 'contain',\n                                    },\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <div className={`${styles.previewActions}`}>\n                        <Form.Group>\n                            <Form.Label className={`${styles.label}`}>Zoom</Form.Label>\n                            <Form.Range\n                                value={zoom}\n                                min={1}\n                                max={3}\n                                step={0.1}\n                                className='custom-range'\n                                onChange={(e) => setZoom(e.target.value)}\n                            />\n                        </Form.Group>\n                        <div className='d-flex align-item-center pt-4 ms-4' style={{ gap: '8px' }}>\n                            <Button className='text-button' onClick={rotateImage}>\n                                <ArrowClockwise color='#106B99' size={24} />\n                                Rotate\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n\n                <div {...getRootProps({ className: 'dropzone d-flex justify-content-center align-items-center flex-column' })} style={{ width: '100%', height: '126px', background: '#fff', borderRadius: '4px', border: '1px solid #EAECF0', marginTop: '16px' }}>\n                    <input {...getInputProps()} />\n                    <button type='button' className='d-flex justify-content-center align-items-center' style={{ width: '40px', height: '40px', border: '1px solid #EAECF0', background: '#fff', borderRadius: '8px', marginBottom: '16px' }}>\n                        <CloudUpload />\n                    </button>\n                    <p className='mb-0' style={{ color: '#475467', fontSize: '14px' }}><span style={{ color: '#106B99', fontWeight: '600' }}>Click to upload</span> or drag and drop</p>\n                    <span style={{ color: '#475467', fontSize: '12px' }}>SVG, PNG, JPG or GIF (max. 800x400px)</span>\n                </div>\n            </Modal.Body>\n            <Modal.Footer className='d-flex justify-content-end'>\n                <Button className='outline-button' onClick={remove}>Cancel</Button>\n                <Button className='solid-button' onClick={handleImage}>Save Photo</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default FileUploader;\n","import { nanoid } from \"nanoid\";\n\nexport function base64ToBlob(base64, mime) {\n    const byteString = atob(base64.split(',')[1]);\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], { type: mime });\n}\n\nexport const base64ToFile = (base64String) => {\n    const photoHintId = nanoid(6);\n    const fileName = `${photoHintId}.jpg`;\n    const byteString = atob(base64String.split(',')[1]); // Decode Base64 string\n    const mimeString = base64String.split(',')[0].split(':')[1].split(';')[0]; // Get MIME type\n\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const uint8Array = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < byteString.length; i++) {\n        uint8Array[i] = byteString.charCodeAt(i);\n    }\n\n    return new File([uint8Array], fileName, { type: mimeString });\n};","export const renderHeader = () => {\n    return (\n        <>\n            <span className=\"ql-formats\">\n                <button className=\"ql-bold me-1\" aria-label=\"Bold\"></button>\n                <button className=\"ql-italic me-1\" aria-label=\"Italic\"></button>\n                <button className=\"ql-underline me-1\" aria-label=\"Underline\"></button>\n            </span>\n            <span className=\"ql-formats\">\n                <button className=\"ql-list me-1\" value=\"ordered\" aria-label=\"Ordered List\" />\n                <button className=\"ql-list me-1\" value=\"bullet\" aria-label=\"Unordered List\" />\n                <button className=\"ql-indent me-1\" value=\"-1\" aria-label=\"Indent\" />\n                <button className=\"ql-indent me-1\" value=\"+1\" aria-label=\"Outdent\" />\n            </span>\n            <span className=\"ql-formats\">\n                <select className=\"ql-size me-1\">\n                    <option value=\"small\">Small</option>\n                    <option value=\"\" selected>Normal</option>\n                    <option value=\"large\">Large</option>\n                    <option value=\"huge\">Huge</option>\n                </select>\n                <select className=\"ql-color me-1\" />\n                <button className=\"ql-link me-1\" value=\"+1\" aria-label=\"Outdent\" />\n            </span>\n        </>\n    );\n};"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","_ref","value","onChange","placeholder","height","showTable","showLink","disabled","className","customOptions","onLoad","onFocus","onBlur","enableS3Upload","s3UploadEndpoint","uploadId","props","uploadProgress","setUploadProgress","useState","dragState","setDragState","processingBase64","setProcessingBase64","uploadCacheRef","useRef","Map","useEffect","cleanupInterval","setInterval","cache","current","size","toKeep","Array","from","entries","slice","clearInterval","editorRef","editorInstanceRef","isS3Image","useCallback","src","RegExp","process","REACT_APP_S3_BUCKET","some","pattern","test","categorizeImages","content","allImageRegex","base64Images","s3Images","otherImages","match","exec","fullMatch","startsWith","base64Match","push","format","base64Data","index","base64ToFile","filename","base64String","replace","byteCharacters","atob","byteNumbers","length","i","charCodeAt","byteArray","Uint8Array","blob","Blob","type","File","uploadBase64ImageToS3","async","base64Hash","btoa","substring","has","get","Date","now","file","accessToken","localStorage","getItem","endpoint","response","axios","post","file_name","headers","Authorization","url","data","put","s3Url","split","set","error","console","uploadToS3","onUploadProgress","progressEvent","progress","Math","round","loaded","total","uploading","then","status","success","toast","setTimeout","catch","err","log","fileUploadBySignedURL","_file$name","_file$name2","_file$name2$split","name","fileExtension","pop","fileName","_error$message","message","includes","handleDragEnter","preventDefault","stopPropagation","handleDragLeave","rect","currentTarget","getBoundingClientRect","x","clientX","y","clientY","left","right","top","bottom","handleDragOver","handleDrop","files","dataTransfer","defaultOptions","buttonList","getButtonList","buttons","showPathLabel","charCounter","resizingBar","disable","imageUploadUrl","undefined","table","headerStyle","cellStyle","imageUploadHeader","formats","font","fontSize","colorList","editorOptions","_jsxs","_Fragment","children","_jsx","style","position","onDragEnter","onDragLeave","onDragOver","onDrop","SunEditor","ref","setOptions","setContents","updatedContent","imageMatch","newImgTag","sunEditor","refEditor","getInstance","handleFocus","event","handleBlur","backgroundColor","border","display","alignItems","justifyContent","zIndex","borderRadius","textAlign","color","fontWeight","marginBottom","flexDirection","width","borderTop","animation","overflow","transition","marginTop","margin","show","setShow","setPhoto","additionalDesign","shape","setFiles","crop","setCrop","zoom","setZoom","rotation","setRotation","croppedAreaPixels","setCroppedAreaPixels","croppedImages","setCroppedImages","onCropComplete","croppedArea","getCroppedImg","canvas","document","createElement","ctx","getContext","img","Image","preview","Promise","onload","translate","rotate","PI","drawImage","toDataURL","generateCroppedImages","croppedImage","img2","img3","img4","img5","getRootProps","getInputProps","useDropzone","maxFiles","accept","acceptedFiles","assign","URL","createObjectURL","Modal","centered","onHide","handleClose","onShow","Header","closeButton","Title","styles","Body","clsx","Cropper","image","cropShape","onCropChange","onZoomChange","aspect","restrictPosition","containerStyle","cropAreaStyle","mediaStyle","objectFit","Form","Group","Label","Range","min","max","step","target","gap","Button","onClick","rotateImage","prevRotation","ArrowClockwise","background","CloudUpload","Footer","croppedImageBase64","croppedImageBlob","base64","mime","byteString","ab","ArrayBuffer","ia","base64ToBlob","renderHeader","selected"],"sourceRoot":""}