{"version":3,"file":"static/js/8777.59a591a7.chunk.js","mappings":"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","sources":["entities/setting/accounting/department-turnover-plan/api/department-turnover-plan.api.jsx","entities/setting/accounting/department-turnover-plan/models/update-accounting-target.mutation.jsx","components/layout/settings/accounting/account-code.js","entities/setting/accounting/department-turnover-plan/models/get-accounting-list.query.jsx","APIs/integrations-api.js"],"sourcesContent":["import { fetchInstance } from \"../../../../../shared/lib/fetch-api-instance\";\n\nexport const getAccountingList = async () => {\n    const path = `/settings/accounting/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const updateAccountingTarget = async (id, data) => {\n    const path = `/settings/accounting/${id}/`;\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getIndustryServiceList = async () => {\n    const path = `/suppliers/industries/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const updateIndustryServiceCode = async (id, data) => {\n    const path = `/suppliers/industries/${id}/`;\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getXeroCodesList = async () => {\n    const path = `/references/xero-codes/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const getAccountCodeList = async () => {\n    const path = `/account_codes/`;\n    const options = {\n        method: 'GET',\n    };\n    return fetchInstance(path, options);\n};\n\nexport const syncCode = async () => {\n    const path = `/account_codes/sync/`;\n    const options = {\n        method: 'PUT',\n    };\n    return fetchInstance(path, options);\n};\n","import { useMutation } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport { syncCode, updateAccountingTarget, updateIndustryServiceCode } from \"../api/department-turnover-plan.api\";\n\nexport const useAccountingTargetUpdateMutations = () => {\n    return useMutation({\n        mutationFn: ({ id, data }) => updateAccountingTarget(id, data),\n        onSuccess: () => {\n            toast.success(`Accounting target updated successfully`);\n        },\n        onError: (error) => {\n            console.error('Error updating accounting target:', error);\n            toast.error('Failed to update accounting target. Please try again.');\n        }\n    });\n};\n\nexport const useIndustryServiceUpdateMutations = () => {\n    return useMutation({\n        mutationFn: ({ id, data }) => updateIndustryServiceCode(id, data),\n        onSuccess: () => {\n            toast.success(`The supplier category code have been updated successfully.`);\n        },\n        onError: (error) => {\n            console.error('Error updating supplier category code:', error);\n            toast.error('Failed to update supplier category code. Please try again.');\n        }\n    });\n};\n\nexport const useAccountCodeSyncMutations = () => {\n    return useMutation({\n        mutationFn: () => syncCode(),\n        onSuccess: () => {\n            toast.success(`Account codes synced successfully`);\n        },\n        onError: (error) => {\n            console.error('Error syncing account codes:', error);\n            toast.error('Failed to sync account codes. Please try again.');\n        }\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from 'primereact/button';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport { getXeroIntegrations } from '../../../../APIs/integrations-api';\nimport { useTrialHeight } from '../../../../app/providers/trial-height-provider';\nimport { useAccountCodeGetQuery } from '../../../../entities/setting/accounting/department-turnover-plan/models/get-accounting-list.query';\nimport { useAccountCodeSyncMutations } from '../../../../entities/setting/accounting/department-turnover-plan/models/update-accounting-target.mutation';\n\nconst AccountCode = () => {\n    const { trialHeight } = useTrialHeight();\n    const [accountCodes, setAccountCodes] = useState([]);\n    const accountCodeQuery = useAccountCodeGetQuery();\n    const { mutate: syncCode, isPending } = useAccountCodeSyncMutations();\n    const xeroIntegrationsQuery = useQuery({ queryKey: ['getXeroIntegrations'], queryFn: getXeroIntegrations, retry: 1 });\n\n    useEffect(() => {\n        if (accountCodeQuery?.data) {\n            const codes = accountCodeQuery?.data.flatMap(code =>\n                code.codes.map(item => ({\n                    ...item,\n                    category: code.category\n                }))\n            );\n            setAccountCodes(codes);\n        }\n    }, [accountCodeQuery?.data]);\n\n    const codeSync = () => {\n        syncCode();\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>MeMate - Expenses Account</title>\n            </Helmet>\n            <div className='headSticky'>\n                <h1>Accounting</h1>\n                <div className='contentMenuTab'>\n                    <ul>\n                        <li><Link to=\"/settings/accounting/department-turnover-plan\">Department Turnover Plan</Link></li>\n                        <li><Link to=\"/settings/accounting/industry-service\">Supplier Categories</Link></li>\n                        <li className='menuActive'><Link to=\"/settings/accounting/account-code\">Account Codes</Link></li>\n                    </ul>\n                </div>\n            </div>\n            <div className={`content_wrap_main w-100`} style={{ paddingBottom: `${trialHeight}px` }}>\n                <div className='content_wrapper w-100'>\n                    <div className=\"listwrapper\">\n                        <div className=\"topHeadStyle pb-3\">\n                            <h2>Account Codes</h2>\n                            {xeroIntegrationsQuery?.data?.connected && <Button className='outline-button' onClick={codeSync} style={{ fontSize: '14px' }} disabled={isPending} loading={isPending}>Code Sync</Button>}\n                        </div>\n\n                        <DataTable className='w-100' showGridlines rowGroupMode=\"rowspan\" groupRowsBy=\"category\" value={accountCodes || []} tableStyle={{ minWidth: '100%', border: '1px solid #f2f2f2' }}>\n                            <Column header=\"#\" body={(data, options) => options.rowIndex + 1}></Column>\n                            <Column field=\"category\" header=\"Category\"></Column>\n                            <Column field=\"code\" header=\"Codes\"></Column>\n                            <Column field=\"name\" header=\"Account Name\"></Column>\n                            <Column field='description' header=\"Description\"></Column>\n                        </DataTable>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default AccountCode;\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getAccountCodeList, getAccountingList, getIndustryServiceList, getXeroCodesList } from \"../api/department-turnover-plan.api\";\n\nexport const useAccountingGetQuery = () => {\n    return useQuery({\n        queryKey: ['accounting-list'],\n        queryFn: getAccountingList\n    });\n};\n\nexport const useIndustryServiceGetQuery = () => {\n    return useQuery({\n        queryKey: ['industry-service-list'],\n        queryFn: getIndustryServiceList\n    });\n};\n\nexport const useXeroCodesGetQuery = () => {\n    return useQuery({\n        queryKey: ['xero-codes-list'],\n        queryFn: getXeroCodesList\n    });\n};\n\nexport const useAccountCodeGetQuery = () => {\n    return useQuery({\n        queryKey: ['account-code-list'],\n        queryFn: getAccountCodeList\n    });\n};\n","import { fetchAPI } from \"./base-api\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\nexport const getStripeIntegrations = async () => {\n    const endpoint = `/settings/integrations/stripe/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const stripeIntegrationsSet = async (data) => {\n    const endpoint = '/settings/integrations/stripe/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const stripeIntegrationsDelete = async (data) => {\n    const endpoint = '/settings/integrations/stripe/disconnect/';\n    const options = {\n        method: 'DELETE',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getGoogleReviewIntegrations = async () => {\n    const endpoint = `/settings/integrations/google/review/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const googleReviewIntegrationsSet = async (data) => {\n    const endpoint = '/settings/integrations/google/review/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getTwilioIntegrations = async () => {\n    const endpoint = `/settings/integrations/twilio/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const twilioIntegrationsSet = async (data) => {\n    const endpoint = '/settings/integrations/twilio/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getEmailIntegrations = async () => {\n    const endpoint = `/references/outgoing-email/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const emailIntegrationsSet = async (data) => {\n    const endpoint = '/references/outgoing-email/';\n    const options = {\n        method: 'PUT',\n        body: data\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getXeroIntegrations = async () => {\n    const endpoint = '/xero/status/';\n    const options = {\n        method: 'GET'\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const disconnectXeroIntegrations = async () => {\n    const endpoint = '/xero/disconnect/';\n    const options = {\n        method: 'POST'\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};"],"names":["getAccountingList","async","fetchInstance","method","updateAccountingTarget","id","data","path","options","body","getIndustryServiceList","updateIndustryServiceCode","getXeroCodesList","getAccountCodeList","syncCode","useAccountingTargetUpdateMutations","useMutation","mutationFn","_ref","onSuccess","toast","success","onError","error","console","useIndustryServiceUpdateMutations","_ref2","useAccountCodeSyncMutations","AccountCode","_xeroIntegrationsQuer","trialHeight","useTrialHeight","accountCodes","setAccountCodes","useState","accountCodeQuery","useAccountCodeGetQuery","mutate","isPending","xeroIntegrationsQuery","useQuery","queryKey","queryFn","getXeroIntegrations","retry","useEffect","codes","flatMap","code","map","item","category","_jsxs","_Fragment","children","_jsx","Helmet","className","Link","to","style","paddingBottom","connected","Button","onClick","codeSync","fontSize","disabled","loading","DataTable","showGridlines","rowGroupMode","groupRowsBy","value","tableStyle","minWidth","border","Column","header","rowIndex","field","useAccountingGetQuery","useIndustryServiceGetQuery","useXeroCodesGetQuery","API_BASE_URL","process","getStripeIntegrations","url","URL","fetchAPI","toString","stripeIntegrationsSet","stripeIntegrationsDelete","getGoogleReviewIntegrations","googleReviewIntegrationsSet","getTwilioIntegrations","twilioIntegrationsSet","getEmailIntegrations","emailIntegrationsSet","disconnectXeroIntegrations"],"sourceRoot":""}