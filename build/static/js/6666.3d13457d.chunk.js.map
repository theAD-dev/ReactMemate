{"version":3,"file":"static/js/6666.3d13457d.chunk.js","mappings":"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","sources":["webpack://memateapp/./src/components/layout/settings/projectstatus/project.module.scss?476e","components/layout/settings/projectstatus/outgoing-emails.js","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formWrapEmail\":\"project_formWrapEmail__nfb6S\",\"boxGroupList\":\"project_boxGroupList__lcQ5T\",\"outgoingTable\":\"project_outgoingTable__Cnf9F\",\"addmoreOption\":\"project_addmoreOption__DteqP\"};","import React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport '@szhsin/react-menu/dist/index.css';\nimport { Button, Table } from 'react-bootstrap';\nimport { PlusLg } from \"react-bootstrap-icons\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport style from './project.module.scss';\n\n// Define schema for multiple entries\nconst schema = yup.object().shape({\n  emails: yup.array().of(\n    yup.object().shape({\n      email: yup.string().email('Invalid email address').required('Email is required'),\n      username: yup.string().required('Username is required')\n    })\n  )\n});\n\nconst OutgoingEmails = () => {\n  const [rows, setRows] = useState([{ id: 1 }]); // State to store rows\n\n  const { control, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      emails: [{ email: '', username: '' }] // Default values for array fields\n    }\n  });\n\n  const onSubmit = (data) => {\n    console.log(data); // Outputs all the rows\n  };\n\n  // Function to handle adding a new row\n  const addRow = () => {\n    setRows([...rows, { id: rows.length + 1 }]);\n  };\n\n  // Function to handle removing a row\n  const removeRow = (id) => {\n    setRows(rows.filter(row => row.id !== id));\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>MeMate - Outgoing Emails</title>\n      </Helmet>\n      <div className='headSticky'>\n        <h1>Organisation Setting</h1>\n        <div className='contentMenuTab'>\n          <ul>\n            <li><Link to=\"/settings/projectstatus/project-status\">Project Status</Link></li>\n            {/* <li className='menuActive'><Link to=\"/settings/projectstatus/outgoing-emails\">Outgoing Emails</Link></li> */}\n          </ul>\n        </div>\n      </div>\n      <div className=\"content_wrap_main\">\n        <div className='content_wrapper'>\n          <div className=\"listwrapper orgColorStatus\">\n                <h4>Outgoing Emails</h4>\n                <p>The status name can be up to 20 characters long.</p>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <Table id={style.outgoingTable}>\n                    <tbody>\n                      {rows.map((row, index) => (\n                        <tr key={row.id}>\n                          <td>\n                            <div className={style.formWrapEmail}>\n                              <div className={style.boxGroupList}>\n                                <label htmlFor={`emails.${index}.email`}>Outgoing email</label>\n                                <Controller\n                                  name={`emails.${index}.email`}\n                                  control={control}\n                                  render={({ field }) => (\n                                    <input\n                                      {...field}\n                                      id={`emails.${index}.email`}\n                                      placeholder=\"john@email.com\"\n                                      type=\"email\"\n                                    />\n                                  )}\n                                />\n                                {errors.emails?.[index]?.email && (\n                                  <p>{errors.emails[index].email.message}</p>\n                                )}\n                              </div>\n                              <div className={style.boxGroupList}>\n                                <label htmlFor={`emails.${index}.username`}>Name</label>\n                                <Controller\n                                  name={`emails.${index}.username`}\n                                  control={control}\n                                  render={({ field }) => (\n                                    <input\n                                      {...field}\n                                      id={`emails.${index}.username`}\n                                      placeholder=\"john\"\n                                    />\n                                  )}\n                                />\n                                {errors.emails?.[index]?.username && (\n                                  <p>{errors.emails[index].username.message}</p>\n                                )}\n                              </div>\n                              <div className={style.boxGroupList}>\n                                <Button>Connected</Button>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"butactionOrg\">\n                            <Button className=\"save\" type=\"submit\">Save</Button>\n                            <Button className=\"remove\" onClick={() => removeRow(row.id)}>Remove</Button>\n                          </td>\n                        </tr>\n                      ))}\n                      <tr>\n                        <td id='addmoreOption' colSpan={3}>\n                          <Button onClick={addRow}>\n                            Add &nbsp;<PlusLg size={20} color='#000000' />\n                          </Button>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </form>\n              </div>\n            </div>\n          </div>\n    </>\n  );\n};\n\nexport default OutgoingEmails;\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;"],"names":["schema","yup","shape","emails","of","email","required","username","OutgoingEmails","rows","setRows","useState","id","control","handleSubmit","formState","errors","useForm","resolver","yupResolver","defaultValues","_jsxs","_Fragment","children","_jsx","Helmet","className","Link","to","onSubmit","data","console","log","Table","style","map","row","index","_errors$emails","_errors$emails$index","_errors$emails2","_errors$emails2$index","htmlFor","Controller","name","render","_ref","field","placeholder","type","message","_ref2","Button","onClick","removeRow","filter","colSpan","addRow","length","PlusLg","size","color","React","ref","bsPrefix","striped","bordered","borderless","hover","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","responsiveClass"],"sourceRoot":""}