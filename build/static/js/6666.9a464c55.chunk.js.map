{"version":3,"file":"static/js/6666.9a464c55.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Table.js","webpack://memateapp/./src/components/layout/settings/projectstatus/project.module.scss?476e","components/layout/settings/projectstatus/outgoing-emails.js"],"sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;","// extracted by mini-css-extract-plugin\nexport default {\"formWrapEmail\":\"project_formWrapEmail__nfb6S\",\"boxGroupList\":\"project_boxGroupList__lcQ5T\",\"outgoingTable\":\"project_outgoingTable__Cnf9F\",\"addmoreOption\":\"project_addmoreOption__DteqP\"};","import React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport '@szhsin/react-menu/dist/index.css';\nimport { Button, Table } from 'react-bootstrap';\nimport { PlusLg } from \"react-bootstrap-icons\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport style from './project.module.scss';\n\n// Define schema for multiple entries\nconst schema = yup.object().shape({\n  emails: yup.array().of(\n    yup.object().shape({\n      email: yup.string().email('Invalid email address').required('Email is required'),\n      username: yup.string().required('Username is required')\n    })\n  )\n});\n\nconst OutgoingEmails = () => {\n  const [rows, setRows] = useState([{ id: 1 }]); // State to store rows\n\n  const { control, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      emails: [{ email: '', username: '' }] // Default values for array fields\n    }\n  });\n\n  const onSubmit = (data) => {\n    console.log(data); // Outputs all the rows\n  };\n\n  // Function to handle adding a new row\n  const addRow = () => {\n    setRows([...rows, { id: rows.length + 1 }]);\n  };\n\n  // Function to handle removing a row\n  const removeRow = (id) => {\n    setRows(rows.filter(row => row.id !== id));\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>MeMate - Outgoing Emails</title>\n      </Helmet>\n      <div className='headSticky'>\n        <h1>Organisation Setting</h1>\n        <div className='contentMenuTab'>\n          <ul>\n            <li><Link to=\"/settings/projectstatus/project-status\">Project Status</Link></li>\n            {/* <li className='menuActive'><Link to=\"/settings/projectstatus/outgoing-emails\">Outgoing Emails</Link></li> */}\n          </ul>\n        </div>\n      </div>\n      <div className=\"content_wrap_main\">\n        <div className='content_wrapper'>\n          <div className=\"listwrapper orgColorStatus\">\n                <h4>Outgoing Emails</h4>\n                <p>The status name can be up to 20 characters long.</p>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <Table id={style.outgoingTable}>\n                    <tbody>\n                      {rows.map((row, index) => (\n                        <tr key={row.id}>\n                          <td>\n                            <div className={style.formWrapEmail}>\n                              <div className={style.boxGroupList}>\n                                <label htmlFor={`emails.${index}.email`}>Outgoing email</label>\n                                <Controller\n                                  name={`emails.${index}.email`}\n                                  control={control}\n                                  render={({ field }) => (\n                                    <input\n                                      {...field}\n                                      id={`emails.${index}.email`}\n                                      placeholder=\"john@email.com\"\n                                      type=\"email\"\n                                    />\n                                  )}\n                                />\n                                {errors.emails?.[index]?.email && (\n                                  <p>{errors.emails[index].email.message}</p>\n                                )}\n                              </div>\n                              <div className={style.boxGroupList}>\n                                <label htmlFor={`emails.${index}.username`}>Name</label>\n                                <Controller\n                                  name={`emails.${index}.username`}\n                                  control={control}\n                                  render={({ field }) => (\n                                    <input\n                                      {...field}\n                                      id={`emails.${index}.username`}\n                                      placeholder=\"john\"\n                                    />\n                                  )}\n                                />\n                                {errors.emails?.[index]?.username && (\n                                  <p>{errors.emails[index].username.message}</p>\n                                )}\n                              </div>\n                              <div className={style.boxGroupList}>\n                                <Button>Connected</Button>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"butactionOrg\">\n                            <Button className=\"save\" type=\"submit\">Save</Button>\n                            <Button className=\"remove\" onClick={() => removeRow(row.id)}>Remove</Button>\n                          </td>\n                        </tr>\n                      ))}\n                      <tr>\n                        <td id='addmoreOption' colSpan={3}>\n                          <Button onClick={addRow}>\n                            Add &nbsp;<PlusLg size={20} color='#000000' />\n                          </Button>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </form>\n              </div>\n            </div>\n          </div>\n    </>\n  );\n};\n\nexport default OutgoingEmails;\n"],"names":["React","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","schema","yup","shape","emails","of","email","required","username","OutgoingEmails","rows","setRows","useState","id","control","handleSubmit","formState","errors","useForm","resolver","yupResolver","defaultValues","_jsxs","_Fragment","Helmet","Link","to","onSubmit","data","console","log","Table","style","map","row","index","_errors$emails","_errors$emails$index","_errors$emails2","_errors$emails2$index","htmlFor","Controller","name","render","field","placeholder","type","message","_ref2","Button","onClick","removeRow","filter","colSpan","addRow","length","PlusLg","color"],"sourceRoot":""}