{"version":3,"file":"static/js/6453.11568668.chunk.js","mappings":"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","sources":["webpack://memateapp/./src/components/Work/Pages/approval/approval.module.scss?cde7","components/Work/Pages/approval/week-navigator.js","APIs/approval-api.js","webpack://memateapp/./src/components/Work/features/approve-job/approve-job.module.scss?5fb3","components/Work/features/approve-job/approve-job.jsx","components/Work/Pages/approval/approval-table.js","components/Work/Pages/approval/index.js","webpack://memateapp/./src/ui/image-with-fallback/image-avatar.module.scss?81d4","ui/image-with-fallback/image-avatar.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"filterBox\":\"approval_filterBox__ystSi\",\"total\":\"approval_total__t03q9\",\"totalCount\":\"approval_totalCount__hTTBc\",\"shadowRight\":\"approval_shadowRight__X9zTG\",\"payment\":\"approval_payment__YwghB\",\"paymentHours\":\"approval_paymentHours__0t+W3\",\"paymentFix\":\"approval_paymentFix__CXsuw\",\"time\":\"approval_time__EPrle\",\"tracker\":\"approval_tracker__67lYj\",\"clientImg\":\"approval_clientImg__UHBLY\",\"clientName\":\"approval_clientName__lw-Sd\",\"inProgress\":\"approval_inProgress__WFpNd\",\"approved\":\"approval_approved__oWI1u\",\"defaultStatus\":\"approval_defaultStatus__sa3+W\",\"finished\":\"approval_finished__tAhe6\",\"finishedAction\":\"approval_finishedAction__PNOct\",\"assign\":\"approval_assign__EvOLi\",\"assignAction\":\"approval_assignAction__ENiFC\",\"shadowLeft\":\"approval_shadowLeft__Slbva\",\"yearDropdown\":\"approval_yearDropdown__dYRYk\",\"clientPhoto\":\"approval_clientPhoto__T0lPw\",\"workerPhoto\":\"approval_workerPhoto__riwim\",\"button\":\"approval_button__2omTf\"};","import React, { useState, useEffect } from 'react';\nimport { Button, Dropdown } from 'react-bootstrap';\nimport { Calendar3 } from 'react-bootstrap-icons';\nimport clsx from 'clsx';\nimport style from './approval.module.scss';\n\nconst WeekNavigator = ({ onWeekChange }) => {\n  const [currentWeek, setCurrentWeek] = useState(null);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [weekInfo, setWeekInfo] = useState({ start: '', end: '' });\n\n  const currentYearNum = new Date().getFullYear();\n  const years = Array.from({ length: 5 }, (_, i) => currentYearNum - i);\n\n  const getWeekNumber = (date) => {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n  };\n\n  const getWeekDates = (weekNumber, year) => {\n    const firstDayOfYear = new Date(year, 0, 1);\n    const daysOffset = (weekNumber - 1) * 7 - (firstDayOfYear.getDay() - 1);\n\n    const firstDayOfWeek = new Date(year, 0, 1 + daysOffset);\n    const lastDayOfWeek = new Date(year, 0, 1 + daysOffset + 6);\n\n    return {\n      start: firstDayOfWeek,\n      end: lastDayOfWeek\n    };\n  };\n\n  const formatDate = (date) => {\n    return date.toLocaleDateString('en-US', {\n      day: 'numeric',\n      month: 'short'\n    });\n  };\n\n  useEffect(() => {\n    const today = new Date();\n    const weekNum = getWeekNumber(today);\n    setCurrentWeek(weekNum);\n\n    updateWeekDates(weekNum, currentYear);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    updateWeekDates(currentWeek, currentYear);\n\n    if (onWeekChange) {\n      const { start, end } = getWeekDates(currentWeek, currentYear);\n      onWeekChange({\n        week: currentWeek,\n        year: currentYear,\n        startDate: start,\n        endDate: end\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentWeek, currentYear]);\n\n  const updateWeekDates = (week, year) => {\n    const { start, end } = getWeekDates(week, year);\n    setWeekInfo({\n      start: formatDate(start),\n      end: formatDate(end)\n    });\n  };\n\n  const goToPreviousWeek = () => {\n    if (currentWeek > 1) {\n      setCurrentWeek(currentWeek - 1);\n    } else {\n      setCurrentYear(currentYear - 1);\n      setCurrentWeek(52);\n    }\n  };\n\n  // Check if next week button should be disabled\n  const isNextButtonDisabled = () => {\n    const currentDate = new Date();\n    const currentYearNum = currentDate.getFullYear();\n\n    // Disable if we're in a future year\n    if (currentYear > currentYearNum) {\n      return true;\n    }\n\n    // Disable if we're in the current year and at or beyond the current week\n    if (currentYear === currentYearNum) {\n      const currentWeekNum = getWeekNumber(currentDate);\n      if (currentWeek >= currentWeekNum) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const goToNextWeek = () => {\n    // Don't proceed if button is disabled\n    if (isNextButtonDisabled()) {\n      return;\n    }\n\n    // Normal week navigation logic\n    if (currentWeek < 52) {\n      setCurrentWeek(currentWeek + 1);\n    } else {\n      setCurrentYear(currentYear + 1);\n      setCurrentWeek(1);\n    }\n  };\n\n  const handleYearSelect = (year) => {\n    const selectedYear = parseInt(year);\n    const currentDate = new Date();\n    const currentYearNum = currentDate.getFullYear();\n\n    // Prevent selecting future years\n    if (selectedYear > currentYearNum) {\n      return;\n    }\n\n    // If selecting current year, make sure week is not in the future\n    if (selectedYear === currentYearNum) {\n      const currentWeekNum = getWeekNumber(currentDate);\n      if (currentWeek > currentWeekNum) {\n        setCurrentWeek(currentWeekNum);\n      }\n    }\n\n    setCurrentYear(selectedYear);\n  };\n\n  return (\n    <div className='d-flex align-items-center w-100' style={{ gap: '32px', position: 'relative' }}>\n      <Dropdown style={{ position: 'absolute', right: '16px' }}>\n        <Dropdown.Toggle as={Button} className={clsx(style.button, \"outline-button mx-auto\")}>\n          <Calendar3 size={16} color=\"#667085\" />\n          {currentYear}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          {years.map(year => (\n            <Dropdown.Item\n              key={year}\n              onClick={() => handleYearSelect(year)}\n              active={year === currentYear}\n            >\n              {year}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n\n      <div className='d-flex align-items-center mx-auto'>\n        <button\n          className='border-0'\n          style={{\n            background: 'transparent',\n            cursor: 'pointer',\n            opacity: 1\n          }}\n          onClick={goToPreviousWeek}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"17\" viewBox=\"0 0 16 17\" fill=\"none\">\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M8.35355 1.80514C8.54882 2.0004 8.54882 2.31698 8.35355 2.51224L2.70711 8.15869L8.35355 13.8051C8.54882 14.0004 8.54882 14.317 8.35355 14.5122C8.15829 14.7075 7.84171 14.7075 7.64645 14.5122L1.64645 8.51224C1.45118 8.31698 1.45118 8.0004 1.64645 7.80514L7.64645 1.80514C7.84171 1.60988 8.15829 1.60988 8.35355 1.80514Z\" fill=\"#344054\" />\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.3536 1.80514C12.5488 2.0004 12.5488 2.31698 12.3536 2.51224L6.70711 8.15869L12.3536 13.8051C12.5488 14.0004 12.5488 14.317 12.3536 14.5122C12.1583 14.7075 11.8417 14.7075 11.6464 14.5122L5.64645 8.51224C5.45118 8.31698 5.45118 8.0004 5.64645 7.80514L11.6464 1.80514C11.8417 1.60988 12.1583 1.60988 12.3536 1.80514Z\" fill=\"#344054\" />\n          </svg>\n        </button>\n\n        <div className='d-flex align-items-center justify-content-center' style={{ gap: '4px', width: '200px' }}>\n          <span className='font-14' style={{ color: '#344054' }}>\n            Week {currentWeek} | {weekInfo.start} - {weekInfo.end}\n          </span>\n        </div>\n\n        <button\n          className='border-0'\n          style={{\n            background: 'transparent',\n            cursor: isNextButtonDisabled() ? 'not-allowed' : 'pointer',\n            opacity: isNextButtonDisabled() ? 0.5 : 1\n          }}\n          onClick={goToNextWeek}\n          disabled={isNextButtonDisabled()}\n          aria-disabled={isNextButtonDisabled()}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"17\" viewBox=\"0 0 16 17\" fill=\"none\">\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M3.64645 1.80514C3.84171 1.60988 4.15829 1.60988 4.35355 1.80514L10.3536 7.80514C10.5488 8.0004 10.5488 8.31698 10.3536 8.51224L4.35355 14.5122C4.15829 14.7075 3.84171 14.7075 3.64645 14.5122C3.45118 14.317 3.45118 14.0004 3.64645 13.8051L9.29289 8.15869L3.64645 2.51224C3.45118 2.31698 3.45118 2.0004 3.64645 1.80514Z\" fill=\"#344054\" />\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M7.64645 1.80514C7.84171 1.60988 8.15829 1.60988 8.35355 1.80514L14.3536 7.80514C14.5488 8.0004 14.5488 8.31698 14.3536 8.51224L8.35355 14.5122C8.15829 14.7075 7.84171 14.7075 7.64645 14.5122C7.45118 14.317 7.45118 14.0004 7.64645 13.8051L13.2929 8.15869L7.64645 2.51224C7.45118 2.31698 7.45118 2.0004 7.64645 1.80514Z\" fill=\"#344054\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WeekNavigator;\n","import { fetchAPI } from \"./base-api\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\nexport const getJobsToApprove = async () => {\n    const endpoint = `/jobs/to-approve/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};\n\nexport const getApproveNotInvoice = async (year, week) => {\n    const endpoint = `/jobs/to-invoice/${year}/${week}/`;\n    const options = {\n        method: 'GET',\n    };\n    const url = new URL(`${API_BASE_URL}${endpoint}`);\n    return fetchAPI(url.toString(), options);\n};","// extracted by mini-css-extract-plugin\nexport default {\"heading\":\"approve-job_heading__NCGqc\",\"border\":\"approve-job_border__pYPi2\",\"borderBottom\":\"approve-job_borderBottom__73j1d\",\"cardBody\":\"approve-job_cardBody__igMLE\",\"jobDetailHeading\":\"approve-job_jobDetailHeading__RtqsC\",\"customLabel\":\"approve-job_customLabel__5r9ok\",\"text\":\"approve-job_text__VC0CF\",\"plannedTable\":\"approve-job_plannedTable__QV7Mr\",\"whiteTr\":\"approve-job_whiteTr__p+JS6\",\"active1\":\"approve-job_active1__LwXX9\",\"nonActive\":\"approve-job_nonActive__R5QLG\",\"borderRightNone\":\"approve-job_borderRightNone__kqdzx\",\"active2\":\"approve-job_active2__6XFPc\",\"active3\":\"approve-job_active3__q5Ndq\",\"lastRow\":\"approve-job_lastRow__0-xNd\",\"fixRateBox\":\"approve-job_fixRateBox__53ez4\",\"shiftBox\":\"approve-job_shiftBox__vzGQP\",\"clockIcon\":\"approve-job_clockIcon__RE0Ne\",\"moneyBox\":\"approve-job_moneyBox__l1MqE\",\"InputTextarea\":\"approve-job_InputTextarea__KagCa\",\"activeOutlineButton\":\"approve-job_activeOutlineButton__Gc88x\"};","import React, { useState } from 'react';\nimport { Button, Card, Col, Row } from 'react-bootstrap';\nimport { Calendar3, ClockHistory, X } from 'react-bootstrap-icons';\nimport { useQuery } from \"@tanstack/react-query\";\nimport clsx from 'clsx';\nimport { Checkbox } from 'primereact/checkbox';\nimport { Chip } from 'primereact/chip';\nimport { Image } from 'primereact/image';\nimport { InputText } from 'primereact/inputtext';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Sidebar } from 'primereact/sidebar';\nimport style from './approve-job.module.scss';\nimport { getApprovedJob } from '../../../../APIs/jobs-api';\nimport { formatDate } from '../../Pages/jobs/jobs-table';\n\nconst ApproveJob = ({ jobId = null, visible = false, setVisible }) => {\n    const [isOpenJobDetailsSection, setIsOpenJobDetailsSection] = useState(true);\n    const [isOpenPlannedVsActualSection, setIsOpenPlannedVsActualSection] = useState(true);\n    const [isOpenVariationSection, setIsOpenVariationSection] = useState(true);\n    const [isOpenJobTrackingSection, setIsOpenJobTrackingSection] = useState(true);\n    const [selectedColumn, setSelectedColumn] = useState(\"planned\");\n\n    const jobQuery = useQuery({\n        queryKey: [\"getApprovedJob\", jobId],\n        queryFn: () => getApprovedJob(jobId),\n        enabled: !!jobId,\n        retry: 1,\n    });\n    const job = jobQuery?.data;\n    console.log('job: ', job);\n\n    const formatTime = (timestamp) => {\n        const date = new Date(parseInt(timestamp) * 1000);\n        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    };\n\n    const formatHours = (hours) => {\n        const totalMinutes = hours * 60;\n        const h = Math.floor(totalMinutes / 60);\n        const m = Math.round(totalMinutes % 60);\n        return `${h}:${m.toString().padStart(2, '0')}`;\n    };\n\n    const calculateActualHours = () => {\n        if (job?.start && job?.finish) {\n            const start = parseInt(job.start) * 1000;\n            const finish = parseInt(job.finish) * 1000;\n            const diffMs = finish - start;\n            const hours = diffMs / (1000 * 60 * 60);\n            return formatHours(hours);\n        }\n        return \"0:00\";\n    };\n\n    const formatDateTimeIST = (timestamp) => {\n        const date = new Date(parseInt(timestamp) * 1000);\n        return date.toLocaleString('en-IN', {\n            timeZone: 'Asia/Kolkata',\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        });\n    };\n\n    const plannedHours = \"1:00\";\n    const plannedRate = 35.00;\n    const plannedSubtotal = parseInt(plannedHours.split(':')[0]) * plannedRate;\n    const actualHours = job?.spent_time || 0;\n    const actualSubtotal = (actualHours * plannedRate).toFixed(2);\n    const variation = 0;\n    const plannedTotal = (plannedSubtotal + variation).toFixed(2);\n    const actualTotal = (parseFloat(actualSubtotal) + variation).toFixed(2);\n\n    const mapEmbedUrl = job?.locations?.length > 0\n        ? `https://www.openstreetmap.org/export/embed.html?bbox=${parseFloat(job.locations[0].longitude) - 0.005},${parseFloat(job.locations[0].latitude) - 0.005},${parseFloat(job.locations[0].longitude) + 0.005},${parseFloat(job.locations[0].latitude) + 0.005}&marker=${job.locations[0].latitude},${job.locations[0].longitude}`\n        : null;\n\n    const handlePlannedRowClick = () => {\n        setSelectedColumn(\"planned\");\n    };\n\n    const handleActualRowClick = () => {\n        setSelectedColumn(\"actual\");\n    };\n\n    return (\n        <Sidebar visible={visible} position=\"right\" onHide={() => setVisible(false)} modal={false} dismissable={false} style={{ width: '702px' }}\n            content={({ closeIconRef, hide }) => (\n                <div className='create-sidebar d-flex flex-column'>\n                    <div className=\"d-flex align-items-center justify-content-between flex-shrink-0\" style={{ borderBottom: '1px solid #EAECF0', padding: '12px' }}>\n                        <div className=\"d-flex align-items-center gap-3\">\n                            <span className={style.heading}>{job?.id}-{job?.number}</span>\n                        </div>\n                        <span>\n                            <Button type=\"button\" className='text-button' ref={closeIconRef} onClick={(e) => hide(e)}>\n                                <X size={24} color='#667085' />\n                            </Button>\n                        </span>\n                    </div>\n\n                    <div className='modal-body' style={{ padding: '24px', height: 'calc(100vh - 68px - 80px)', overflow: 'auto' }}>\n\n                        <Card className={clsx(style.border, 'mb-4')}>\n                            <Card.Body className={clsx(style.borderBottom, style.cardBody, 'cursor-pointer')} onClick={() => setIsOpenJobDetailsSection(!isOpenJobDetailsSection)}>\n                                <div className='d-flex justify-content-between align-items-center'>\n                                    <h1 className='font-16 mb-0 font-weight-light' style={{ color: '#475467', fontWeight: 400 }}>Job Details</h1>\n                                    <button className='text-button p-0'>\n                                        {\n                                            isOpenJobDetailsSection ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.3536 7.35355C13.1583 7.54882 12.8417 7.54882 12.6464 7.35355L7 1.70711L1.35355 7.35355C1.15829 7.54881 0.841709 7.54881 0.646446 7.35355C0.451184 7.15829 0.451184 6.84171 0.646446 6.64645L6.64645 0.646446C6.84171 0.451184 7.15829 0.451184 7.35355 0.646446L13.3536 6.64645C13.5488 6.84171 13.5488 7.15829 13.3536 7.35355Z\" fill=\"#344054\" />\n                                            </svg> : <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.64645 4.64645C1.84171 4.45118 2.15829 4.45118 2.35355 4.64645L8 10.2929L13.6464 4.64645C13.8417 4.45118 14.1583 4.45118 14.3536 4.64645C14.5488 4.84171 14.5488 5.15829 14.3536 5.35355L8.35355 11.3536C8.15829 11.5488 7.84171 11.5488 7.64645 11.3536L1.64645 5.35355C1.45118 5.15829 1.45118 4.84171 1.64645 4.64645Z\" fill=\"#344054\" />\n                                            </svg>\n                                        }\n                                    </button>\n                                </div>\n                            </Card.Body>\n                            {\n                                isOpenJobDetailsSection &&\n                                <Card.Header className={clsx(style.background, 'border-0', style.borderBottom)}>\n                                    <h1 className={clsx(style.jobDetailHeading, 'mb-3')}>Link to Project</h1>\n\n                                    <label className={clsx(style.customLabel)}>Short Description</label>\n                                    <p className={clsx(style.text)}>{job?.short_description}</p>\n\n                                    <label className={clsx(style.customLabel)}>Long Description</label>\n                                    <p className={clsx(style.text)}>{job?.long_description}</p>\n\n                                    <Row>\n                                        <Col sm={6}>\n                                            <label className={clsx(style.customLabel)}>Client</label>\n                                            <p className={clsx(style.text)}>{job?.client?.name}</p>\n                                        </Col>\n                                        <Col sm={6}>\n                                            <label className={clsx(style.customLabel)}>Location</label>\n                                            <p className={clsx(style.text)}>{job?.location?.name}</p>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col sm={6}>\n                                            <label className={clsx(style.customLabel)}>Start Date</label>\n                                            <p className={clsx(style.text)}>{formatDate(job?.start_date)}</p>\n                                        </Col>\n                                        <Col sm={6}>\n                                            <label className={clsx(style.customLabel)}>End Date</label>\n                                            <p className={clsx(style.text)}>{formatDate(job?.end_date)}</p>\n                                        </Col>\n                                    </Row>\n                                </Card.Header>\n                            }\n                        </Card>\n\n                        <Card className={clsx(style.border, 'mb-4')}>\n                            <Card.Body className={clsx(style.borderBottom, style.cardBody, 'cursor-pointer')} onClick={() => setIsOpenPlannedVsActualSection(!isOpenPlannedVsActualSection)}>\n                                <div className='d-flex justify-content-between align-items-center'>\n                                    <h1 className='font-16 mb-0 font-weight-light' style={{ color: '#475467', fontWeight: 400 }}>Planned vs Actual</h1>\n                                    <button className='text-button p-0'>\n                                        {\n                                            isOpenPlannedVsActualSection ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.3536 7.35355C13.1583 7.54882 12.8417 7.54882 12.6464 7.35355L7 1.70711L1.35355 7.35355C1.15829 7.54881 0.841709 7.54881 0.646446 7.35355C0.451184 7.15829 0.451184 6.84171 0.646446 6.64645L6.64645 0.646446C6.84171 0.451184 7.15829 0.451184 7.35355 0.646446L13.3536 6.64645C13.5488 6.84171 13.5488 7.15829 13.3536 7.35355Z\" fill=\"#344054\" />\n                                            </svg> : <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.64645 4.64645C1.84171 4.45118 2.15829 4.45118 2.35355 4.64645L8 10.2929L13.6464 4.64645C13.8417 4.45118 14.1583 4.45118 14.3536 4.64645C14.5488 4.84171 14.5488 5.15829 14.3536 5.35355L8.35355 11.3536C8.15829 11.5488 7.84171 11.5488 7.64645 11.3536L1.64645 5.35355C1.45118 5.15829 1.45118 4.84171 1.64645 4.64645Z\" fill=\"#344054\" />\n                                            </svg>\n                                        }\n                                    </button>\n                                </div>\n                            </Card.Body>\n                            {\n                                isOpenPlannedVsActualSection &&\n                                <Card.Header className={clsx(style.background, 'border-0 d-flex justify-content-between px-0 py-0', style.borderBottom)}>\n                                    <table className={clsx('w-100', style.plannedTable)}>\n                                        <tr>\n                                            <th>\n                                                <div className='d-flex align-items-center gap-2'>\n                                                    <div className={style.fixRateBox}>Fix Rate</div>\n                                                    <div>\n                                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n                                                            <path d=\"M10 5C10.3452 5 10.625 5.27982 10.625 5.625V9.375H14.375C14.7202 9.375 15 9.65482 15 10C15 10.3452 14.7202 10.625 14.375 10.625H10.625V14.375C10.625 14.7202 10.3452 15 10 15C9.65482 15 9.375 14.7202 9.375 14.375V10.625H5.625C5.27982 10.625 5 10.3452 5 10C5 9.65482 5.27982 9.375 5.625 9.375H9.375V5.625C9.375 5.27982 9.65482 5 10 5Z\" fill=\"#667085\" />\n                                                        </svg>\n                                                    </div>\n                                                    <div className={style.shiftBox}>Shift</div>\n                                                </div>\n                                            </th>\n                                            <th className={selectedColumn === \"planned\" ? style.active1 : style.nonActive} onClick={handlePlannedRowClick}>\n                                                <div className='d-flex align-items-center gap-2'>\n                                                    <Checkbox checked={selectedColumn === \"planned\"} onChange={() => setSelectedColumn(selectedColumn === \"planned\" ? null : \"planned\")} />\n                                                    <label className={clsx(style.customLabel)}>Planned</label>\n                                                </div>\n                                            </th>\n                                            <th className={selectedColumn === \"actual\" ? style.active1 : ''} onClick={handleActualRowClick}>\n                                                <div className='d-flex justify-content-between'>\n                                                    <div className='d-flex align-items-center gap-2'>\n                                                        <Checkbox checked={selectedColumn === \"actual\"} onChange={() => setSelectedColumn(selectedColumn === \"actual\" ? null : \"actual\")} />\n                                                        <label className={clsx(style.customLabel)}>Actual</label>\n                                                    </div>\n                                                    <div className={style.clockIcon}>\n                                                        <ClockHistory color='#475467' size={16} />\n                                                    </div>\n                                                </div>\n                                            </th>\n                                        </tr>\n                                        <tr className={style.whiteTr}>\n                                            <td>\n                                                <span className='font-16' style={{ color: '#344054' }}>Start</span>\n                                            </td>\n                                            <td className={selectedColumn === \"planned\" ? style.active1 : style.nonActive} onClick={handlePlannedRowClick}>\n                                                <span className='font-14'>{job?.start ? formatTime(job.start) : \"N/A\"} | {formatDate(job?.start_date)}</span>\n                                            </td>\n                                            <td className={selectedColumn === \"actual\" ? style.active1 : ''} onClick={handleActualRowClick}>\n                                                <span className='font-14'>{job?.start ? formatTime(job.start) : \"N/A\"} | {formatDate(job?.start_date)}</span>\n                                            </td>\n                                        </tr>\n                                        <tr className={style.whiteTr}>\n                                            <td>\n                                                <span className='font-16' style={{ color: '#344054' }}>Finish</span>\n                                            </td>\n                                            <td className={selectedColumn === \"planned\" ? style.active1 : style.nonActive} onClick={handlePlannedRowClick}>\n                                                <span className='font-14'>{job?.finish ? formatTime(job.finish) : \"N/A\"} | {formatDate(job?.end_date)}</span>\n                                            </td>\n                                            <td className={selectedColumn === \"actual\" ? style.active1 : ''} onClick={handleActualRowClick}>\n                                                <span className='font-14'>{job?.finish ? formatTime(job.finish) : \"N/A\"} | {formatDate(job?.end_date)}</span>\n                                            </td>\n                                        </tr>\n                                        <tr className={style.whiteTr}>\n                                            <td>\n                                                <span className='font-16' style={{ color: '#344054' }}>Hours</span>\n                                            </td>\n                                            <td className={selectedColumn === \"planned\" ? style.active1 : style.nonActive} onClick={handlePlannedRowClick}>\n                                                <span className='font-14'>{plannedHours}</span>\n                                            </td>\n                                            <td className={selectedColumn === \"actual\" ? style.active1 : ''} onClick={handleActualRowClick}>\n                                                <span className='font-14'>{calculateActualHours()}</span>\n                                            </td>\n                                        </tr>\n                                        <tr className={style.whiteTr}>\n                                            <td>\n                                                <span className='font-16' style={{ color: '#344054' }}>Rate per hour</span>\n                                            </td>\n                                            <td colSpan={2} className={clsx(selectedColumn === \"planned\" ? style.active1 : style.active3, 'text-center', style.borderRightNone)}>\n                                                <div className={clsx(style.moneyBox)}>${plannedRate.toFixed(2)}</div>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <span className='font-16' style={{ color: '#344054' }}>Subtotal</span>\n                                            </td>\n                                            <td className={clsx(selectedColumn === \"planned\" ? style.active1 : style.nonActive, selectedColumn === \"planned\" ? style.active2 : '')} onClick={handlePlannedRowClick}>\n                                                <span className='font-14'>${plannedSubtotal.toFixed(2)}</span>\n                                            </td>\n                                            <td className={selectedColumn === \"actual\" ? style.active1 : ''} onClick={handleActualRowClick}>\n                                                <span className='font-14'>${actualSubtotal}</span>\n                                            </td>\n                                        </tr>\n                                        <tr className={style.whiteTr}>\n                                            <td>\n                                                <span className='font-16' style={{ color: '#344054' }}>Variation</span>\n                                            </td>\n                                            <td colSpan={2} className={clsx(selectedColumn === \"planned\" ? style.active1 : style.active3, 'text-center', selectedColumn !== \"planned\" ? \"\" : style.borderRightNone)}>\n                                                <div className={clsx(style.moneyBox)}>${variation.toFixed(2)}</div>\n                                            </td>\n                                        </tr>\n                                        <tr className={clsx(style.lastRow)}>\n                                            <td>\n                                                <span className='font-16' style={{ color: '#344054' }}>Total</span>\n                                            </td>\n                                            <td className={clsx(selectedColumn === \"planned\" ? style.active1 : style.nonActive, selectedColumn === \"planned\" ? style.active2 : '')} onClick={handlePlannedRowClick}>\n                                                <Button className={clsx(\"outline-button px-3 py-1 font-14 mx-auto gap-2\", selectedColumn === \"planned\" ? style.activeOutlineButton : \"\")}>\n                                                    ${plannedTotal}\n                                                    {\n                                                        selectedColumn === \"planned\" ?\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" fill=\"none\">\n                                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M0 5C0 4.65482 0.279822 4.375 0.625 4.375L7.86612 4.375L5.18306 1.69194C4.93898 1.44786 4.93898 1.05214 5.18306 0.808058C5.42714 0.56398 5.82286 0.56398 6.06694 0.808058L9.81694 4.55806C10.061 4.80213 10.061 5.19786 9.81694 5.44194L6.06694 9.19194C5.82286 9.43602 5.42714 9.43602 5.18306 9.19194C4.93898 8.94786 4.93898 8.55213 5.18306 8.30806L7.86612 5.625H0.625C0.279822 5.625 0 5.34518 0 5Z\" fill=\"white\" />\n                                                            </svg> :\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"10\" viewBox=\"0 0 11 10\" fill=\"none\">\n                                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M0.5 5C0.5 4.65482 0.779822 4.375 1.125 4.375L8.36612 4.375L5.68306 1.69194C5.43898 1.44786 5.43898 1.05214 5.68306 0.808058C5.92714 0.56398 6.32286 0.56398 6.56694 0.808058L10.3169 4.55806C10.561 4.80213 10.561 5.19786 10.3169 5.44194L6.56694 9.19194C6.32286 9.43602 5.92714 9.43602 5.68306 9.19194C5.43898 8.94786 5.43898 8.55213 5.68306 8.30806L8.36612 5.625H1.125C0.779822 5.625 0.5 5.34518 0.5 5Z\" fill=\"#344054\" />\n                                                            </svg>\n                                                    }\n                                                </Button>\n                                            </td>\n                                            <td className={selectedColumn === \"actual\" ? style.active1 : ''} onClick={handleActualRowClick}>\n                                                <Button className={clsx(\"outline-button px-3 py-1 font-14 mx-auto gap-2\", selectedColumn === \"actual\" ? style.activeOutlineButton : \"\")}>\n                                                    ${actualTotal}\n                                                    {\n                                                        selectedColumn === \"actual\" ?\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" fill=\"none\">\n                                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M0 5C0 4.65482 0.279822 4.375 0.625 4.375L7.86612 4.375L5.18306 1.69194C4.93898 1.44786 4.93898 1.05214 5.18306 0.808058C5.42714 0.56398 5.82286 0.56398 6.06694 0.808058L9.81694 4.55806C10.061 4.80213 10.061 5.19786 9.81694 5.44194L6.06694 9.19194C5.82286 9.43602 5.42714 9.43602 5.18306 9.19194C4.93898 8.94786 4.93898 8.55213 5.18306 8.30806L7.86612 5.625H0.625C0.279822 5.625 0 5.34518 0 5Z\" fill=\"white\" />\n                                                            </svg> :\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"10\" viewBox=\"0 0 11 10\" fill=\"none\">\n                                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M0.5 5C0.5 4.65482 0.779822 4.375 1.125 4.375L8.36612 4.375L5.68306 1.69194C5.43898 1.44786 5.43898 1.05214 5.68306 0.808058C5.92714 0.56398 6.32286 0.56398 6.56694 0.808058L10.3169 4.55806C10.561 4.80213 10.561 5.19786 10.3169 5.44194L6.56694 9.19194C6.32286 9.43602 5.92714 9.43602 5.68306 9.19194C5.43898 8.94786 5.43898 8.55213 5.68306 8.30806L8.36612 5.625H1.125C0.779822 5.625 0.5 5.34518 0.5 5Z\" fill=\"#344054\" />\n                                                            </svg>\n                                                    }\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    </table>\n                                </Card.Header>\n                            }\n                        </Card>\n\n                        <Card className={clsx(style.border, 'mb-4')}>\n                            <Card.Body className={clsx(style.borderBottom, style.cardBody, 'cursor-pointer')} onClick={() => setIsOpenVariationSection(!isOpenVariationSection)}>\n                                <div className='d-flex justify-content-between align-items-center'>\n                                    <h1 className='font-16 mb-0 font-weight-light' style={{ color: '#475467', fontWeight: 400 }}>Variation</h1>\n                                    <button className='text-button p-0'>\n                                        {\n                                            isOpenVariationSection ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.3536 7.35355C13.1583 7.54882 12.8417 7.54882 12.6464 7.35355L7 1.70711L1.35355 7.35355C1.15829 7.54881 0.841709 7.54881 0.646446 7.35355C0.451184 7.15829 0.451184 6.84171 0.646446 6.64645L6.64645 0.646446C6.84171 0.451184 7.15829 0.451184 7.35355 0.646446L13.3536 6.64645C13.5488 6.84171 13.5488 7.15829 13.3536 7.35355Z\" fill=\"#344054\" />\n                                            </svg> : <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.64645 4.64645C1.84171 4.45118 2.15829 4.45118 2.35355 4.64645L8 10.2929L13.6464 4.64645C13.8417 4.45118 14.1583 4.45118 14.3536 4.64645C14.5488 4.84171 14.5488 5.15829 14.3536 5.35355L8.35355 11.3536C8.15829 11.5488 7.84171 11.5488 7.64645 11.3536L1.64645 5.35355C1.45118 5.15829 1.45118 4.84171 1.64645 4.64645Z\" fill=\"#344054\" />\n                                            </svg>\n                                        }\n                                    </button>\n                                </div>\n                            </Card.Body>\n                            {\n                                isOpenVariationSection &&\n                                <Card.Header className={clsx(style.background, 'border-0', style.borderBottom)}>\n                                    <div className='form-group mb-3 w-100'>\n                                        <label className={clsx(style.customLabel)}>Amount</label>\n                                        <InputText className={clsx('w-100', style.InputText)} />\n                                    </div>\n\n                                    <div className='form-group mb-3 w-100'>\n                                        <label className={clsx(style.customLabel)}>Reason</label>\n                                        <InputTextarea className={clsx('w-100', style.InputTextarea)} rows={3} placeholder='Enter a reason...' />\n                                    </div>\n                                </Card.Header>\n                            }\n                        </Card>\n\n                        <Card className={clsx(style.border, 'mb-4')}>\n                            <Card.Body className={clsx(style.borderBottom, style.cardBody, 'cursor-pointer')} onClick={() => setIsOpenJobTrackingSection(!isOpenJobTrackingSection)}>\n                                <div className='d-flex justify-content-between align-items-center'>\n                                    <h1 className='font-16 mb-0 font-weight-light' style={{ color: '#475467', fontWeight: 400 }}>Job Tracking</h1>\n                                    <button className='text-button p-0'>\n                                        {\n                                            isOpenJobTrackingSection ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.3536 7.35355C13.1583 7.54882 12.8417 7.54882 12.6464 7.35355L7 1.70711L1.35355 7.35355C1.15829 7.54881 0.841709 7.54881 0.646446 7.35355C0.451184 7.15829 0.451184 6.84171 0.646446 6.64645L6.64645 0.646446C6.84171 0.451184 7.15829 0.451184 7.35355 0.646446L13.3536 6.64645C13.5488 6.84171 13.5488 7.15829 13.3536 7.35355Z\" fill=\"#344054\" />\n                                            </svg> : <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n                                                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.64645 4.64645C1.84171 4.45118 2.15829 4.45118 2.35355 4.64645L8 10.2929L13.6464 4.64645C13.8417 4.45118 14.1583 4.45118 14.3536 4.64645C14.5488 4.84171 14.5488 5.15829 14.3536 5.35355L8.35355 11.3536C8.15829 11.5488 7.84171 11.5488 7.64645 11.3536L1.64645 5.35355C1.45118 5.15829 1.45118 4.84171 1.64645 4.64645Z\" fill=\"#344054\" />\n                                            </svg>\n                                        }\n                                    </button>\n                                </div>\n                            </Card.Body>\n                            {\n                                isOpenJobTrackingSection &&\n                                <Card.Header className={clsx(style.background, 'border-0', style.borderBottom)}>\n                                    {mapEmbedUrl ? (\n                                        <>\n                                            <label className={clsx(style.customLabel)}>Job Location</label>\n                                            <iframe\n                                                width=\"100%\"\n                                                height=\"300\"\n                                                frameBorder=\"0\"\n                                                style={{ border: 0 }}\n                                                src={mapEmbedUrl}\n                                                allowFullScreen\n                                            ></iframe>\n                                            {/* Display the timestamps of the location entries */}\n                                            {job?.locations?.length > 0 && (\n                                                <>\n                                                    <label className={clsx(style.customLabel, 'mt-3')}>Location Tracking Timestamps (IST)</label>\n                                                    {job.locations.map((loc, index) => (\n                                                        <p key={index} className={clsx(style.text)}>\n                                                            Recorded at: {formatDateTimeIST(loc.date)}\n                                                        </p>\n                                                    ))}\n                                                </>\n                                            )}\n                                        </>\n                                    ) : (\n                                        <p className={clsx(style.text)}>Location map unavailable: No coordinates provided.</p>\n                                    )}\n                                </Card.Header>\n                            }\n                        </Card>\n\n                    </div>\n\n                    <div className='modal-footer d-flex align-items-center justify-content-end gap-3' style={{ padding: '16px 24px', borderTop: \"1px solid var(--Gray-200, #EAECF0)\", height: '72px' }}>\n                        <Button type='button' onClick={(e) => { e.stopPropagation(); setVisible(false); }} className='outline-button'>Cancel</Button>\n                        <Button type='button' onClick={() => { }} className='solid-button' style={{ minWidth: '75px' }}>Edit {false && <ProgressSpinner\n                            style={{ width: \"20px\", height: \"20px\", color: \"#fff\" }}\n                        />}</Button>\n                    </div>\n                </div>\n            )}\n        ></Sidebar>\n    );\n};\n\nexport default ApproveJob;","import React, { useCallback, useEffect, useState } from 'react';\nimport { Link45deg, Person, Repeat } from 'react-bootstrap-icons';\nimport { useQuery } from '@tanstack/react-query';\nimport clsx from 'clsx';\nimport { Chip } from 'primereact/chip';\nimport { Column } from 'primereact/column';\nimport { ColumnGroup } from 'primereact/columngroup';\nimport { DataTable } from 'primereact/datatable';\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Row } from 'primereact/row';\nimport { Tag } from 'primereact/tag';\nimport { toast } from 'sonner';\nimport style from './approval.module.scss';\nimport WeekNavigator from './week-navigator';\nimport { getJobsToApprove, getApproveNotInvoice } from '../../../../APIs/approval-api';\nimport { useTrialHeight } from '../../../../app/providers/trial-height-provider';\nimport { FallbackImage } from '../../../../ui/image-with-fallback/image-avatar';\nimport ApproveJob from '../../features/approve-job/approve-job';\n\nconst ApprovalTable = React.memo(() => {\n    const { trialHeight } = useTrialHeight();\n    const [selectedApprovals, setSelectedApprovals] = useState(null);\n    const [selectedInvoiceApprovals, setSelectedInvoiceApprovals] = useState(null);\n    const [weekData, setSelectedPeriod] = useState({\n        week: null,\n        year: null,\n        startDate: null,\n        endDate: null\n    });\n\n    const [isApproveJobVisible, setIsApproveJobVisible] = useState(false);\n    const [selectedJobId, setSelectedJobId] = useState(null);\n\n    const handleWeekChange = useCallback((periodData) => {\n        setSelectedPeriod(periodData);\n    }, []);\n\n    const {\n        data: approveData = [],\n        isLoading: isLoadingApprove,\n        error: approveError\n    } = useQuery({\n        queryKey: ['jobsToApprove'],\n        queryFn: getJobsToApprove,\n        refetchOnWindowFocus: false,\n        onError: (error) => {\n            toast.error('Failed to load jobs to approve');\n            console.error('Error loading jobs to approve:', error);\n        }\n    });\n\n    const fetchInvoiceData = React.useCallback(() => {\n        if (!weekData?.week || !weekData?.year) {\n            return Promise.resolve([]);\n        }\n        return getApproveNotInvoice(weekData.year, weekData.week);\n    }, [weekData?.week, weekData?.year]);\n\n    const {\n        data: invoiceData = [],\n        isLoading: isLoadingInvoice,\n        error: invoiceError\n    } = useQuery({\n        queryKey: ['jobsToInvoice', weekData?.week, weekData?.year],\n        queryFn: fetchInvoiceData,\n        enabled: !!weekData?.week && !!weekData?.year,\n        refetchOnWindowFocus: false,\n        onError: (error) => {\n            toast.error('Failed to load approved jobs for invoicing');\n            console.error('Error loading jobs to invoice:', error);\n        }\n    });\n\n    const paymentBody = (rowData) => {\n        const paymentType = rowData.time_type === \"1\" ? \"Hours\" : \"Fix\";\n        return (\n            <div className='d-flex justify-content-center align-items-center' style={{ gap: '10px' }}>\n                <div className={`${style.payment} ${paymentType === 'Hours' ? style.paymentHours : style.paymentFix}`}>\n                    {paymentType}\n                </div>\n                <Repeat color='#158ECC' />\n            </div>\n        );\n    };\n\n    const timeBody = (rowData) => {\n        const timeType = rowData.type === \"2\" ? \"TimeFrame\" : \"TimeTracker\";\n        return (\n            <div className={`d-flex align-items-center show-on-hover`}>\n                <div className={`${style.time} ${timeType === 'TimeFrame' ? style.frame : style.tracker}`}>\n                    {timeType}\n                </div>\n            </div>\n        );\n    };\n\n    const clientHeader = () => {\n        return <div className='d-flex align-items-center'>\n            Client\n            <small>A→Z</small>\n        </div>;\n    };\n\n    const clientBody = (rowData) => {\n        return <div className='d-flex align-items-center'>\n            <div className={`d-flex justify-content-center align-items-center ${style.clientImg}`}>\n                <FallbackImage\n                    has_photo={rowData.client?.has_photo}\n                    photo={rowData.client?.photo}\n                    is_business={true}\n                    size={16}\n                />\n            </div>\n            {rowData.client?.name || 'N/A'}\n        </div>;\n    };\n\n    const nameBody = (rowData) => {\n        const fullName = `${rowData.worker?.first_name || ''} ${rowData.worker?.last_name || ''}`.trim();\n        const initials = fullName ? fullName.split(' ').map(word => word[0]).join('') : 'N/A';\n\n        return <div className='d-flex align-items-center'>\n            <div className={`d-flex justify-content-center align-items-center ${style.clientName}`}>\n                {rowData.worker?.has_photo ? (\n                    <FallbackImage\n                        has_photo={rowData.worker?.has_photo}\n                        photo={rowData.worker?.photo}\n                        is_business={false}\n                        size={16}\n                    />\n                ) : initials}\n            </div>\n            {fullName || 'N/A'}\n        </div>;\n    };\n\n    const actionBody = (rowData) => {\n        return (\n            <div className='d-flex justify-content-center gap-2'>\n                <Chip\n                    className={`status ${style.finishedAction} cursor-pointer`}\n                    label=\"Approve\"\n                    onClick={() => handleApprove(rowData.id)}\n                />\n            </div>\n        );\n    };\n\n    const statusBody = () => {\n        return <Chip className={`status ${style.approved}`} label=\"Approved\" />;\n    };\n\n    const handleApprove = React.useCallback((id) => {\n        setSelectedJobId(id);\n        setIsApproveJobVisible(true);\n    }, []);\n\n\n    const formatDate = React.useCallback((dateString) => {\n        if (!dateString) return 'N/A';\n\n        try {\n            const date = new Date(dateString);\n            const day = String(date.getDate()).padStart(2, '0');\n            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n            const month = months[date.getMonth()];\n\n            const year = date.getFullYear();\n            return `${day} ${month} ${year}`;\n        } catch (error) {\n            console.error('Error formatting date:', error);\n            return dateString || 'N/A';\n        }\n    }, []);\n\n    const linkToBody = (rowData) => {\n        return rowData.project ? (\n            <div className='d-flex align-items-center' style={{ gap: '10px' }}>\n                {rowData.project.number}\n                <Link45deg color='#3366CC' />\n            </div>\n        ) : 'N/A';\n    };\n\n    const totalBody = (rowData) => {\n        return <Tag value={rowData.total} style={{ border: \"2px solid var(--Orange-200, #FFE0BC)\", background: '#FFF7EE', color: '#FFB258', fontSize: '12px', fontWeight: 500 }} rounded></Tag>;\n    };\n\n    const thisWeekTotalBody = (rowData) => {\n        return <span style={{ fontWeight: 'bold' }}>{rowData.total}</span>;\n    };\n\n    const header = (\n        <div className=\"d-flex align-items-center justify-content-end gap-2\" style={{ position: 'relative' }}>\n            <p style={{ color: '#344054', fontWeight: 400 }} className='m-0 font-14'>Review & Approve</p>\n            {isLoadingApprove && <ProgressSpinner style={{ width: '20px', height: '20px', marginLeft: '8px', position: 'absolute', right: '-40px' }} />}\n        </div>\n    );\n\n    const header2 = (\n        <div className=\"d-flex align-items-center justify-content-between gap-2\" style={{ position: 'relative' }}>\n            <p style={{ color: '#344054', fontWeight: 500 }} className='m-0 font-14'>\n                {weekData?.week && weekData?.year\n                    ? `Week ${weekData.week}, ${weekData.year} - Approved Jobs (Not Invoiced)`\n                    : 'Approved Jobs - Not Invoiced'}\n            </p>\n            {isLoadingInvoice && <ProgressSpinner style={{ width: '20px', height: '20px', marginRight: '8px', position: 'absolute', right: '-40px' }} />}\n        </div>\n    );\n\n    const approveTotal = React.useMemo(() => {\n        if (!approveData || approveData.length === 0) return 0;\n        return approveData.reduce((sum, job) => sum + parseFloat(job.total || 0), 0);\n    }, [approveData]);\n\n    const invoiceTotal = React.useMemo(() => {\n        if (!invoiceData || invoiceData.length === 0) return 0;\n        return invoiceData.reduce((sum, job) => sum + parseFloat(job.total || 0), 0);\n    }, [invoiceData]);\n\n    const approveFooterGroup = React.useMemo(() => {\n        const formattedTotal = approveTotal.toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        });\n\n        return (\n            <ColumnGroup>\n                <Row className='w-100'>\n                    <Column colSpan={12} />\n                    <Column\n                        footer={`Total= $${formattedTotal}`}\n                        footerStyle={{ position: 'sticky', right: 0 }}\n                    />\n                </Row>\n            </ColumnGroup>\n        );\n    }, [approveTotal]);\n\n    const invoiceFooterGroup = React.useMemo(() => {\n        const formattedTotal = invoiceTotal.toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        });\n\n        return (\n            <ColumnGroup>\n                <Row className='w-100'>\n                    <Column colSpan={12} />\n                    <Column\n                        footer={`Total= $${formattedTotal}`}\n                        footerStyle={{ position: 'sticky', right: 0 }}\n                    />\n                </Row>\n            </ColumnGroup>\n        );\n    }, [invoiceTotal]);\n\n    useEffect(() => {\n        if (approveError) {\n            toast.error(`Error loading jobs to approve: ${approveError.message || 'Please try again later'}`);\n        }\n        if (invoiceError) {\n            toast.error(`Error loading jobs to invoice: ${invoiceError.message || 'Please try again later'}`);\n        }\n    }, [approveError, invoiceError]);\n\n    return (\n        <>\n            {/* Jobs to Approve DataTable */}\n            <DataTable\n                value={approveData}\n                header={header}\n                footerColumnGroup={approveFooterGroup}\n                scrollable\n                selectionMode={'checkbox'}\n                removableSort\n                columnResizeMode=\"expand\"\n                resizableColumns\n                showGridlines\n                size={'large'}\n                scrollHeight=\"calc(50vh - 150px)\"\n                className=\"border-0\"\n                selection={selectedApprovals}\n                onSelectionChange={(e) => setSelectedApprovals(e.value)}\n                emptyMessage=\"No jobs to approve\"\n                loading={isLoadingApprove}\n                loadingIcon={<></>}\n            >\n                <Column selectionMode=\"multiple\" bodyClassName={'show-on-hover'} headerStyle={{ width: '3rem' }} frozen></Column>\n                <Column field=\"number\" header=\"Job ID\" style={{ minWidth: '100px' }} frozen sortable></Column>\n                <Column field=\"time_type\" header=\"Payment Type\" body={paymentBody} style={{ minWidth: '130px' }} frozen sortable></Column>\n                <Column field=\"type\" header=\"Time\" body={timeBody} style={{ minWidth: '118px' }} bodyClassName={`${style.shadowRight}`} headerClassName={`${style.shadowRight}`} frozen></Column>\n                <Column\n                    field=\"submitted\"\n                    header=\"Submitted\"\n                    style={{ minWidth: '122px' }}\n                    sortable\n                    body={(rowData) => formatDate(rowData.submitted)}\n                ></Column>\n                <Column field=\"short_description\" header=\"Job Reference\" style={{ minWidth: '270px' }}></Column>\n                <Column field=\"client.name\" header={clientHeader} body={clientBody} style={{ minWidth: '162px' }}></Column>\n                <Column field=\"project.number\" header=\"Linked To Project\" body={linkToBody} style={{ minWidth: '105px' }}></Column>\n                <Column field=\"worker.first_name\" header=\"Worker\" body={nameBody} style={{ minWidth: '205px' }}></Column>\n                <Column field=\"spent_time\" header=\"Spent Time\" style={{ minWidth: '105px' }} sortable></Column>\n                <Column field=\"real_total\" header=\"Real Total\" body={thisWeekTotalBody} style={{ minWidth: '105px' }} sortable></Column>\n                <Column field=\"total\" header=\"Total\" body={totalBody} style={{ minWidth: '105px' }} sortable></Column>\n                <Column field=\"id\" header=\"Actions\" body={actionBody} style={{ minWidth: '120px' }} bodyClassName={`${style.shadowLeft}`} headerClassName={clsx(`${style.shadowLeft}`, 'd-flex justify-content-center')} frozen alignFrozen=\"right\"></Column>\n            </DataTable>\n\n            <div className=\"topbar d-flex justify-content-center text-center w-100\" style={{ padding: '4px 0px', position: 'relative', height: '48px', borderTop: '1px solid #dedede', borderBottom: '0px solid #dedede', background: '#F9FAFB' }}>\n                <WeekNavigator onWeekChange={handleWeekChange} />\n            </div>\n\n            {/* Jobs to Invoice DataTable */}\n            <DataTable\n                value={invoiceData || []}\n                header={header2}\n                footerColumnGroup={invoiceFooterGroup}\n                scrollable\n                selectionMode={'checkbox'}\n                removableSort\n                columnResizeMode=\"expand\"\n                resizableColumns\n                showGridlines\n                size={'large'}\n                scrollHeight={`calc(50vh - 150px - ${trialHeight}px)`}\n                className=\"border-0\"\n                selection={selectedInvoiceApprovals}\n                onSelectionChange={(e) => setSelectedInvoiceApprovals(e.value)}\n                emptyMessage=\"No approved jobs waiting to be invoiced\"\n                loading={isLoadingInvoice}\n                loadingIcon={<></>}\n            >\n                <Column selectionMode=\"multiple\" bodyClassName={'show-on-hover'} headerStyle={{ width: '3rem' }} frozen></Column>\n                <Column field=\"number\" header=\"Job ID\" style={{ minWidth: '100px' }} frozen sortable></Column>\n                <Column field=\"time_type\" header=\"Payment Type\" body={paymentBody} style={{ minWidth: '130px' }} frozen sortable></Column>\n                <Column field=\"type\" header=\"Time\" body={timeBody} style={{ minWidth: '118px' }} bodyClassName={`${style.shadowRight}`} headerClassName={`${style.shadowRight}`} frozen></Column>\n                <Column\n                    field=\"submitted\"\n                    header=\"Submitted\"\n                    style={{ minWidth: '122px' }}\n                    sortable\n                    body={(rowData) => formatDate(rowData.submitted)}\n                ></Column>\n                <Column field=\"short_description\" header=\"Job Reference\" style={{ minWidth: '270px' }}></Column>\n                <Column field=\"client.name\" header={clientHeader} body={clientBody} style={{ minWidth: '162px' }}></Column>\n                <Column field=\"project.number\" header=\"Linked To Project\" body={linkToBody} style={{ minWidth: '105px' }}></Column>\n                <Column field=\"worker.first_name\" header=\"Worker\" body={nameBody} style={{ minWidth: '205px' }}></Column>\n                <Column field=\"spent_time\" header=\"Spent Time\" style={{ minWidth: '105px' }} sortable></Column>\n                <Column field=\"real_total\" header=\"Real Total\" body={thisWeekTotalBody} style={{ minWidth: '105px' }} sortable></Column>\n                <Column field=\"total\" header=\"Total\" body={totalBody} style={{ minWidth: '105px' }} sortable></Column>\n                <Column field=\"id\" header=\"Status\" body={statusBody} style={{ minWidth: '120px' }} bodyClassName={clsx(`${style.shadowLeft}`, 'text-center')} headerClassName={clsx(`${style.shadowLeft}`, 'd-flex justify-content-center')} frozen alignFrozen=\"right\"></Column>\n            </DataTable>\n\n            <ApproveJob visible={isApproveJobVisible} setVisible={setIsApproveJobVisible} jobId={selectedJobId} />\n        </>\n    );\n});\n\nexport default ApprovalTable;","import React from 'react';\nimport { Filter } from 'react-bootstrap-icons';\nimport { Helmet } from 'react-helmet-async';\nimport ApprovalTable from './approval-table';\nimport style from './approval.module.scss';\n\nconst ApprovalPage = () => {\n    const handleSearch = () => { };\n\n    return (\n        <div className='approval-page'>\n            <Helmet>\n                <title>MeMate - Approval</title>\n            </Helmet>\n            <div className=\"topbar\" style={{ padding: '4px 32px 4px 23px', position: 'relative', height: '48px' }}>\n                <div className='left-side d-flex align-items-center' style={{ gap: '16px' }}>\n                    <div className='filtered-box'>\n                        <button className={`${style.filterBox}`}><Filter size={20} /></button>\n                    </div>\n                    <div className=\"searchBox\" style={{ position: 'relative' }}>\n                        <div style={{ position: 'absolute', top: '2px', left: '6px' }}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\">\n                                <path d=\"M14.6777 12.9299C15.6661 11.5841 16.25 9.92275 16.25 8.125C16.25 3.63769 12.6123 0 8.125 0C3.63769 0 0 3.63769 0 8.125C0 12.6123 3.63769 16.25 8.125 16.25C9.92323 16.25 11.585 15.6658 12.9309 14.6769L12.9299 14.6777C12.9667 14.7277 13.0078 14.7756 13.053 14.8208L17.8661 19.6339C18.3543 20.122 19.1457 20.122 19.6339 19.6339C20.122 19.1457 20.122 18.3543 19.6339 17.8661L14.8208 13.053C14.7756 13.0078 14.7277 12.9667 14.6777 12.9299ZM15 8.125C15 11.922 11.922 15 8.125 15C4.32804 15 1.25 11.922 1.25 8.125C1.25 4.32804 4.32804 1.25 8.125 1.25C11.922 1.25 15 4.32804 15 8.125Z\" fill=\"#98A2B3\" />\n                            </svg>\n                        </div>\n                        <input type=\"text\" placeholder=\"Search\" onChange={handleSearch} className=\"border search-resource\" style={{ borderRadius: '4px', width: '184px', border: '1px solid #D0D5DD', color: '#424242', paddingLeft: '36px', fontSize: '14px', height: '32px' }} />\n                    </div>\n                </div>\n\n                <div className=\"featureName d-flex align-items-center\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)' }}>\n                    <h1 className=\"title p-0 mt-1\">Approval</h1>\n                </div>\n\n                <div className=\"right-side d-flex align-items-center\" style={{ gap: '8px' }}>\n                    <h1 className={`${style.total} mb-0`}>Total</h1>\n                    <div className={`${style.totalCount}`}>30 Jobs</div>\n                </div>\n            </div>\n\n            <ApprovalTable />\n        </div>\n    );\n};\n\nexport default ApprovalPage;","// extracted by mini-css-extract-plugin\nexport default {\"clientImg\":\"image-avatar_clientImg__-nnRU\"};","import React, { useState } from 'react';\nimport { Building, Person } from 'react-bootstrap-icons';\nimport style from './image-avatar.module.scss';\n\nconst ImageAvatar = ({ has_photo, photo, is_business }) => {\n    const [imgError, setImgError] = useState(false);\n    const Icon = is_business ? Building : Person;\n\n    return (\n        <div className={`d-flex justify-content-center align-items-center ${style.clientImg} ${is_business ? \"\" : \"rounded-circle\"}`} style={{ overflow: 'hidden' }}>\n            {has_photo && photo && !imgError ? (\n                <img src={photo} alt=\"client avatar\" className=\"w-100\" onError={() => setImgError(true)} />\n            ) : (\n                <Icon color=\"#667085\" />\n            )}\n        </div>\n    );\n};\n\nexport const FallbackImage = ({ has_photo, photo, is_business, size }) => {\n    const [imgError, setImgError] = useState(false);\n    const Icon = is_business ? Building : Person;\n\n    return <>\n        {has_photo && photo && !imgError ? (\n            <img src={photo} alt=\"client avatar\" className=\"w-100\" onError={() => setImgError(true)} />\n        ) : (\n            <Icon color=\"#667085\" size={size}/>\n        )}\n    </>;\n};\n\nexport default ImageAvatar;\n"],"names":["_ref","onWeekChange","currentWeek","setCurrentWeek","useState","currentYear","setCurrentYear","Date","getFullYear","weekInfo","setWeekInfo","start","end","currentYearNum","years","Array","from","length","_","i","getWeekNumber","date","firstDayOfYear","pastDaysOfYear","Math","ceil","getDay","getWeekDates","weekNumber","year","daysOffset","formatDate","toLocaleDateString","day","month","useEffect","today","weekNum","updateWeekDates","week","startDate","endDate","isNextButtonDisabled","currentDate","currentWeekNum","_jsxs","className","style","gap","position","children","Dropdown","right","Toggle","as","Button","clsx","button","_jsx","Calendar3","size","color","Menu","map","Item","onClick","selectedYear","parseInt","handleYearSelect","active","background","cursor","opacity","goToPreviousWeek","xmlns","width","height","viewBox","fill","fillRule","clipRule","d","goToNextWeek","disabled","API_BASE_URL","process","getJobsToApprove","async","url","URL","fetchAPI","toString","method","_job$locations","jobId","visible","setVisible","isOpenJobDetailsSection","setIsOpenJobDetailsSection","isOpenPlannedVsActualSection","setIsOpenPlannedVsActualSection","isOpenVariationSection","setIsOpenVariationSection","isOpenJobTrackingSection","setIsOpenJobTrackingSection","selectedColumn","setSelectedColumn","jobQuery","useQuery","queryKey","queryFn","getApprovedJob","enabled","retry","job","data","console","log","formatTime","timestamp","toLocaleTimeString","hour","minute","calculateActualHours","finish","hours","totalMinutes","floor","round","padStart","formatHours","plannedHours","plannedSubtotal","split","actualSubtotal","spent_time","toFixed","plannedTotal","actualTotal","parseFloat","mapEmbedUrl","locations","longitude","latitude","handlePlannedRowClick","handleActualRowClick","Sidebar","onHide","modal","dismissable","content","_ref2","_job$client","_job$location","_job$locations2","closeIconRef","hide","borderBottom","padding","heading","id","number","type","ref","e","X","overflow","Card","border","Body","cardBody","fontWeight","Header","jobDetailHeading","customLabel","text","short_description","long_description","Row","Col","sm","client","name","location","start_date","end_date","plannedTable","fixRateBox","shiftBox","active1","nonActive","Checkbox","checked","onChange","clockIcon","ClockHistory","whiteTr","colSpan","active3","borderRightNone","moneyBox","active2","lastRow","activeOutlineButton","InputText","InputTextarea","rows","placeholder","_Fragment","frameBorder","src","allowFullScreen","loc","index","toLocaleString","timeZone","second","hour12","borderTop","stopPropagation","minWidth","React","trialHeight","useTrialHeight","selectedApprovals","setSelectedApprovals","selectedInvoiceApprovals","setSelectedInvoiceApprovals","weekData","setSelectedPeriod","isApproveJobVisible","setIsApproveJobVisible","selectedJobId","setSelectedJobId","handleWeekChange","useCallback","periodData","approveData","isLoading","isLoadingApprove","error","approveError","refetchOnWindowFocus","onError","toast","fetchInvoiceData","getApproveNotInvoice","Promise","resolve","invoiceData","isLoadingInvoice","invoiceError","paymentBody","rowData","paymentType","time_type","payment","paymentHours","paymentFix","Repeat","timeBody","timeType","time","frame","tracker","clientHeader","clientBody","_rowData$client","_rowData$client2","_rowData$client3","clientImg","FallbackImage","has_photo","photo","is_business","nameBody","_rowData$worker","_rowData$worker2","_rowData$worker3","_rowData$worker4","_rowData$worker5","fullName","worker","first_name","last_name","trim","initials","word","join","clientName","handleApprove","dateString","String","getDate","getMonth","linkToBody","project","Link45deg","totalBody","Tag","value","total","fontSize","rounded","thisWeekTotalBody","header","ProgressSpinner","marginLeft","header2","marginRight","approveTotal","reduce","sum","invoiceTotal","approveFooterGroup","formattedTotal","minimumFractionDigits","maximumFractionDigits","ColumnGroup","Column","footer","footerStyle","invoiceFooterGroup","message","DataTable","footerColumnGroup","scrollable","selectionMode","removableSort","columnResizeMode","resizableColumns","showGridlines","scrollHeight","selection","onSelectionChange","emptyMessage","loading","loadingIcon","bodyClassName","headerStyle","frozen","field","sortable","body","shadowRight","headerClassName","submitted","Chip","finishedAction","label","shadowLeft","alignFrozen","WeekNavigator","statusBody","approved","ApproveJob","ApprovalPage","Helmet","filterBox","Filter","top","left","handleSearch","borderRadius","paddingLeft","transform","totalCount","ApprovalTable","imgError","setImgError","Icon","Building","Person","alt"],"sourceRoot":""}