{"version":3,"file":"static/js/8941.682cbc8b.chunk.js","mappings":"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","sources":["APIs/SalesApi.js","webpack://memateapp/./src/ui/send-email-2/send-email.module.scss?3bd9","ui/send-email-2/send-email.jsx"],"sourcesContent":["import { fetchAPI } from \"./base-api\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\nexport const draftSalesRequest = async (data) => {\n  const endpoint = `/sales/new-request/`;\n  const options = {\n    method: 'POST',\n    body: data\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\n// Sale Table Api\nexport const fetchSales = async () => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n\n  const requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/sales/`, requestOptions);\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    throw error;\n  }\n};\n\n\n// Sales Note Api\nexport const fetchSalesNotes = async (saleUniqueId, updatedNote) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: 'PUT',\n    headers: myHeaders,\n    body: JSON.stringify({ sales_note: updatedNote }),\n    redirect: 'follow',\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/sales/${saleUniqueId}/notes/`, requestOptions);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Sales notes update failed with status ${response.status}: ${errorText}`);\n    }\n\n    const result = await response.text();\n\n    const parsedResult = result.trim() ? JSON.parse(result) : null;\n\n    return parsedResult;\n  } catch (error) {\n    console.error('Sales notes update error:', error);\n    throw error;\n  }\n};\n\nexport const markWon = async (ids) => {\n  const endpoint = `/sales/status/won/`;\n  const options = {\n    method: 'PUT',\n    body: { ids: ids }\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\nexport const markLost = async (ids) => {\n  const endpoint = `/sales/status/lost/`;\n  const options = {\n    method: 'PUT',\n    body: { ids: ids }\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options);\n};\n\n// Sale Won Api\nexport const fetchWon = async (saleUniqueId) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const raw = JSON.stringify({\n    \"ids\": [saleUniqueId]\n  });\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\"\n  };\n  const response = await fetch(`${API_BASE_URL}/sales/status/won/`, requestOptions);\n  const result = await response.json();\n  return result[0];\n};\n\n\n// Sale Contact Api\nexport const fetchContacts = async (saleUniqueId, formData) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: JSON.stringify(formData),\n    redirect: 'follow'\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/sales/${saleUniqueId}/contacts/`, requestOptions);\n    if (response.ok) {\n      return response;\n    } else {\n      console.log('Error:', response.status);\n      return null;\n    }\n  } catch (error) {\n    console.log('Error:', error);\n    return null;\n  }\n};\n\n\n// Sale Lead Api\nexport const fetchSaleslead = async (saleUniqueId, updatedLead) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: 'PUT',\n    headers: myHeaders,\n    body: JSON.stringify({ lead: updatedLead, unique_id: saleUniqueId }),\n    redirect: 'follow',\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/sales/${saleUniqueId}/lead/`, requestOptions);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Sales lead update failed with status ${response.status}: ${errorText}`);\n    }\n\n    const result = await response.text();\n\n    const parsedResult = result.trim() ? JSON.parse(result) : null;\n\n    return parsedResult;\n  } catch (error) {\n    console.error('Sales lead update error:', error);\n    throw error;\n  }\n};\n\n\n\n\n// Sale Multi Won Api\nexport const fetchMultipleData = async (selectedUniqueIds) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const raw = JSON.stringify({\n    \"ids\": selectedUniqueIds\n  });\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: raw, // Include the body here\n    redirect: \"follow\"\n  };\n\n  const responses = await Promise.all([\n    fetch(`${API_BASE_URL}/sales/status/won/`, requestOptions), // Pass requestOptions directly\n  ]);\n\n  const data = await Promise.all(responses.map(response => response.json()));\n  return data;\n};\n\n\n// Sale DUPLICATE Api\nexport const fetchduplicateData = async (saleUniqueId) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    redirect: \"follow\"\n  };\n\n  const response = await fetch(`${API_BASE_URL}/sales/${saleUniqueId}/duplicate/`, requestOptions);\n  const result = await response.json();\n  return result[0];\n};\n\n\n\n\n// Sale history Api\nexport const fetchhistoryData = async (saleUniqueId) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: \"GET\",\n    headers: myHeaders,\n    redirect: \"follow\"\n  };\n\n  try {\n    await fetch(`${API_BASE_URL}/sales/${saleUniqueId}/history/`, requestOptions);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n\n\n\n\n// Sale Multi Lost Api\nexport const fetchMultipleLost = async (selectedUniqueIds) => {\n  const myHeaders = new Headers();\n  const accessToken = localStorage.getItem(\"access_token\");\n  myHeaders.append(\"Authorization\", `Bearer ${accessToken}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const raw = JSON.stringify({\n    \"ids\": selectedUniqueIds\n  });\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: raw, // Include the body here\n    redirect: \"follow\"\n  };\n\n\n  const responses = await Promise.all([\n    fetch(`${API_BASE_URL}/sales/status/lost/`, requestOptions), // Pass requestOptions directly\n  ]);\n\n  const data = await Promise.all(responses.map(response => response.json()));\n  return data; // Return data to handleMoveToManagementWon function\n};\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"headerTitle\":\"send-email_headerTitle__50KUB\",\"customLabel\":\"send-email_customLabel__r5xED\",\"templateInfo\":\"send-email_templateInfo__mWkVT\",\"bag\":\"send-email_bag__wtdwK\",\"lable\":\"send-email_lable__+kNCa\",\"dropdownSelect\":\"send-email_dropdownSelect__RY5w8\",\"autoCompleteBox\":\"send-email_autoCompleteBox__fWZ7C\",\"AutoComplete\":\"send-email_AutoComplete__m9YI5\",\"bcc\":\"send-email_bcc__BwFzl\",\"box\":\"send-email_box__Zlmer\",\"active\":\"send-email_active__vEx4h\",\"inputBox\":\"send-email_inputBox__NpU2b\"};","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Button, Col, Modal, Row } from \"react-bootstrap\";\nimport { InfoCircle } from 'react-bootstrap-icons';\nimport { useQuery } from \"@tanstack/react-query\";\nimport clsx from 'clsx';\nimport { AutoComplete } from \"primereact/autocomplete\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { Editor } from \"primereact/editor\";\nimport { IconField } from 'primereact/iconfield';\nimport { InputIcon } from 'primereact/inputicon';\nimport { InputText } from \"primereact/inputtext\";\nimport { OverlayPanel } from 'primereact/overlaypanel';\nimport { ProgressSpinner } from \"primereact/progressspinner\";\nimport style from \"./send-email.module.scss\";\nimport { getEmail, getEmailTemplates, getOutgoingEmail, getSignatureTemplates } from '../../APIs/email-template';\n\nconst renderHeader = () => (\n    <span className=\"ql-formats\">\n        <button className=\"ql-bold\" aria-label=\"Bold\"></button>\n        <button className=\"ql-italic\" aria-label=\"Italic\"></button>\n        <button className=\"ql-underline\" aria-label=\"Underline\"></button>\n        <button className=\"ql-strike\" aria-label=\"Strikethrough\"></button>\n        <button className=\"ql-blockquote\" aria-label=\"Blockquote\"></button>\n        <button\n            className=\"ql-list\"\n            value=\"ordered\"\n            aria-label=\"Ordered List\"\n        ></button>\n        <button\n            className=\"ql-list\"\n            value=\"bullet\"\n            aria-label=\"Bullet List\"\n        ></button>\n        <button className=\"ql-align\" value=\"\" aria-label=\"Align Left\"></button>\n        <button\n            className=\"ql-align\"\n            value=\"center\"\n            aria-label=\"Align Center\"\n        ></button>\n        <button\n            className=\"ql-align\"\n            value=\"right\"\n            aria-label=\"Align Right\"\n        ></button>\n        <button\n            className=\"ql-align\"\n            value=\"justify\"\n            aria-label=\"Justify\"\n        ></button>\n        <button className=\"ql-link\" aria-label=\"Insert Link\"></button>\n        <button className=\"ql-image\" aria-label=\"Insert Image\"></button>\n        <button className=\"ql-code-block\" aria-label=\"Code Block\"></button>\n    </span>\n);\nconst header = renderHeader();\n\nconst SendDynamicEmailForm = ({ show, setShow, mutation, contactPersons, setPayload, defaultTemplateId, isAddingContact = false }) => {\n    const op = useRef(null);\n    const profileData = JSON.parse(window.localStorage.getItem('profileData') || '{}');\n    const [from, setFrom] = useState('');\n    const [to, setTo] = useState([]);\n    const [cc, setCC] = useState([]);\n    const [bcc, setBCC] = useState([]);\n    const [subject, setSubject] = useState(null);\n    const [text, setText] = useState(null);\n    const [signature, setSignature] = useState(null);\n\n    const [errors, setErrors] = useState({});\n    const [filteredEmails, setFilteredEmails] = useState([]);\n    const autoCompleteRef = useRef(null);\n    const autoCompleteRef2 = useRef(null);\n    const autoCompleteRef3 = useRef(null);\n    const [showCC, setShowCC] = useState(false);\n    const [showBCC, setShowBCC] = useState(false);\n\n    // Email validation function\n    const isValidEmail = useCallback((email) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email.trim());\n    }, []);\n\n    // Validate array of emails\n    const validateEmailArray = useCallback((emailArray) => {\n        if (!emailArray || emailArray.length === 0) return true; // Empty array is valid\n        return emailArray.every(email => isValidEmail(email));\n    }, [isValidEmail]);\n\n    // Get invalid emails from array\n    const getInvalidEmails = useCallback((emailArray) => {\n        if (!emailArray || emailArray.length === 0) return [];\n        return emailArray.filter(email => !isValidEmail(email));\n    }, [isValidEmail]);\n\n    // Clean email array by removing invalid emails\n    const cleanEmailArray = useCallback((emailArray) => {\n        if (!emailArray || emailArray.length === 0) return [];\n        return emailArray.filter(email => isValidEmail(email));\n    }, [isValidEmail]);\n\n    // Validate and clean all email fields\n    const validateAndCleanAllEmails = useCallback(() => {\n        let hasErrors = false;\n        \n        // Check TO emails\n        if (to.length > 0) {\n            const invalidToEmails = getInvalidEmails(to);\n            if (invalidToEmails.length > 0) {\n                console.log('Found invalid TO emails:', invalidToEmails);\n                setTo(cleanEmailArray(to));\n                hasErrors = true;\n            }\n        }\n        \n        // Check CC emails\n        if (cc.length > 0) {\n            const invalidCcEmails = getInvalidEmails(cc);\n            if (invalidCcEmails.length > 0) {\n                console.log('Found invalid CC emails:', invalidCcEmails);\n                setCC(cleanEmailArray(cc));\n                hasErrors = true;\n            }\n        }\n        \n        // Check BCC emails\n        if (bcc.length > 0) {\n            const invalidBccEmails = getInvalidEmails(bcc);\n            if (invalidBccEmails.length > 0) {\n                console.log('Found invalid BCC emails:', invalidBccEmails);\n                setBCC(cleanEmailArray(bcc));\n                hasErrors = true;\n            }\n        }\n        \n        return !hasErrors; // Return true if no errors found\n    }, [to, cc, bcc, getInvalidEmails, cleanEmailArray]);\n\n    const [emailTemplateId, setEmailTemplatedId] = useState(null);\n    const reset = () => {\n        setFrom([]);\n        setTo([]);\n        setCC([]);\n        setBCC([]);\n        setSubject([]);\n        setText([]);\n        setEmailTemplatedId(null);\n    };\n\n    const handleClose = () => {\n        setShow(false);\n        if (!defaultTemplateId) reset();\n    };\n\n    const emailTemplateQuery = useQuery({\n        queryKey: [\"emailTemplate\"],\n        queryFn: getEmailTemplates,\n        enabled: !!show,\n    });\n\n    const signatureQuery = useQuery({\n        queryKey: [\"getSignatureTemplates\"],\n        queryFn: getSignatureTemplates,\n        enabled: !!show,\n    });\n\n    const outgoingEmailTemplateQuery = useQuery({\n        queryKey: [\"getOutgoingEmail\"],\n        queryFn: getOutgoingEmail,\n        enabled: !!show,\n    });\n\n    const emailQuery = useQuery({\n        queryKey: [\"emailQuery\", emailTemplateId],\n        queryFn: () => getEmail(emailTemplateId),\n        enabled: !!emailTemplateId,\n        retry: 1,\n    });\n\n    useEffect(() => {\n        if (outgoingEmailTemplateQuery?.data) {\n            if (outgoingEmailTemplateQuery?.data?.outgoing_email && outgoingEmailTemplateQuery?.data?.outgoing_email_verified)\n                setFrom(outgoingEmailTemplateQuery?.data?.outgoing_email);\n            else\n                setFrom('no-reply@memate.com.au');\n        }\n\n        if (!emailTemplateId && emailTemplateQuery?.data && defaultTemplateId) {\n            const activeTemplateId = emailTemplateQuery?.data?.find((template) => template.type === defaultTemplateId);\n            if (activeTemplateId) setEmailTemplatedId(activeTemplateId?.id);\n        }\n\n    }, [emailTemplateQuery, outgoingEmailTemplateQuery, defaultTemplateId, emailTemplateId]);\n\n    const onSubmit = async () => {\n        let errorCount = 0;\n        setErrors({});\n\n        // First, validate and clean all email arrays\n        const allEmailsValid = validateAndCleanAllEmails();\n        if (!allEmailsValid) {\n            console.log('Some emails were invalid and have been cleaned');\n        }\n\n        if (!from) {\n            ++errorCount;\n            setErrors((others) => ({ ...others, from: true }));\n        }\n\n        if (to?.length === 0) {\n            ++errorCount;\n            setErrors((others) => ({ ...others, to: true }));\n        } else if (!validateEmailArray(to)) {\n            ++errorCount;\n            const invalidEmails = getInvalidEmails(to);\n            console.log('Invalid TO emails:', invalidEmails);\n            setErrors((others) => ({ ...others, to: true, toInvalid: true, invalidToEmails: invalidEmails }));\n        }\n\n        if (cc.length > 0 && !validateEmailArray(cc)) {\n            ++errorCount;\n            const invalidEmails = getInvalidEmails(cc);\n            console.log('Invalid CC emails:', invalidEmails);\n            setErrors((others) => ({ ...others, cc: true, invalidCcEmails: invalidEmails }));\n        }\n\n        if (bcc.length > 0 && !validateEmailArray(bcc)) {\n            ++errorCount;\n            const invalidEmails = getInvalidEmails(bcc);\n            console.log('Invalid BCC emails:', invalidEmails);\n            setErrors((others) => ({ ...others, bcc: true, invalidBccEmails: invalidEmails }));\n        }\n\n        if (!subject) {\n            ++errorCount;\n            setErrors((others) => ({ ...others, subject: true }));\n        }\n\n        if (!text) {\n            ++errorCount;\n            setErrors((others) => ({ ...others, text: true }));\n        }\n\n        if (errorCount) return;\n\n        mutation.mutate({\n            subject,\n            email_body: text,\n            from_email: from,\n            to: to?.toString(),\n            ...(cc.length > 0 && { cc: cc.toString() }),\n            ...(bcc.length > 0 && { bcc: bcc.toString() }),\n            ...(signature && { signature: signature })\n        });\n    };\n\n    const search = (event) => {\n        const query = event?.query?.toLowerCase() || '';\n        let emails = contactPersons.map((data) => (data.email))?.filter(email => email);\n        emails = emails.filter((email) => !to.includes(email));\n        emails = emails.filter((email) => !cc.includes(email));\n        emails = emails.filter((email) => !bcc.includes(email));\n\n        emails = emails.filter((email) =>\n            email.toLowerCase().includes(query)\n        );\n\n        setFilteredEmails(emails);\n    };\n\n    const onInputChange = (e) => {\n        const currentValue = e.target.value;\n        if (currentValue.includes(',') || e.key === 'Enter') {\n            const emails = currentValue.split(/[\\s,]+/).filter((email) => email);\n            // Validate emails before adding\n            const validEmails = emails.filter(email => isValidEmail(email));\n            setTo((prev) => [...new Set([...prev, ...validEmails])]);\n            // Clear error if emails are valid\n            if (validEmails.length === emails.length && validEmails.length > 0) {\n                setErrors((others) => ({ ...others, to: false, toInvalid: false }));\n            }\n            e.target.value = '';\n        }\n    };\n\n    const onInputChange2 = (e) => {\n        const currentValue = e.target.value;\n        if (currentValue.includes(',') || e.key === 'Enter') {\n            const emails = currentValue.split(/[\\s,]+/).filter((email) => email);\n            // Validate emails before adding\n            const validEmails = emails.filter(email => isValidEmail(email));\n            setCC((prev) => [...new Set([...prev, ...validEmails])]);\n            // Clear error if emails are valid\n            if (validEmails.length === emails.length) {\n                setErrors((others) => ({ ...others, cc: false }));\n            }\n            e.target.value = '';\n        }\n    };\n\n    const onInputChange3 = (e) => {\n        const currentValue = e.target.value;\n        if (currentValue.includes(',') || e.key === 'Enter') {\n            const emails = currentValue.split(/[\\s,]+/).filter((email) => email);\n            // Validate emails before adding\n            const validEmails = emails.filter(email => isValidEmail(email));\n            setBCC((prev) => [...new Set([...prev, ...validEmails])]);\n            // Clear error if emails are valid\n            if (validEmails.length === emails.length) {\n                setErrors((others) => ({ ...others, bcc: false }));\n            }\n            e.target.value = '';\n        }\n    };\n\n    const onFocus = () => {\n        search();\n        if (autoCompleteRef.current) autoCompleteRef.current.show();\n    };\n\n    const onFocus2 = () => {\n        search();\n        if (autoCompleteRef2.current) autoCompleteRef2.current.show();\n    };\n\n    const onFocus3 = () => {\n        search();\n        if (autoCompleteRef3.current) autoCompleteRef3.current.show();\n    };\n\n    useEffect(() => {\n        if (contactPersons?.length) {\n            let emails = contactPersons.map((data) => (data.email))?.filter(email => email);\n            setFilteredEmails(emails);\n        }\n    }, [contactPersons]);\n\n    // Auto-clean invalid emails from arrays\n    useEffect(() => {\n        if (to.length > 0) {\n            const invalidToEmails = getInvalidEmails(to);\n            if (invalidToEmails.length > 0) {\n                console.log('Auto-cleaning invalid TO emails:', invalidToEmails);\n                const validEmails = cleanEmailArray(to);\n                setTo(validEmails);\n            }\n        }\n    }, [to, getInvalidEmails, cleanEmailArray]);\n\n    useEffect(() => {\n        if (cc.length > 0) {\n            const invalidCcEmails = getInvalidEmails(cc);\n            if (invalidCcEmails.length > 0) {\n                console.log('Auto-cleaning invalid CC emails:', invalidCcEmails);\n                const validEmails = cleanEmailArray(cc);\n                setCC(validEmails);\n            }\n        }\n    }, [cc, getInvalidEmails, cleanEmailArray]);\n\n    useEffect(() => {\n        if (bcc.length > 0) {\n            const invalidBccEmails = getInvalidEmails(bcc);\n            if (invalidBccEmails.length > 0) {\n                console.log('Auto-cleaning invalid BCC emails:', invalidBccEmails);\n                const validEmails = cleanEmailArray(bcc);\n                setBCC(validEmails);\n            }\n        }\n    }, [bcc, getInvalidEmails, cleanEmailArray]);\n\n    useEffect(() => {\n        setPayload((prev) => ({\n            ...prev,\n            subject: subject,\n            email_body: text,\n            from_email: from,\n            to: to?.toString(),\n            ...(cc.length > 0 && { cc: cc.toString() }),\n            ...(bcc.length > 0 && { bcc: bcc.toString() }),\n            ...(signature && { signature: signature })\n        }));\n    }, [subject, text, from, to, cc, bcc, signature, setPayload]);\n\n    useEffect(() => {\n        if (signatureQuery?.data) {\n            setSignature(signatureQuery?.data?.find((template) => template.id === profileData.email_signature)?.id);\n        }\n    }, [signatureQuery?.data, profileData.email_signature]);\n\n    useEffect(() => {\n        setText(emailQuery?.data?.body || \"\");\n        setSubject(emailQuery?.data?.subject);\n        setErrors((others) => ({ ...others, subject: false }));\n        setErrors((others) => ({ ...others, text: false }));\n    }, [emailQuery?.data]);\n\n    return (\n        <Modal\n            show={show}\n            centered\n            onHide={handleClose}\n            className='invoice-form'\n            size='lg'\n        >\n            <Modal.Header closeButton>\n                <div className={`${style.modalHeader}`}>\n                    <div className=\"w-100 d-flex align-items-center gap-2\">\n                        <span className={`white-space-nowrap mt-2 mb-2 ${style.headerTitle}`}>\n                            Send email\n                        </span>\n                    </div>\n                </div>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col sm={6} className='mb-3'>\n                        <div style={{ position: 'relative' }}>\n                            <label className={clsx(style.customLabel)}>FROM</label>\n                            <Dropdown\n                                options={\n                                    (outgoingEmailTemplateQuery && outgoingEmailTemplateQuery?.data && ([{\n                                        value: outgoingEmailTemplateQuery?.data?.outgoing_email,\n                                        label: `${outgoingEmailTemplateQuery?.data?.outgoing_email}`,\n                                    }])) ||\n                                    []\n                                }\n                                className={clsx(\n                                    style.dropdownSelect,\n                                    \"dropdown-height-fixed w-100\"\n                                )}\n                                style={{ height: \"46px\", paddingLeft: '60px' }}\n                                placeholder=\"Select from email\"\n                                onChange={(e) => {\n                                    setFrom(e.value);\n                                    setErrors((others) => ({ ...others, from: false }));\n                                }}\n                                value={from}\n                                filterInputAutoFocus={true}\n                            />\n                        </div>\n                        {errors?.from && (\n                            <p className=\"error-message mb-0\">{\"From email is required\"}</p>\n                        )}\n                    </Col>\n                    <Col sm={6} className='mb-3'>\n                        <div style={{ position: 'relative' }}>\n                            <label className={clsx(style.customLabel)}>Templates</label>\n                            <Dropdown\n                                options={\n                                    (emailTemplateQuery &&\n                                        emailTemplateQuery.data?.map((emailTemplate) => ({\n                                            value: emailTemplate.id,\n                                            label: `${emailTemplate.name}`,\n                                        }))) ||\n                                    []\n                                }\n                                className={clsx(\n                                    style.dropdownSelect,\n                                    \"dropdown-height-fixed w-100\"\n                                )}\n                                style={{ height: \"46px\", paddingLeft: '88px' }}\n                                placeholder=\"Select template\"\n                                onChange={(e) => {\n                                    setEmailTemplatedId(e.value);\n                                }}\n                                value={emailTemplateId}\n                                loading={emailTemplateQuery?.isFetching}\n                                filterInputAutoFocus={true}\n                            />\n                            <div className={style.templateInfo} onClick={(e) => op.current.toggle(e)}>\n                                <InfoCircle size={16} color='#737374ff' />\n                            </div>\n                            <OverlayPanel ref={op}>\n                                <p className='font-12' style={{ color: '#344054', lineHeight: '18px' }}>Choose from your existing templates here.</p>\n                                <div className='font-12' style={{ color: '#344054', lineHeight: '18px' }}>To edit or add new templates, go to<br /> Profile Settings &gt; Templates &gt; Email<br/> Templates.</div>\n                            </OverlayPanel>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={12} className='mb-3'>\n                        <div className=\"d-flex gap-3 w-100\">\n                            <div style={{ position: 'relative' }} className={style.autoCompleteBox}>\n                                <div style={{ width: '50px' }} className={style.bag}></div>\n                                <label className={clsx(style.customLabel)}>TO</label>\n                                <AutoComplete\n                                    ref={autoCompleteRef}\n                                    value={to}\n                                    completeMethod={search}\n                                    onChange={(e) => {\n                                        setTo(e.value);\n                                        setErrors((others) => ({ ...others, to: false, toInvalid: false }));\n                                    }}\n                                    multiple\n                                    suggestions={filteredEmails}\n                                    onClick={onFocus}\n                                    onFocus={onFocus}\n                                    onKeyUp={onInputChange}\n                                    onBlur={(e) => {\n                                        const currentValue = e.target.value.trim();\n                                        if (currentValue) {\n                                            if (isValidEmail(currentValue)) {\n                                                setTo((prev) => [...new Set([...prev, currentValue])]);\n                                                setErrors((others) => ({ ...others, to: false, toInvalid: false }));\n                                            } else {\n                                                setErrors((others) => ({ ...others, toInvalid: true }));\n                                            }\n                                            e.target.value = '';\n                                        }\n                                    }}\n                                    className={clsx(style.AutoComplete, \"w-100\")}\n                                    placeholder=\"TO\"\n                                />\n                            </div>\n                            <Button\n                                className={clsx(style.box, { [style.active]: showCC })}\n                                onClick={() => { setShowCC(!showCC); setCC([]); }}\n                            >\n                                CC\n                            </Button>\n                            <Button\n                                className={clsx(style.box, { [style.active]: showBCC })}\n                                onClick={() => { setShowBCC(!showBCC); setBCC([]); }}\n                            >\n                                BCC\n                            </Button>\n                        </div>\n                        {errors?.to && !errors?.toInvalid && (\n                            <p className=\"error-message mb-0\">{\"To email is required\"}</p>\n                        )}\n                        {errors?.toInvalid && (\n                            <div>\n                                <p className=\"error-message mb-0\">{\"Please enter valid email addresses for TO\"}</p>\n                                {errors?.invalidToEmails && errors.invalidToEmails.length > 0 && (\n                                    <p className=\"error-message mb-0 mt-1\" style={{ fontSize: '12px', color: '#dc3545' }}>\n                                        Invalid emails: {errors.invalidToEmails.join(', ')}\n                                    </p>\n                                )}\n                            </div>\n                        )}\n                    </Col>\n                    {\n                        showCC &&\n                        <Col sm={6} className='mb-3'>\n                            <div style={{ position: 'relative' }}>\n                                <div style={{ width: '50px' }} className={style.bag}></div>\n                                <label className={clsx(style.customLabel)}>CC</label>\n                                <AutoComplete\n                                    ref={autoCompleteRef2}\n                                    value={cc}\n                                    completeMethod={search}\n                                    onChange={(e) => { \n                                        setCC(e.value);\n                                        setErrors((others) => ({ ...others, cc: false }));\n                                    }}\n                                    multiple\n                                    suggestions={filteredEmails}\n                                    onClick={onFocus2}\n                                    onFocus={onFocus2}\n                                    onKeyUp={onInputChange2}\n                                    onBlur={(e) => {\n                                        const currentValue = e.target.value.trim();\n                                        if (currentValue) {\n                                            if (isValidEmail(currentValue)) {\n                                                setCC((prev) => [...new Set([...prev, currentValue])]);\n                                                setErrors((others) => ({ ...others, cc: false }));\n                                            } else {\n                                                setErrors((others) => ({ ...others, cc: true }));\n                                            }\n                                            e.target.value = '';\n                                        }\n                                    }}\n                                    className={clsx(style.AutoComplete, \"w-100\")}\n                                    placeholder=\"CC\"\n                                />\n                            </div>\n                            {errors?.cc && (\n                                <div>\n                                    <p className=\"error-message mb-0\">{\"Please enter valid email addresses for CC\"}</p>\n                                    {errors?.invalidCcEmails && errors.invalidCcEmails.length > 0 && (\n                                        <p className=\"error-message mb-0 mt-1\" style={{ fontSize: '12px', color: '#dc3545' }}>\n                                            Invalid emails: {errors.invalidCcEmails.join(', ')}\n                                        </p>\n                                    )}\n                                </div>\n                            )}\n                        </Col>\n                    }\n\n                    {\n                        showBCC && <Col sm={6} className='mb-3'>\n                            <div style={{ position: 'relative' }}>\n                                <div style={{ width: '60px' }} className={style.bag}></div>\n                                <label className={clsx(style.customLabel)}>BCC</label>\n                                <AutoComplete\n                                    ref={autoCompleteRef3}\n                                    value={bcc}\n                                    completeMethod={search}\n                                    onChange={(e) => { \n                                        setBCC(e.value);\n                                        setErrors((others) => ({ ...others, bcc: false }));\n                                    }}\n                                    multiple\n                                    suggestions={filteredEmails}\n                                    onClick={onFocus3}\n                                    onFocus={onFocus3}\n                                    onKeyUp={onInputChange3}\n                                    onBlur={(e) => {\n                                        const currentValue = e.target.value.trim();\n                                        if (currentValue) {\n                                            if (isValidEmail(currentValue)) {\n                                                setBCC((prev) => [...new Set([...prev, currentValue])]);\n                                                setErrors((others) => ({ ...others, bcc: false }));\n                                            } else {\n                                                setErrors((others) => ({ ...others, bcc: true }));\n                                            }\n                                            e.target.value = '';\n                                        }\n                                    }}\n                                    className={clsx(style.AutoComplete, style.bcc, \"w-100\")}\n                                    placeholder=\"BCC\"\n                                />\n                            </div>\n                            {errors?.bcc && (\n                                <div>\n                                    <p className=\"error-message mb-0\">{\"Please enter valid email addresses for BCC\"}</p>\n                                    {errors?.invalidBccEmails && errors.invalidBccEmails.length > 0 && (\n                                        <p className=\"error-message mb-0 mt-1\" style={{ fontSize: '12px', color: '#dc3545' }}>\n                                            Invalid emails: {errors.invalidBccEmails.join(', ')}\n                                        </p>\n                                    )}\n                                </div>\n                            )}\n                        </Col>\n                    }\n                    <Col sm={12} className='mb-2'>\n                        <div style={{ position: 'relative' }}>\n                            <div style={{ width: '60px' }} className={style.bag}></div>\n                            <label className={clsx(style.customLabel)}>SUBJECT</label>\n                            <IconField>\n                                <InputIcon>\n                                    {emailQuery?.isFetching && <ProgressSpinner style={{ width: '20px', height: '20px', position: 'relative', top: '-5px' }} />}\n                                </InputIcon>\n                                <InputText\n                                    value={subject}\n                                    className={clsx(style.inputBox, 'w-100')}\n                                    style={{ paddingLeft: '100px' }}\n                                    onChange={(e) => {\n                                        setSubject(e.target.value);\n                                        setErrors((others) => ({ ...others, subject: false }));\n                                    }}\n                                    placeholder=\"{Organization} | Quotation: {number} | {reference}\"\n                                />\n                            </IconField>\n                        </div>\n                        {errors?.subject && (\n                            <p className=\"error-message mb-0\">{\"Subject is required\"}</p>\n                        )}\n                    </Col>\n                    <Col sm={12} className='mb-3'>\n                        <div className=\"d-flex flex-column gap-1\" style={{ position: 'relative' }}>\n                            <label className={clsx(style.lable)}>Message</label>\n                            <InputIcon style={{ position: 'absolute', right: '15px', top: '40px', zIndex: 1 }}>\n                                {emailQuery?.isFetching && <ProgressSpinner style={{ width: '20px', height: '20px', position: 'relative', top: '-5px' }} />}\n                            </InputIcon>\n                            <Editor\n                                style={{ minHeight: \"150px\" }}\n                                headerTemplate={header}\n                                value={text}\n                                placeholder='Enter a description...'\n                                onTextChange={(e) => {\n                                    setText(e.htmlValue);\n                                    setErrors((others) => ({ ...others, text: false }));\n                                }}\n                            />\n                        </div>\n                        {errors?.text && (\n                            <p className=\"error-message mb-0\">{\"Message is required\"}</p>\n                        )}\n                    </Col>\n                    <Col sm={12}>\n                        <div style={{ position: 'relative' }}>\n                            <label className={clsx(style.customLabel)}>Signature</label>\n                            <Dropdown\n                                options={\n                                    (signatureQuery &&\n                                        signatureQuery.data?.map((template) => ({\n                                            value: template.id,\n                                            label: `${template.name}`,\n                                        }))) ||\n                                    []\n                                }\n                                panelClassName='px880-dropdown-item'\n                                className={clsx(\n                                    style.dropdownSelect,\n                                    \"dropdown-height-fixed w-100\"\n                                )}\n                                style={{ height: \"46px\", paddingLeft: '88px' }}\n                                placeholder=\"Select signature\"\n                                onChange={(e) => {\n                                    setSignature(e.value);\n                                }}\n                                value={signature}\n                                loading={signatureQuery?.isFetching}\n                                filterInputAutoFocus={true}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer className='d-flex justify-content-between'>\n                <span></span>\n                <div className=\"d-flex justify-content-end gap-2\">\n                    <Button className=\"outline-button\" onClick={handleClose}>\n                        Cancel{\" \"}\n                    </Button>\n                    <Button disabled={mutation?.isPending} className=\"solid-button\" onClick={onSubmit}>\n                        Send{\" \"}\n                        {(mutation?.isPending || isAddingContact) && (\n                            <ProgressSpinner\n                                style={{ width: \"20px\", height: \"20px\", color: \"#fff\" }}\n                            />\n                        )}\n                    </Button>\n                </div>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default SendDynamicEmailForm;"],"names":["API_BASE_URL","process","draftSalesRequest","async","options","method","body","data","url","URL","fetchAPI","toString","fetchSales","myHeaders","Headers","accessToken","localStorage","getItem","append","requestOptions","headers","redirect","response","fetch","text","error","console","fetchSalesNotes","saleUniqueId","updatedNote","JSON","stringify","sales_note","ok","errorText","Error","status","result","trim","parse","markWon","ids","markLost","fetchContacts","formData","log","fetchSaleslead","updatedLead","lead","unique_id","fetchMultipleData","selectedUniqueIds","responses","Promise","all","map","json","fetchduplicateData","fetchMultipleLost","header","_jsxs","className","children","_jsx","value","_ref","_outgoingEmailTemplat4","_outgoingEmailTemplat5","_emailTemplateQuery$d2","_signatureQuery$data2","show","setShow","mutation","contactPersons","setPayload","defaultTemplateId","isAddingContact","op","useRef","profileData","window","from","setFrom","useState","to","setTo","cc","setCC","bcc","setBCC","subject","setSubject","setText","signature","setSignature","errors","setErrors","filteredEmails","setFilteredEmails","autoCompleteRef","autoCompleteRef2","autoCompleteRef3","showCC","setShowCC","showBCC","setShowBCC","isValidEmail","useCallback","email","test","validateEmailArray","emailArray","length","every","getInvalidEmails","filter","cleanEmailArray","validateAndCleanAllEmails","hasErrors","invalidToEmails","invalidCcEmails","invalidBccEmails","emailTemplateId","setEmailTemplatedId","handleClose","emailTemplateQuery","useQuery","queryKey","queryFn","getEmailTemplates","enabled","signatureQuery","getSignatureTemplates","outgoingEmailTemplateQuery","getOutgoingEmail","emailQuery","getEmail","retry","useEffect","_outgoingEmailTemplat","_outgoingEmailTemplat2","_outgoingEmailTemplat3","outgoing_email","outgoing_email_verified","_emailTemplateQuery$d","activeTemplateId","find","template","type","id","search","event","_event$query","_contactPersons$map","query","toLowerCase","emails","includes","onFocus","current","onFocus2","onFocus3","_contactPersons$map2","validEmails","prev","email_body","from_email","_signatureQuery$data","_signatureQuery$data$","email_signature","_emailQuery$data","_emailQuery$data2","others","Modal","centered","onHide","size","Header","closeButton","style","modalHeader","headerTitle","Body","Row","Col","sm","position","clsx","customLabel","Dropdown","label","dropdownSelect","height","paddingLeft","placeholder","onChange","e","filterInputAutoFocus","emailTemplate","name","loading","isFetching","templateInfo","onClick","toggle","InfoCircle","color","OverlayPanel","ref","lineHeight","autoCompleteBox","width","bag","AutoComplete","completeMethod","toInvalid","multiple","suggestions","onKeyUp","currentValue","target","key","split","Set","onBlur","Button","box","active","fontSize","join","IconField","InputIcon","ProgressSpinner","top","InputText","inputBox","lable","right","zIndex","Editor","minHeight","headerTemplate","onTextChange","htmlValue","panelClassName","Footer","disabled","isPending","errorCount","invalidEmails","mutate"],"sourceRoot":""}