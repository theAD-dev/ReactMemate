{"version":3,"file":"static/js/8584.40be1bba.chunk.js","mappings":"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","sources":["APIs/ProfileResetPasswordApi.js","components/layout/Login/change-password.js"],"sourcesContent":["import { fetchAPI } from \"./base-api\";\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_API_URL;\n\nexport const resetEmail = async (data) => {\n  const endpoint = `/profile/forget/`;\n  const options = {\n    method: 'POST',\n    body: data\n  };\n  const url = new URL(`${API_BASE_URL}${endpoint}`);\n  return fetchAPI(url.toString(), options, false);\n};\n\nexport const ProfileResetUpdate = async (email) => {\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const raw = JSON.stringify({\n    \"email\": email\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\"\n  };\n\n  fetch(`${API_BASE_URL}/profile/forget/`, requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.error(error));\n\n};\n\n\nexport const ProfileChangePassword = async (password, tokenId) => {\n  console.log('tokenId: ', tokenId);\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const raw = JSON.stringify({\n    \"new_password\": password\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\"\n  };\n\n  try {\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_API_URL}/${tokenId}/`, requestOptions);\n    const result = await response.text();\n    console.log(result);\n    return result; // Return the result to handle success or error in the component\n  } catch (error) {\n    console.error(error);\n    throw error; // Throw the error to handle it in the component\n  }\n};\n\n","import React, { useState } from \"react\";\nimport { ArrowLeftShort, CheckCircleFill, Eye, EyeSlash } from \"react-bootstrap-icons\";\nimport { Helmet } from \"react-helmet-async\";\nimport PasswordStrengthBar from \"react-password-strength-bar\";\nimport { Link } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport { ProfileChangePassword } from \"../../../APIs/ProfileResetPasswordApi\";\nimport arrowRight from \"../../../assets/images/icon/arrow.svg\";\nimport Featuredlockicon from \"../../../assets/images/icon/Featuredlockicon.png\";\nimport LoinLogo from \"../../../assets/images/logo.svg\";\n\n\nconst ChangePassword = () => {\n  const navigate = useNavigate();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [passwordsMatch, setPasswordsMatch] = useState(true);\n  const [validPassword, setValidPassword] = useState(true);\n  const [showPassword, setShowPassword] = useState(false); // State to track password visibility\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n\n  const { token } = useParams();\n  console.log('token: ', token);\n\n  const tokenId = `profile/change-password/${token}`;\n\n\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n    setPasswordsMatch(e.target.value === confirmPassword);\n    setValidPassword(\n      /\\d/.test(e.target.value) && // Must contain at least one digit\n      /[A-Z]/.test(e.target.value) && // Must contain at least one uppercase character\n      /[\\W_]/.test(e.target.value) && // Must contain at least one special character\n      e.target.value.length >= 20 // Must be at least 20 characters long\n    );\n  };\n\n  const handleConfirmPasswordChange = (e) => {\n    setConfirmPassword(e.target.value);\n    setPasswordsMatch(e.target.value === password);\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n  // Toggle visibility of confirm password\n  const toggleConfirmPasswordVisibility = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  const handleSubmit = () => {\n    // Add your password reset logic here\n    if (password === confirmPassword && validPassword) {\n    } else {\n      if (password !== confirmPassword) {\n        alert(\"Passwords do not match\");\n      } else if (!validPassword) {\n        ProfileChangePassword(password, tokenId);\n        navigate(\"/password-reset\");\n      }\n\n    }\n\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>MeMate - Change Password</title>\n      </Helmet>\n      <div className=\"loginPage forgotPage\">\n        <div className=\"boxinfo\">\n          <div className=\"logohead\">\n             <Link to={`${process.env.REACT_APP_STATIC_WEBSITE_URL}`}><img src={LoinLogo} alt=\"Login Logo\" /></Link>\n          </div>\n          <div className=\"boxLogin\">\n            <div className=\"lockIconStyle\">\n              <img\n                className=\"Featuredlockicon\"\n                src={Featuredlockicon}\n                alt=\"Featuredlockicon\"\n              />\n              <h2>\n\n                Set new <span>Password</span>\n              </h2>\n\n              <p>\n                Your new password must be different from previously used\n                passwords.\n              </p>\n            </div>\n            <div className=\"formgroup\">\n              <label>Password</label>\n              <div className={`inputInfo `}>\n                <input\n                  type={showPassword ? \"text\" : \"password\"} // Conditionally set input type based on showPassword state\n                  value={password}\n                  onChange={handlePasswordChange}\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  className=\"eyeButton\"\n                  onClick={togglePasswordVisibility}\n                >\n                  {showPassword ? (\n                    <>\n                      <EyeSlash color=\"#98A2B3\" size={20} />\n                    </>\n                  ) : (\n                    <>\n                      <Eye color=\"#98A2B3\" size={20} />\n                    </>\n                  )}\n                </button>\n              </div>\n              <PasswordStrengthBar\n                className=\"PasswordStrengthBar\"\n                password={password}\n                shortScoreWord=\"weak\"\n                isRequired={false}\n                scoreWords={[\"very weak\", \"weak\", \"okay\", \"good\", \"strong\"]}\n                barColors={[\"#EAECF0\", \"#F97066\", \"#f6b44d\", \"#2b90ef\", \"#25c281\"]}\n              />\n              {/* {!validPassword && (\n                <p className=\"error-message\">\n                  Password must meet the requirements\n                </p>\n              )} */}\n            </div>\n            <div className=\"formgroup\">\n              <label>Confirm password</label>\n              <div className={`inputInfo `}>\n                <input\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  value={confirmPassword}\n                  onChange={handleConfirmPasswordChange}\n                  placeholder=\"Confirm password\"\n                />\n                <button\n                  className=\"eyeButton\"\n                  onClick={toggleConfirmPasswordVisibility}\n                >\n                  {showConfirmPassword ? (\n                    <>\n                      <EyeSlash color=\"#98A2B3\" size={20} />\n                    </>\n                  ) : (\n                    <>\n                      <Eye color=\"#98A2B3\" size={20} />\n                    </>\n                  )}\n                </button>\n              </div>\n              {passwordsMatch ? null : (\n                <p className=\"error-message\">Passwords do not match</p>\n              )}\n            </div>\n            <ul className=\"activeListPassword\">\n              <li className={/[A-Z]/.test(password) ? \"active\" : \"\"}>\n                <CheckCircleFill\n                  color=\"#D0D5DD\"\n                  size={20}\n                  style={{ marginRight: \"5px\" }}\n                />\n                One uppercase character\n              </li>\n              <li className={password.length >= 8 ? \"active\" : \"\"}>\n                {\" \"}\n                <CheckCircleFill\n                  color=\"#D0D5DD\"\n                  size={20}\n                  style={{ marginRight: \"5px\" }}\n                />\n                Must be at least 8 characters\n              </li>\n              <li className={/[\\W_]/.test(password) ? \"active\" : \"\"}>\n                <CheckCircleFill\n                  color=\"#D0D5DD\"\n                  size={20}\n                  style={{ marginRight: \"5px\" }}\n                />\n                Must contain one special character\n              </li>\n            </ul>\n            <button\n              className=\"fillbtn flexcenterbox\"\n              type=\"submit\"\n              onClick={handleSubmit}\n            >\n              Reset Password{\" \"}\n              <img src={arrowRight} alt=\"Arrow Right\" />\n            </button>\n            <div className=\"linkBottom\">\n              <Link className=\"backToLogin\" to=\"/login\" style={{ color: '#475467', fontWeight: '600', fontSize: '14px' }}>\n                <ArrowLeftShort color=\"#475467\" size={20} />\n                Back to log in\n              </Link>\n            </div>\n          </div>\n          <div className=\"copywrite\">© Memate {new Date().getFullYear()}</div>\n        </div>\n        <div\n          className=\"sliderRight SinglBgRight\"\n          style={{\n            backgroundImage: `url(https://memate-website.s3.ap-southeast-2.amazonaws.com/onboarding/createyour-pass-img-min.jpg)`,\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          <p>Secure and safe: We're here to ensure your business thrives</p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChangePassword;\n"],"names":["API_BASE_URL","process","resetEmail","async","options","method","body","data","url","URL","fetchAPI","toString","ProfileChangePassword","password","tokenId","console","log","myHeaders","Headers","append","requestOptions","headers","JSON","stringify","redirect","response","fetch","result","text","error","ChangePassword","navigate","useNavigate","setPassword","useState","confirmPassword","setConfirmPassword","passwordsMatch","setPasswordsMatch","validPassword","setValidPassword","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","token","useParams","_jsxs","_Fragment","children","_jsx","Helmet","className","Link","to","src","LoinLogo","alt","type","value","onChange","e","target","test","length","placeholder","onClick","togglePasswordVisibility","EyeSlash","color","size","Eye","PasswordStrengthBar","shortScoreWord","isRequired","scoreWords","barColors","toggleConfirmPasswordVisibility","CheckCircleFill","style","marginRight","handleSubmit","alert","arrowRight","fontWeight","fontSize","ArrowLeftShort","Date","getFullYear","backgroundImage","backgroundSize","backgroundRepeat"],"sourceRoot":""}