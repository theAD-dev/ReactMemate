{"version":3,"file":"static/js/6358.b702e559.chunk.js","mappings":"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","sources":["components/layout/requestdemo/SelectCountry.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/memoize-one/dist/memoize-one.esm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PhoneInput } from 'react-international-phone';\nimport { useNavigate } from 'react-router-dom';\nimport { Link } from \"react-router-dom\";\nimport { useLocation } from 'react-router-dom';\nimport Select from 'react-select';\nimport arrowRight from \"../../../assets/images/icon/arrow.svg\";\nimport exclamationCircle from \"../../../assets/images/icon/exclamation-circle.svg\";\nimport request02 from \"../../../assets/images/img/request02.jpg\";\nimport LoinLogo from \"../../../assets/images/logo.svg\";\nimport 'react-international-phone/style.css';\n\nconst SelectCountry = () => {\n\n  const navigate = useNavigate();\n  const [selectedCountry, setSelectedCountry] = useState({ value: 'Australia', label: 'Australia' }); // Default select Australia\n  const [phone, setPhone] = useState('+61'); // Default phone number for Australia\n  const [countryCode, setCountryCode] = useState('AU'); // Default country code for Australia\n  const [countriesData, setCountriesData] = useState([]);\n\n  const location = useLocation();\n\n  const { first_name, last_name } = location.state || { first_name: '', last_name: '' };\n\n\n  const country = selectedCountry.label;\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '/timezones.json')\n      .then(response => response.json())\n      .then(data => {\n        setCountriesData(data);\n      })\n      .catch(error => console.error('Error fetching countries data:', error));\n  }, []);\n\n  const handleCountryChange = (selectedOption) => {\n    setSelectedCountry(selectedOption);\n    const countryData = countriesData.find(country => country.name === selectedOption.value);\n    if (countryData) {\n      const countryPhoneCode = countryData.phone[0];\n      setCountryCode(countryPhoneCode);\n      setPhone('+' + countryPhoneCode); // Auto-select phone code\n    }\n  };\n\n  const handleStepCountry = () => {\n    const data = {\n      country: selectedCountry,\n      phoneNumber: phone\n    };\n    const jsonData = JSON.stringify(data);\n    navigate(\"/companyname\", { state: { data: jsonData, first_name, last_name, country, phone } });\n  };\n\n  useEffect(() => {\n    if (selectedCountry) {\n      const countryData = countriesData.find(country => country.name === selectedCountry.value);\n      if (countryData) {\n        const countryPhoneCode = countryData.phone[0];\n        setCountryCode(countryPhoneCode);\n      }\n    }\n  }, [selectedCountry, countriesData]);\n\n  return (\n    <>\n      <div className='requestDemoWrap'>\n        <div className=\"logohead\" style={{ zIndex: 10 }}>\n          <Link to={`${process.env.REACT_APP_STATIC_WEBSITE_URL}`}><img src={LoinLogo} alt=\"Loin Logo\" /></Link>\n        </div>\n        <div className=\"copywrite\">Â© Memate {new Date().getFullYear()}</div>\n        <div className='OnboardingStep1'>\n          <form>\n            <div className=\"loginPage\">\n              <div className=\"boxinfo\">\n                <div className=\"boxLogin\">\n                  <h2>\n                    Yes, I want to <span>sign up</span><br></br> for a demo\n                  </h2>\n                  <div className=\"step-progress\">\n                    <div className=\"step\"></div>\n                    <div className=\"step active\"></div>\n                    <div className=\"step\"></div>\n                    <div className=\"step\"></div>\n                    <div className=\"step\"></div>\n                  </div>\n                  <div className=\"formgroup timezoneWrapGroup\">\n                    <label>Country<span style={{ color: \"#f04438\" }}>*</span></label>\n                    <div className={`inputInfo `}>\n                      <Select\n                        value={selectedCountry}\n                        onChange={handleCountryChange}\n                        options={countriesData.map(country => ({\n                          value: country.name,\n                          label: country.name,\n                        }))}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"formgroup\">\n                    <label>Phone number<span style={{ color: \"#f04438\" }}>*</span></label>\n                    <div className={`inputInfo `}>\n                      <PhoneInput\n                        country={countryCode}\n                        value={phone}\n                        onChange={setPhone}\n                      />\n                      <img\n                        className=\"ExclamationCircle\"\n                        src={exclamationCircle}\n                        alt=\"Exclamation Circle\"\n                      />\n                    </div>\n                  </div>\n                  <button\n                    type='button'\n                    className=\"fillbtn flexcenterbox\"\n                    onClick={() => handleStepCountry()}\n                  >\n                    Next Step\n                    <img src={arrowRight} alt=\"Arrow Right\" />\n                  </button>\n                  <div className=\"linkBottom\"><p>Already have an account? <Link to=\"/login\">Sign in</Link></p></div>\n                </div>\n              </div>\n              <div className=\"sliderRight SinglBgRight\" style={{\n                backgroundImage: `url(https://memate-website.s3.ap-southeast-2.amazonaws.com/onboarding/signup-slide-img-min.jpg)`,\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n              }}>\n                <p>Predict unprofitable business activities.</p>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SelectCountry;\n","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n"],"names":["SelectCountry","navigate","useNavigate","selectedCountry","setSelectedCountry","useState","value","label","phone","setPhone","countryCode","setCountryCode","countriesData","setCountriesData","location","useLocation","first_name","last_name","state","country","useEffect","fetch","then","response","json","data","catch","error","console","countryData","find","name","countryPhoneCode","_jsx","_Fragment","children","_jsxs","className","style","zIndex","Link","to","src","LoinLogo","alt","Date","getFullYear","color","Select","onChange","selectedOption","options","map","PhoneInput","exclamationCircle","type","onClick","handleStepCountry","phoneNumber","jsonData","JSON","stringify","arrowRight","backgroundImage","backgroundSize","backgroundRepeat","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","safeIsNaN","Number","isNaN","areInputsEqual","newInputs","lastInputs","i","first","second","memoizeOne","resultFn","isEqual","cache","memoized","newArgs","_i","lastThis","this","lastArgs","lastResult","clear"],"sourceRoot":""}