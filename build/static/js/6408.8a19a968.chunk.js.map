{"version":3,"file":"static/js/6408.8a19a968.chunk.js","mappings":"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","sources":["components/layout/settings/customerssettings/CustomersDiscountCategory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PlusLg, PencilSquare } from 'react-bootstrap-icons';\nimport { Helmet } from 'react-helmet-async';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { Button } from 'primereact/button';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport { Dialog } from 'primereact/dialog';\nimport { InputText } from 'primereact/inputtext';\nimport * as yup from 'yup';\nimport style from './customer.module.scss';\nimport { getCategoriesList, newCategories, readCategories, updateCategories, deleteCategories } from '../../../../APIs/industrieslist-api';\nimport { useTrialHeight } from '../../../../app/providers/trial-height-provider';\nimport Sidebar from '../Sidebar';\n\nconst CustomersDiscountCategory = () => {\n    const { trialHeight } = useTrialHeight();\n    const [activeTab, setActiveTab] = useState('industries');\n    const [selectedIndustryId, setSelectedIndustryId] = useState(null);\n\n    const { data: industriesList, refetch } = useQuery({\n        queryKey: ['getCategoriesList'],\n        queryFn: getCategoriesList,\n        enabled: true,\n    });\n\n    const schema = yup.object({\n        name: yup.string().required(\"Name is required\"),\n        value: yup.string().required(\"Value is required\"),\n    }).required();\n\n    const { register, handleSubmit, setValue, reset, formState: { errors } } = useForm({\n        resolver: yupResolver(schema),\n        defaultValues: { name: '', value: '' },\n    });\n\n    const fetchIndustry = async (industryId) => {\n        const industryData = await readCategories(industryId);\n        setValue('name', industryData.name);\n        setValue('value', industryData.value);\n    };\n\n    useEffect(() => {\n        if (selectedIndustryId) {\n            fetchIndustry(selectedIndustryId);\n        }\n    }, [selectedIndustryId]);\n\n    const readIndustryQuery = useQuery({\n        queryKey: ['industry', selectedIndustryId],\n        queryFn: () => readCategories(selectedIndustryId),\n        enabled: !!selectedIndustryId,\n        onSuccess: (data) => {\n            setValue('name', data.name);\n            setValue('value', data.value);\n        }\n    });\n\n    const handleEditClick = (industryId) => {\n        setSelectedIndustryId(industryId);\n        setVisible2(true);\n    };\n\n    const mutation = useMutation({\n        mutationFn: (data) => newCategories(data),\n        onSuccess: () => {\n            refetch();\n            handleClose();\n        },\n    });\n\n    const updateIndustryMutation = useMutation({\n        mutationFn: async ({ id, data }) => {\n            if (!id) throw new Error('Industry ID is missing');\n            return await updateCategories(id, data);\n        },\n        onSuccess: () => {\n            refetch();\n            handleClose();\n        },\n    });\n\n\n    const deleteIndustryMutation = useMutation({\n        mutationFn: async (id) => {\n            if (!id) {\n                throw new Error('Industry ID is missing');\n            }\n            return await deleteCategories(id);\n        },\n        onSuccess: () => {\n            refetch();\n            handleClose();\n        },\n    });\n\n\n    const onSubmit = (data) => {\n        if (selectedIndustryId) {\n            updateIndustryMutation.mutate({ id: selectedIndustryId, data });\n        } else {\n            mutation.mutate(data);\n        }\n        handleClose();\n    };\n\n    const [visible2, setVisible2] = useState(false);\n    const [visible, setVisible] = useState(false);\n\n    const handleClose = () => {\n        setVisible2(false);\n        reset();\n        setVisible(false);\n        setSelectedIndustryId(null);\n    };\n\n    const headerElement = (\n        <div className={`${style.modalHeader}`}>\n            <div className=\"d-flex align-items-center gap-2\">\n                <div className={style.circledesignstyle}>\n                    <div className={style.out}>\n                        <PencilSquare size={24} color=\"#17B26A\" className='mb-3' />\n                    </div>\n                </div>\n                <span className={`white-space-nowrap ${style.headerTitle}`}>\n                    Edit Category\n                </span>\n            </div>\n        </div>\n    );\n\n    const headerElement1 = (\n        <div className={`${style.modalHeader}`}>\n            <div className=\"d-flex align-items-center gap-2\">\n                <div className={style.circledesignstyle}>\n                    <div className={style.out}>\n                        <PencilSquare size={24} color=\"#17B26A\" className='mb-3' />\n                    </div>\n                </div>\n                <span className={`white-space-nowrap ${style.headerTitle}`}>\n                    Create Category\n                </span>\n            </div>\n        </div>\n    );\n\n    const footerContent = (\n        <div className='d-flex justify-content-end gap-2'>\n            <Button className='outline-button' onClick={() => deleteIndustryMutation.mutate(selectedIndustryId)}>\n                Delete\n            </Button>\n            <Button className='solid-button' style={{ width: '132px' }} onClick={handleSubmit(onSubmit)}>Save Details</Button>\n        </div>\n    );\n    const footerContent1 = (\n        <div className='d-flex justify-content-end gap-2'>\n            <Button className='outline-button' onClick={handleClose}>Cancel</Button>\n            <Button className='solid-button' style={{ width: '132px' }} onClick={handleSubmit(onSubmit)}>Save Details</Button>\n        </div>\n    );\n\n    const editBody = (rowData) => {\n        if (rowData.name === \"Regular\" || rowData.name === \"regular\") return \"\";\n        return <PencilSquare onClick={() => handleEditClick(rowData.id)} style={{ cursor: 'pointer' }} size={24} color=\"#667085\" />;\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>MeMate - Customers Discount Category</title>\n            </Helmet>\n            <div className='settings-wrap'>\n                <div className=\"settings-wrapper\">\n                    <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />\n                    <div className=\"settings-content setModalelBoots\">\n                        <div className='headSticky'>\n                            <h1>Customers Settings</h1>\n                            <div className='contentMenuTab'>\n                                <ul>\n                                    <li><Link to=\"/settings/customerssettings/industries\">Industries</Link></li>\n                                    <li className='menuActive'><Link to=\"/settings/customerssettings/customers-discount-category\">Customers Discount Category</Link></li>\n                                </ul>\n                            </div>\n                        </div>\n                        <div className={`content_wrap_main ${style.tablePrimeBar}`} style={{ paddingBottom: `${trialHeight}px` }}>\n                            <div className='content_wrapper'>\n                                <div className=\"listwrapper\">\n                                    <div className=\"topHeadStyle pb-4\">\n                                        <h2>Customers Discount Category</h2>\n                                        <Button label=\"Add New\" onClick={() => setVisible(true)}> <PlusLg color=\"#000000\" size={20} /></Button>\n                                    </div>\n                                    <DataTable value={industriesList} tableStyle={{ minWidth: '50rem' }}>\n                                        <Column field=\"name\" header=\"Category Name\" style={{ width: '70%' }}></Column>\n                                        <Column field=\"value\" header=\"Value\" style={{ width: '376px' }} className='text-left'></Column>\n                                        <Column field=\"edit\" header=\"Edit\" body={editBody} style={{ width: '56px' }} className='text-end'></Column>\n                                    </DataTable>\n\n                                    <Dialog visible={visible2} modal={true} header={headerElement} footer={footerContent} className={`${style.modal} custom-modal`} onHide={handleClose}>\n                                        <div className=\"d-flex flex-column\">\n                                            <p className=\"font-14 mb-1\" style={{ color: '#475467', fontWeight: 500 }}>Category name</p>\n                                            <InputText {...register('name')} className={style.inputBox} />\n                                            {errors.name && <small className=\"p-error\">{errors.name.message}</small>}\n                                        </div>\n                                        <div className=\"mt-3 d-flex flex-column\">\n                                            <p className=\"font-14 mb-1\" style={{ color: '#475467', fontWeight: 500 }}>Value</p>\n                                            <InputText {...register('value')} className={style.inputBox} />\n                                            {errors.value && <small className=\"p-error\">{errors.value.message}</small>}\n                                        </div>\n                                    </Dialog>\n\n                                    <Dialog visible={visible} modal={true} header={headerElement1} footer={footerContent1} className={`${style.modal} custom-modal`} onHide={handleClose}>\n                                        <div className=\"d-flex flex-column\">\n                                            <p className=\"font-14 mb-1\" style={{ color: '#475467', fontWeight: 500 }}>Category name</p>\n                                            <InputText {...register('name')} placeholder='Industry name' className={style.inputBox} />\n                                            {errors.name && <small className=\"p-error\">{errors.name.message}</small>}\n                                        </div>\n                                        <div className=\"mt-3 d-flex flex-column\">\n                                            <p className=\"font-14 mb-1\" style={{ color: '#475467', fontWeight: 500 }}>Value</p>\n                                            <InputText {...register('value')} placeholder='Category Value' className={style.inputBox} />\n                                            {errors.value && <small className=\"p-error\">{errors.value.message}</small>}\n                                        </div>\n                                    </Dialog>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default CustomersDiscountCategory;\n"],"names":["CustomersDiscountCategory","trialHeight","useTrialHeight","activeTab","setActiveTab","useState","selectedIndustryId","setSelectedIndustryId","data","industriesList","refetch","useQuery","queryKey","queryFn","getCategoriesList","enabled","schema","yup","name","required","value","register","handleSubmit","setValue","reset","formState","errors","useForm","resolver","yupResolver","defaultValues","useEffect","async","industryData","readCategories","industryId","fetchIndustry","onSuccess","mutation","useMutation","mutationFn","newCategories","handleClose","updateIndustryMutation","id","_ref","Error","updateCategories","deleteIndustryMutation","deleteCategories","onSubmit","mutate","visible2","setVisible2","visible","setVisible","headerElement","_jsx","className","style","modalHeader","children","_jsxs","circledesignstyle","out","PencilSquare","size","color","headerTitle","headerElement1","footerContent","Button","onClick","width","footerContent1","_Fragment","Helmet","Sidebar","Link","to","tablePrimeBar","paddingBottom","label","PlusLg","DataTable","tableStyle","minWidth","Column","field","header","body","rowData","handleEditClick","cursor","Dialog","modal","footer","onHide","fontWeight","InputText","inputBox","message","placeholder"],"sourceRoot":""}